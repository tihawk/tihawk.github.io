"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[548],{8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var i=n(6540);const a={},r=i.createContext(a);function o(t){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),i.createElement(r.Provider,{value:e},t.children)}},9823:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var i=n(4848),a=n(8453);const r={slug:"permutation-java",title:"permutation-java",description:"TODO Add description here",authors:"kiroki",tags:["algorithms","java"]},o="permutation-java",s={permalink:"/snip/permutation-java",source:"@site/snip/permutation-java.md",title:"permutation-java",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"algorithms",permalink:"/snip/tags/algorithms"},{label:"java",permalink:"/snip/tags/java"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"permutation-java",title:"permutation-java",description:"TODO Add description here",authors:"kiroki",tags:["algorithms","java"]},unlisted:!1,prevItem:{title:"nasm-typical-usecase",permalink:"/snip/nasm-typical-usecase"},nextItem:{title:"queue-java",permalink:"/snip/queue-java"}},p={authorsImageUrls:[void 0]},u=[];function c(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Date created: 2024-09-27"}),"\n",(0,i.jsx)(e.h1,{id:"string-permutation-printer-in-java",children:"String permutation printer in Java"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'\npublic class Permutation {\n\n  public static void testRun() {\n    permutation("1234");\n  }\n\n  public static void permutation(String input){\n    permutation("", input);\n  }\n\n  private static void permutation(String perm, String word) {\n    if (word.isEmpty()) {\n      System.out.println(perm + word);\n\n    } else {\n      for (int i = 0; i < word.length(); i++) {\n        permutation(perm + word.charAt(i), word.substring(0, i)\n            + word.substring(i + 1, word.length()));\n      }\n    }\n\n  }\n}\n'})})]})}function m(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(c,{...t})}):c(t)}}}]);