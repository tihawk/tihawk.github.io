"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1644],{8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var i=s(6540);const r={},n=i.createContext(r);function a(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},8626:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var i=s(4848),r=s(8453);const n={slug:"systemd-custom-service-template",title:"systemd-custom-service-template",description:"TODO Add description here",authors:"kiroki",tags:["linux","devops"]},a="systemd-custom-service-template",l={permalink:"/snip/systemd-custom-service-template",source:"@site/snip/systemd-custom-service-template.md",title:"systemd-custom-service-template",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"linux",permalink:"/snip/tags/linux"},{label:"devops",permalink:"/snip/tags/devops"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"systemd-custom-service-template",title:"systemd-custom-service-template",description:"TODO Add description here",authors:"kiroki",tags:["linux","devops"]},unlisted:!1,prevItem:{title:"switch-to-git-repo-root",permalink:"/snip/switch-to-git-repo-root"},nextItem:{title:"ubuntu-install-rpm",permalink:"/snip/ubuntu-install-rpm"}},o={authorsImageUrls:[void 0]},c=[{value:"Restart limit",id:"restart-limit",level:2},{value:"Limited automatic restart with a valid StartLimitIntervalSec",id:"limited-automatic-restart-with-a-valid-startlimitintervalsec",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Date created: 2024-10-10"}),"\n",(0,i.jsx)(t.h1,{id:"resources-and-links",children:"Resources and links"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html",children:"https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html"})}),"\n",(0,i.jsx)(t.h1,{id:"go-wild-here",children:"Go wild here"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-systemd",metastring:'title="some.service"',children:'[Unit]\nDescription=Some service template\nAfter=network.target    # Means "start when network ready".\n                        # Can be replaced with the name of some other service to wait for.\nStartLimitIntervalSec=0\n\n[Service]\nType=simple     # One of simple, exec, forking, oneshot, dbus, notify, notify-reload, or idle.\nRestart=always  # One of always, on-failure, on-success, on-abnormal, on-watchdog, on-abort.\nRestartSec=1    # Time to sleep before attempting a restart.\nUser=kblagoev   # User to run service under.\nExecStart=/usr/bin/env php /path/to/server.php # The actual command to run.\n\n[Install]\nWantedBy=multi-user.target\n'})}),"\n",(0,i.jsx)(t.p,{children:"To make use of it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell-session",children:"$ cp <some.service> /etc/systemd/system/<some.service>\n$ systemctl start <some.service>\n$ systemctl enable <some.service> # This will ensure automatic start on boot\n"})}),"\n",(0,i.jsx)(t.h1,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(t.h2,{id:"restart-limit",children:"Restart limit"}),"\n",(0,i.jsxs)(t.p,{children:["By default, ",(0,i.jsx)(t.code,{children:"systemd"})," gives up restarting the service if it fails to start more\nthan 5 times within 10 seconds. This is defined in the following variables"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell-session",children:"[Unit]\nStartLimitBurst=5\nStartLimitIntervalSec=10\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This is avoided by setting ",(0,i.jsx)(t.code,{children:"StartLimitIntervalSec=0"}),". This will assure systemd\nattempts restarting forever. The idea is that, as long as\n",(0,i.jsx)(t.code,{children:"StartLimitIntervalSec"})," is less than ",(0,i.jsx)(t.code,{children:"RestartSec * StartLimitBurst"}),", the service\nwill be restarted indefinitely."]}),"\n",(0,i.jsxs)(t.p,{children:["As an alternative, you can leave the default settings, and ask systemd to\nrestart your service if the start limit is reached, using\n",(0,i.jsx)(t.code,{children:"StartLimitAction=reboot"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"limited-automatic-restart-with-a-valid-startlimitintervalsec",children:"Limited automatic restart with a valid StartLimitIntervalSec"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://serverfault.com/questions/736624/systemd-service-automatic-restart-after-startlimitinterval",children:"https://serverfault.com/questions/736624/systemd-service-automatic-restart-after-startlimitinterval"})}),"\n",(0,i.jsx)(t.p,{children:"To have a service restart 3 times at 90 second intervals include the following\nlines in your systemd service file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell-session",children:"[Unit]\nStartLimitIntervalSec=400\nStartLimitBurst=3\n[Service]\nRestart=always\nRestartSec=90\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);