"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2567],{2714:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);const a={"donate-card":"donate-card_mbts",bmac:"bmac_qmhE"};var i=t(4848);function o(){return(0,i.jsx)("div",{className:"alert alert--primary",role:"alert",children:(0,i.jsxs)("div",{className:"card__body",children:[(0,i.jsx)("p",{children:"Thank you for reading!"}),(0,i.jsx)("p",{children:"The information in this blog, as well as all the tools, apps and libraries I develop are currently open source."}),(0,i.jsx)("p",{children:"I would love to keep it this way, and you can help!"}),(0,i.jsx)("p",{children:"You can buy me a coffee from here, which will go towards the next all-nighter I pull off!"}),(0,i.jsx)("a",{href:"https://www.buymeacoffee.com/kblagoev",target:"_blank",children:(0,i.jsx)("img",{src:"https://cdn.buymeacoffee.com/buttons/v2/default-violet.png",className:a.bmac,alt:"Buy Me A Coffee"})}),(0,i.jsxs)("p",{children:["Or you can support me and my code monthly over at ",(0,i.jsx)("a",{href:"https://github.com/sponsors/tihawk",target:"_blank",children:"Github Sponsors!"})]}),(0,i.jsx)("p",{children:"Thanks!"})]})})}},3298:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var a=t(4848),i=t(8453),o=t(2714);const r={slug:"phasestream-2-cyberapocalypse-2021-ctf",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},s=void 0,l={permalink:"/blog/phasestream-2-cyberapocalypse-2021-ctf",source:"@site/blog/2021-04-27-19:33:57phasestream-2-cyberapocalypse-2021-ctf.md",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",date:"2021-04-27T00:00:00.000Z",formattedDate:"April 27, 2021",tags:[{label:"Cyber Security",permalink:"/blog/tags/cyber-security"},{label:"CTF",permalink:"/blog/tags/ctf"}],readingTime:2.12,hasTruncateMarker:!0,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"phasestream-2-cyberapocalypse-2021-ctf",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},unlisted:!1,prevItem:{title:"Phasestream 1- Cyberapocalypse 2021 CTF",permalink:"/blog/phasestream-1-cyberapocalypse-2021-ctf"},nextItem:{title:"Quantum Programming - Abstraction level 2: State Machine and Algorithms",permalink:"/blog/quantum-programming-abstraction-level-2-algorithms"}},c={authorsImageUrls:[void 0]},h=[{value:"Prompt",id:"prompt",level:3},{value:"Recon",id:"recon",level:3},{value:"Solution",id:"solution",level:3}];function d(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto."}),"\n",(0,a.jsx)(n.h3,{id:"prompt",children:"Prompt"}),"\n",(0,a.jsx)(n.p,{children:'The aliens have learned of a new concept called "security by obscurity". Fortunately for us they think it is a great idea and not a description of a common mistake. We\'ve intercepted some alien comms and think they are XORing flags with a single-byte key and hiding the result inside 9999 lines of random data, Can you find the flag?'}),"\n",(0,a.jsx)(n.h3,{id:"recon",children:"Recon"}),"\n",(0,a.jsxs)(n.p,{children:["We have a file with 9999 lines of hex-encoded strings. We know so far, that one of these lines contain an encrypted flag, and that the flag is 1 byte long. We also know that the flag starts with ",(0,a.jsx)(n.code,{children:"CHTB"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This information gives us the following idea. We can loop through all 256 possible keys (in ASCII), and XOR the first 4 values of each line (8 symbols of each line, since it's encoded in hex). If that encoded string is ",(0,a.jsx)(n.code,{children:"CHTB"}),", we've found both our key and our line which contains the flag."]}),"\n",(0,a.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(n.p,{children:"Let's create a logic flow:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Read a line from ",(0,a.jsx)(n.code,{children:"output.txt"})]}),"\n",(0,a.jsx)(n.li,{children:"Take the first 8 characters of it, and transform them from hex into their ASCII codes"}),"\n",(0,a.jsx)(n.li,{children:"XOR those 4 characters with one of 256 possible ASCII codes"}),"\n",(0,a.jsxs)(n.li,{children:["If we find that this equals ",(0,a.jsx)(n.code,{children:"CHTB"}),", we've found our line and key"]}),"\n",(0,a.jsx)(n.li,{children:"We can now decrypt our line with the key we've found"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\n\n# Flag starts with CHTB which is 67 72 84 66 in ASCII or 0x43 0x48 0x54 0x42 in hex\n# The key is 1 byte long\n\nCHTB = [67, 72, 84, 66]\n\nkeys = [i for i in range(256)]\n\ndef findKeyAndLine():\n  with open('output.txt') as f:\n    foundKey = ''\n    foundLine = ''\n    for line in f:\n      candidateC = int(line[0:2], 16)\n      candidateH = int(line[2:4], 16)\n      candidateT = int(line[4:6], 16)\n      candidateB = int(line[6:8], 16)\n\n      for key in keys:\n        condition = candidateC ^ key == CHTB[0] and candidateH ^ key == CHTB[1] and candidateT ^ key == CHTB[2] and candidateB ^ key == CHTB[3]\n        if condition:\n          foundKey = key\n          foundLine = line[:-1]\n          break\n    print('Key:', foundKey, 'Line:', foundLine)\n  return {'key': foundKey, 'line': foundLine}\n\ndef decrypt(keyAndLine):\n  flag = []\n  key = keyAndLine['key']\n  line = keyAndLine['line']\n\n  for ind in range(0, len(line), 2):\n    hexChar = line[ind:ind+2]\n    byte = int(hexChar, 16)\n    asciiNum = byte ^ key\n    flag.append(chr(asciiNum))\n\n  print('Flag:', ''.join(flag))\n\ndecrypt(findKeyAndLine())\n"})}),"\n",(0,a.jsx)(n.p,{children:"And so, we find our flag"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"Key:  69 Line:  060d11073e2b76762129761a742b1a711a2d713c363171262e38\nFlag:  CHTB{n33dl3_1n_4_h4yst4ck}\n"})}),"\n","\n","\n",(0,a.jsx)(o.A,{})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);