"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7968],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var i=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),g=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=g(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=g(t),m=a,u=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return t?i.createElement(u,r(r({ref:n},p),{},{components:t})):i.createElement(u,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,r[1]=l;for(var g=2;g<o;g++)r[g]=t[g];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1233:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>g});var i=t(8168),a=(t(6540),t(5680));const o={slug:"using-stow-for-managing dotfiles",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",authors:"kiroki",tags:["Coding","Configuration","Productivity","Linux"]},r=void 0,l={permalink:"/blog/using-stow-for-managing dotfiles",source:"@site/blog/2024-10-06using-stow-for-managing-dotfiles.md",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",date:"2024-10-06T00:00:00.000Z",formattedDate:"October 6, 2024",tags:[{label:"Coding",permalink:"/blog/tags/coding"},{label:"Configuration",permalink:"/blog/tags/configuration"},{label:"Productivity",permalink:"/blog/tags/productivity"},{label:"Linux",permalink:"/blog/tags/linux"}],readingTime:6.98,hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"using-stow-for-managing dotfiles",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",authors:"kiroki",tags:["Coding","Configuration","Productivity","Linux"]},nextItem:{title:"How to connect to an Android Emulator from VirtualBox",permalink:"/blog/developing-on-android-emulator-from-virtualbox"}},s={authorsImageUrls:[void 0]},g=[{value:"Motivation",id:"motivation",level:2},{value:"Setup",id:"setup",level:2},{value:"How <em>stow</em> likes it",id:"how-stow-likes-it",level:3},{value:"How it is now",id:"how-it-is-now",level:3},{value:"Usage",id:"usage",level:2},{value:"Stowing",id:"stowing",level:3},{value:"Unstowing",id:"unstowing",level:3},{value:"Additional note on Usage",id:"additional-note-on-usage",level:2}],p={toc:g},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"motivation"},"Motivation"),(0,a.yg)("p",null,"I've been trying to maintain a ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," repository for a few years now. There, I keep configurations for all kinds of different tools and applications I keep on my development machines. It's great for maintainability and versioning, but maintaining and keeping the ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," up to date can be a tedious task. But I've quite accidentally found a good and easy way to do it!"),(0,a.yg)("p",null,"The three major options I've considered are:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Setting up a home directory as a ",(0,a.yg)("inlineCode",{parentName:"li"},"--bare")," git repository."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Symbolic_link"},"Symlinking")," every configuration manually"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://linux.die.net/man/8/stow"},(0,a.yg)("em",{parentName:"a"},"Stow")))),(0,a.yg)("p",null,"The first option of the runt, is of course - from a storytelling point, the first one to discard."),(0,a.yg)("p",null,"Setting up your entire home directory as a repository, you have to be careful with exactly what to track, and what not. Basically, you'd need a ",(0,a.yg)("inlineCode",{parentName:"p"},".gitignore")," file that you'd have to constantly update with everything ",(0,a.yg)("em",{parentName:"p"},"but")," the things you want to keep track of. It's very prone to accidentally adding something you don't want tracked, and forgetting to include it in the ",(0,a.yg)("inlineCode",{parentName:"p"},".gitignore"),". Plus, a giant git repo in my home directory isn't really to my taste."),(0,a.yg)("p",null,"Manual symlinking does solve those problems, but it can be quite complicated to automate and keep track of. ",(0,a.yg)("em",{parentName:"p"},"Stow")," is an abstraction on top of symlinks, that allows us to automate symlink management, and turn it into ",(0,a.yg)("em",{parentName:"p"},"package management"),". Let's see how to set up your ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," repo, in order to make use of ",(0,a.yg)("em",{parentName:"p"},"stow"),"."),(0,a.yg)("h2",{id:"setup"},"Setup"),(0,a.yg)("p",null,"Before using ",(0,a.yg)("em",{parentName:"p"},"stow"),", my config files were laid out in a very simple way. Basically, everything that was in the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/.config/")," directory, was just copied into ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/.config/"),". Other configs that were just files or directories inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME")," directory, I just copied into the repo root ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/")," - for example from ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/.bashrc")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/.bashrc"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-code",metastring:'title="~/code/dotfiles"',title:'"~/code/dotfiles"'},".\n|-- .bashrc\n|-- .config\n|   |-- gtk-3.0\n|   |   `-- [... files]\n|   |-- i3\n|   |   `-- [... files]\n|   |-- nvim\n|   |   |-- after\n|   |   |   |-- ftplugin\n|   |   |   |   `-- [... files]\n|   |   |   `-- plugin\n|   |   |       `-- [... files]\n|   |   |-- init.lua\n|   |   |-- lua\n|   |   |   `-- kiroki\n|   |   |       `-- [... files]\n|   |   `-- plugin\n|   |       `-- [... files]\n|   `-- terminator\n|       `-- [... files]\n|-- i3blocks\n|   `-- [... files]\n`-- .local\n    `-- share\n        `-- fonts\n            `-- [... files]\n")),(0,a.yg)("h3",{id:"how-stow-likes-it"},"How ",(0,a.yg)("em",{parentName:"h3"},"stow")," likes it"),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Stow")," works more like (or exactly like) a package manager. We have to think of each configuration we manage as a package. So, instead of having a bunch of configurations under the ",(0,a.yg)("inlineCode",{parentName:"p"},".config")," directory, like ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/.config/i3")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/.config/nvim"),", we can split these into separate directories, in this example ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/i3/.config/i3")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/nvim/.config/nvim"),"."),(0,a.yg)("p",null,"We can name them however though, so it could be ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/foo/.config/i3")," for our i3 config."),(0,a.yg)("p",null,"And technically, if we want to be not-so-clever, we can just do something like ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/my-dot-config-directory/.config/<everything like i3 and nvim>"),". But the power of ",(0,a.yg)("em",{parentName:"p"},"stow")," is that we can stow and unstow each config like a package. This technically means, that we can also version our configs. For example, we could have one version of i3 for Arch under ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/i3-arch/.config/i3"),", and one for Ubuntu under ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/i3-ubuntu/.config/i3"),". Because of these reasons, I recommend this package structure."),(0,a.yg)("p",null,"For another example, the ",(0,a.yg)("inlineCode",{parentName:"p"},".bashrc")," file is typically right in the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME"),' directory, so we can "package" it simply as ',(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/bash/.bashrc"),". I know, I know - who uses bash anymore... well, I do apparently :)"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("em",{parentName:"p"},"Stow")," is technically a ",(0,a.yg)("em",{parentName:"p"},"package manager"),". To make full use of it, we can turn ",(0,a.yg)("em",{parentName:"p"},"every")," configuration we contain in our ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," into a package, by placing it in its own directory.")),(0,a.yg)("h3",{id:"how-it-is-now"},"How it is now"),(0,a.yg)("p",null,"After we migrate to using ",(0,a.yg)("em",{parentName:"p"},"stow"),", our repo structure now looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-code",metastring:'title="~/code/dotfiles"',title:'"~/code/dotfiles"'},".\n|-- bash\n|   `-- .bashrc\n|-- fonts\n|   `-- .local\n|       `-- share\n|           `-- fonts\n|               `-- [... files]\n|-- gtk-3.0\n|   `-- .config\n|       `-- gtk-3.0\n|           `-- [... files]\n|-- i3\n|   `-- .config\n|       `-- i3\n|           `-- [... files]\n|-- i3blocks\n|   `-- i3blocks\n|       `-- [... files]\n|-- nvim\n|   `-- .config\n|       `-- nvim\n|           |-- after\n|           |   |-- ftplugin\n|           |   |   `-- [... files]\n|           |   `-- plugin\n|           |       `-- [... files]\n|           |-- init.lua\n|           |-- lua\n|           |   `-- kiroki\n|           |       `-- [... files]\n|           `-- plugin\n|               `-- [... files]\n|-- stow_config.sh\n`-- terminator\n    `-- .config\n        `-- terminator\n            `-- [... files]\n\n")),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"stowing"},"Stowing"),(0,a.yg)("p",null,"Well, great. So far, we've basically just moved some directories around. So, what now?"),(0,a.yg)("p",null,"Well, now we can just run ",(0,a.yg)("em",{parentName:"p"},"stow")," for each of these newly created packages. The way that ",(0,a.yg)("em",{parentName:"p"},"stow"),' works, is that it takes the directory inside of the "package" directory, and creates a symlink to it in the parent of the current working directory.'),(0,a.yg)("p",null,"So, for example, if we now ",(0,a.yg)("em",{parentName:"p"},"cd")," into ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/"),", we can run ",(0,a.yg)("inlineCode",{parentName:"p"},"stow i3"),". What this will do is, it will create a symlink to ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/i3/.config/i3")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/.config/"),". That will look something like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"lrwxrwxrwx  1 kblagoev kblagoev   30 Oct  6 23:14 i3 -> ../code/dotfiles/i3/.config/i3/\n")),(0,a.yg)("p",null,'"But wait!", I hear you say. "Isn\'t this ',(0,a.yg)("inlineCode",{parentName:"p"},"i3")," directory, or symlink, or whatever, supposed to be in our ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME")," directory? What is it doing in ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/"),'?".'),(0,a.yg)("p",null,"You're absolutely right. Let's fix this. ",(0,a.yg)("em",{parentName:"p"},"Stow")," has a flag ",(0,a.yg)("inlineCode",{parentName:"p"},"-t"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"--target"),", with which we can specify the root of the package management. This target is by default the parent of the ",(0,a.yg)("em",{parentName:"p"},"pwd"),", and that's why by running ",(0,a.yg)("em",{parentName:"p"},"stow")," inside of ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/dotfiles/"),", the symlinking occurred under ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/")," (and resulted in our symlink being ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/code/.config/i3"),". It can be a bit confusing to keep track of this, but yeah). So, instead, we want to target the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME")," directory. That's why we should run ",(0,a.yg)("inlineCode",{parentName:"p"},"stow -t $HOME i3")," instead."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If we don't place our ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," repository in the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME")," directory, we have to target it when we use ",(0,a.yg)("em",{parentName:"p"},"stow")," by utilising the ",(0,a.yg)("inlineCode",{parentName:"p"},"-t")," flag, e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},"stow -t $HOME i3"),".")),(0,a.yg)("h3",{id:"unstowing"},"Unstowing"),(0,a.yg)("p",null,"Removing a config is super simple with ",(0,a.yg)("em",{parentName:"p"},"stow")," as well. Following our example with i3, we can simply run ",(0,a.yg)("inlineCode",{parentName:"p"},"stow -D -t $HOME i3"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"-D")," flag deletes the symlink, and our config is gone from the ",(0,a.yg)("inlineCode",{parentName:"p"},"$HOME/.config/")," directory. And only that config!"),(0,a.yg)("h2",{id:"additional-note-on-usage"},"Additional note on Usage"),(0,a.yg)("p",null,"There is a flag ",(0,a.yg)("inlineCode",{parentName:"p"},"--dotfiles"),", which allows to rename hidden directories, such as ",(0,a.yg)("inlineCode",{parentName:"p"},".whatever-the-name-is")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"dot-whatever-the-name-is"),", and for them to be pre-processed by ",(0,a.yg)("em",{parentName:"p"},"stow")," by replacing ",(0,a.yg)("inlineCode",{parentName:"p"},"dot-")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"."),". This is useful, so there aren't hidden files and directories in the repo. Quite useful for easier searching that respects hidden files."),(0,a.yg)("p",null,"This is great and all, but in the latest version of ",(0,a.yg)("em",{parentName:"p"},"stow")," on Ubuntu there's a bug with that. The bug is fixed in the newest release of ",(0,a.yg)("em",{parentName:"p"},"stow"),", but I will wait for it to get updated in ",(0,a.yg)("em",{parentName:"p"},"apt"),", before migrating to that setting - just for availability reasons."),(0,a.yg)("p",null,"But if you're going to install the latest version of ",(0,a.yg)("em",{parentName:"p"},"stow"),", do keep that option in your mind. It's pretty neat."),(0,a.yg)("p",null,"And lastly, for my own convenience, I've written a bash script which can stow and unstow all the packages inside my repo with one command. I've opted into having a manually updated list of the packages, just because I keep some other junk in the ",(0,a.yg)("em",{parentName:"p"},"dotfiles")," repo, but this can be changed. I will paste the script here, if you'd like to use it yourself (or a modified version of it)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="stow_config.sh"',title:'"stow_config.sh"'},'#!/bin/bash\n\n# Define an array of package names\npackages=(\n  "bash"\n  "gtk-3.0"\n  "i3"\n  "i3blocks"\n  "terminator"\n  "nvim"\n  "fonts"\n)\n\n# Check if the first argument is "remove" to use the -D flag\nstow_flag="-t"\nif [ "$1" == "remove" ]; then\n  stow_flag="-D -t"\nfi\n\n# Loop through each package and run stow or unstow with -D\nfor package in "${packages[@]}"; do\n  if [ "$1" == "remove" ]; then\n    echo "Unstowing $package..."\n  else\n    echo "Stowing $package..."\n  fi\n\n  stow $stow_flag "$HOME" "$package"\n\n  if [ $? -eq 0 ]; then\n    if [ "$1" == "remove" ]; then\n      echo "$package unstowed successfully."\n    else\n      echo "$package stowed successfully."\n    fi\n  else\n    if [ "$1" == "remove" ]; then\n      echo "Error unstowing $package."\n    else\n      echo "Error stowing $package."\n    fi\n  fi\ndone\n\necho "All done!"\n\n\n')),(0,a.yg)("p",null,"Running ",(0,a.yg)("inlineCode",{parentName:"p"},"./stow_config.sh")," will stow, and running ",(0,a.yg)("inlineCode",{parentName:"p"},"./stow_config.sh remove")," will unstow the listed packages."),(0,a.yg)("p",null,"That's it! glhf"))}d.isMDXComponent=!0}}]);