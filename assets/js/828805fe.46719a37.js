"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2447],{7059:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=i(4848),t=i(8453);const s={slug:"using-stow-for-managing dotfiles",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",authors:"kiroki",tags:["Coding","Configuration","Productivity","Linux"]},a=void 0,r={permalink:"/blog/using-stow-for-managing dotfiles",source:"@site/blog/2024-10-06using-stow-for-managing-dotfiles.md",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",date:"2024-10-06T00:00:00.000Z",formattedDate:"October 6, 2024",tags:[{label:"Coding",permalink:"/blog/tags/coding"},{label:"Configuration",permalink:"/blog/tags/configuration"},{label:"Productivity",permalink:"/blog/tags/productivity"},{label:"Linux",permalink:"/blog/tags/linux"}],readingTime:6.98,hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"using-stow-for-managing dotfiles",title:"How I manage configuration files on my Linux machine using dotfiles and stow",description:"Maintaining your dotfiles can be actually really simple, once you set it up in a good way. After a few attempts, I landed on stow, and I ain't going back!",authors:"kiroki",tags:["Coding","Configuration","Productivity","Linux"]},unlisted:!1,prevItem:{title:"The Winamp GitHub repository is seriously mismanaged. And there's nothing they can do about it now.",permalink:"/blog/winamp-github-repository-problems"},nextItem:{title:"How to connect to an Android Emulator from VirtualBox",permalink:"/blog/developing-on-android-emulator-from-virtualbox"}},l={authorsImageUrls:[void 0]},c=[{value:"Motivation",id:"motivation",level:2},{value:"Setup",id:"setup",level:2},{value:"How <em>stow</em> likes it",id:"how-stow-likes-it",level:3},{value:"How it is now",id:"how-it-is-now",level:3},{value:"Usage",id:"usage",level:2},{value:"Stowing",id:"stowing",level:3},{value:"Unstowing",id:"unstowing",level:3},{value:"Additional note on Usage",id:"additional-note-on-usage",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,o.jsxs)(n.p,{children:["I've been trying to maintain a ",(0,o.jsx)(n.em,{children:"dotfiles"})," repository for a few years now. There, I keep configurations for all kinds of different tools and applications I keep on my development machines. It's great for maintainability and versioning, but maintaining and keeping the ",(0,o.jsx)(n.em,{children:"dotfiles"})," up to date can be a tedious task. But I've quite accidentally found a good and easy way to do it!"]}),"\n",(0,o.jsx)(n.p,{children:"The three major options I've considered are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Setting up a home directory as a ",(0,o.jsx)(n.code,{children:"--bare"})," git repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Symbolic_link",children:"Symlinking"})," every configuration manually"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://linux.die.net/man/8/stow",children:(0,o.jsx)(n.em,{children:"Stow"})})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The first option of the runt, is of course - from a storytelling point, the first one to discard."}),"\n",(0,o.jsxs)(n.p,{children:["Setting up your entire home directory as a repository, you have to be careful with exactly what to track, and what not. Basically, you'd need a ",(0,o.jsx)(n.code,{children:".gitignore"})," file that you'd have to constantly update with everything ",(0,o.jsx)(n.em,{children:"but"})," the things you want to keep track of. It's very prone to accidentally adding something you don't want tracked, and forgetting to include it in the ",(0,o.jsx)(n.code,{children:".gitignore"}),". Plus, a giant git repo in my home directory isn't really to my taste."]}),"\n",(0,o.jsxs)(n.p,{children:["Manual symlinking does solve those problems, but it can be quite complicated to automate and keep track of. ",(0,o.jsx)(n.em,{children:"Stow"})," is an abstraction on top of symlinks, that allows us to automate symlink management, and turn it into ",(0,o.jsx)(n.em,{children:"package management"}),". Let's see how to set up your ",(0,o.jsx)(n.em,{children:"dotfiles"})," repo, in order to make use of ",(0,o.jsx)(n.em,{children:"stow"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["Before using ",(0,o.jsx)(n.em,{children:"stow"}),", my config files were laid out in a very simple way. Basically, everything that was in the ",(0,o.jsx)(n.code,{children:"$HOME/.config/"})," directory, was just copied into ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/.config/"}),". Other configs that were just files or directories inside the ",(0,o.jsx)(n.code,{children:"$HOME"})," directory, I just copied into the repo root ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/"})," - for example from ",(0,o.jsx)(n.code,{children:"$HOME/.bashrc"})," to ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/.bashrc"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-code",metastring:'title="~/code/dotfiles"',children:".\n|-- .bashrc\n|-- .config\n|   |-- gtk-3.0\n|   |   `-- [... files]\n|   |-- i3\n|   |   `-- [... files]\n|   |-- nvim\n|   |   |-- after\n|   |   |   |-- ftplugin\n|   |   |   |   `-- [... files]\n|   |   |   `-- plugin\n|   |   |       `-- [... files]\n|   |   |-- init.lua\n|   |   |-- lua\n|   |   |   `-- kiroki\n|   |   |       `-- [... files]\n|   |   `-- plugin\n|   |       `-- [... files]\n|   `-- terminator\n|       `-- [... files]\n|-- i3blocks\n|   `-- [... files]\n`-- .local\n    `-- share\n        `-- fonts\n            `-- [... files]\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"how-stow-likes-it",children:["How ",(0,o.jsx)(n.em,{children:"stow"})," likes it"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Stow"})," works more like (or exactly like) a package manager. We have to think of each configuration we manage as a package. So, instead of having a bunch of configurations under the ",(0,o.jsx)(n.code,{children:".config"})," directory, like ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/.config/i3"})," and ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/.config/nvim"}),", we can split these into separate directories, in this example ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/i3/.config/i3"})," and ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/nvim/.config/nvim"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["We can name them however though, so it could be ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/foo/.config/i3"})," for our i3 config."]}),"\n",(0,o.jsxs)(n.p,{children:["And technically, if we want to be not-so-clever, we can just do something like ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/my-dot-config-directory/.config/<everything like i3 and nvim>"}),". But the power of ",(0,o.jsx)(n.em,{children:"stow"})," is that we can stow and unstow each config like a package. This technically means, that we can also version our configs. For example, we could have one version of i3 for Arch under ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/i3-arch/.config/i3"}),", and one for Ubuntu under ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/i3-ubuntu/.config/i3"}),". Because of these reasons, I recommend this package structure."]}),"\n",(0,o.jsxs)(n.p,{children:["For another example, the ",(0,o.jsx)(n.code,{children:".bashrc"})," file is typically right in the ",(0,o.jsx)(n.code,{children:"$HOME"}),' directory, so we can "package" it simply as ',(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/bash/.bashrc"}),". I know, I know - who uses bash anymore... well, I do apparently :)"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Stow"})," is technically a ",(0,o.jsx)(n.em,{children:"package manager"}),". To make full use of it, we can turn ",(0,o.jsx)(n.em,{children:"every"})," configuration we contain in our ",(0,o.jsx)(n.em,{children:"dotfiles"})," into a package, by placing it in its own directory."]})}),"\n",(0,o.jsx)(n.h3,{id:"how-it-is-now",children:"How it is now"}),"\n",(0,o.jsxs)(n.p,{children:["After we migrate to using ",(0,o.jsx)(n.em,{children:"stow"}),", our repo structure now looks like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-code",metastring:'title="~/code/dotfiles"',children:".\n|-- bash\n|   `-- .bashrc\n|-- fonts\n|   `-- .local\n|       `-- share\n|           `-- fonts\n|               `-- [... files]\n|-- gtk-3.0\n|   `-- .config\n|       `-- gtk-3.0\n|           `-- [... files]\n|-- i3\n|   `-- .config\n|       `-- i3\n|           `-- [... files]\n|-- i3blocks\n|   `-- i3blocks\n|       `-- [... files]\n|-- nvim\n|   `-- .config\n|       `-- nvim\n|           |-- after\n|           |   |-- ftplugin\n|           |   |   `-- [... files]\n|           |   `-- plugin\n|           |       `-- [... files]\n|           |-- init.lua\n|           |-- lua\n|           |   `-- kiroki\n|           |       `-- [... files]\n|           `-- plugin\n|               `-- [... files]\n|-- stow_config.sh\n`-- terminator\n    `-- .config\n        `-- terminator\n            `-- [... files]\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"stowing",children:"Stowing"}),"\n",(0,o.jsx)(n.p,{children:"Well, great. So far, we've basically just moved some directories around. So, what now?"}),"\n",(0,o.jsxs)(n.p,{children:["Well, now we can just run ",(0,o.jsx)(n.em,{children:"stow"})," for each of these newly created packages. The way that ",(0,o.jsx)(n.em,{children:"stow"}),' works, is that it takes the directory inside of the "package" directory, and creates a symlink to it in the parent of the current working directory.']}),"\n",(0,o.jsxs)(n.p,{children:["So, for example, if we now ",(0,o.jsx)(n.em,{children:"cd"})," into ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/"}),", we can run ",(0,o.jsx)(n.code,{children:"stow i3"}),". What this will do is, it will create a symlink to ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/i3/.config/i3"})," in ",(0,o.jsx)(n.code,{children:"$HOME/code/.config/"}),". That will look something like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"lrwxrwxrwx  1 kblagoev kblagoev   30 Oct  6 23:14 i3 -> ../code/dotfiles/i3/.config/i3/\n"})}),"\n",(0,o.jsxs)(n.p,{children:['"But wait!", I hear you say. "Isn\'t this ',(0,o.jsx)(n.code,{children:"i3"})," directory, or symlink, or whatever, supposed to be in our ",(0,o.jsx)(n.code,{children:"$HOME"})," directory? What is it doing in ",(0,o.jsx)(n.code,{children:"$HOME/code/"}),'?".']}),"\n",(0,o.jsxs)(n.p,{children:["You're absolutely right. Let's fix this. ",(0,o.jsx)(n.em,{children:"Stow"})," has a flag ",(0,o.jsx)(n.code,{children:"-t"}),", or ",(0,o.jsx)(n.code,{children:"--target"}),", with which we can specify the root of the package management. This target is by default the parent of the ",(0,o.jsx)(n.em,{children:"pwd"}),", and that's why by running ",(0,o.jsx)(n.em,{children:"stow"})," inside of ",(0,o.jsx)(n.code,{children:"$HOME/code/dotfiles/"}),", the symlinking occurred under ",(0,o.jsx)(n.code,{children:"$HOME/code/"})," (and resulted in our symlink being ",(0,o.jsx)(n.code,{children:"$HOME/code/.config/i3"}),". It can be a bit confusing to keep track of this, but yeah). So, instead, we want to target the ",(0,o.jsx)(n.code,{children:"$HOME"})," directory. That's why we should run ",(0,o.jsx)(n.code,{children:"stow -t $HOME i3"})," instead."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If we don't place our ",(0,o.jsx)(n.em,{children:"dotfiles"})," repository in the ",(0,o.jsx)(n.code,{children:"$HOME"})," directory, we have to target it when we use ",(0,o.jsx)(n.em,{children:"stow"})," by utilising the ",(0,o.jsx)(n.code,{children:"-t"})," flag, e.g. ",(0,o.jsx)(n.code,{children:"stow -t $HOME i3"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"unstowing",children:"Unstowing"}),"\n",(0,o.jsxs)(n.p,{children:["Removing a config is super simple with ",(0,o.jsx)(n.em,{children:"stow"})," as well. Following our example with i3, we can simply run ",(0,o.jsx)(n.code,{children:"stow -D -t $HOME i3"}),". The ",(0,o.jsx)(n.code,{children:"-D"})," flag deletes the symlink, and our config is gone from the ",(0,o.jsx)(n.code,{children:"$HOME/.config/"})," directory. And only that config!"]}),"\n",(0,o.jsx)(n.h2,{id:"additional-note-on-usage",children:"Additional note on Usage"}),"\n",(0,o.jsxs)(n.p,{children:["There is a flag ",(0,o.jsx)(n.code,{children:"--dotfiles"}),", which allows to rename hidden directories, such as ",(0,o.jsx)(n.code,{children:".whatever-the-name-is"})," to ",(0,o.jsx)(n.code,{children:"dot-whatever-the-name-is"}),", and for them to be pre-processed by ",(0,o.jsx)(n.em,{children:"stow"})," by replacing ",(0,o.jsx)(n.code,{children:"dot-"})," with ",(0,o.jsx)(n.code,{children:"."}),". This is useful, so there aren't hidden files and directories in the repo. Quite useful for easier searching that respects hidden files."]}),"\n",(0,o.jsxs)(n.p,{children:["This is great and all, but in the latest version of ",(0,o.jsx)(n.em,{children:"stow"})," on Ubuntu there's a bug with that. The bug is fixed in the newest release of ",(0,o.jsx)(n.em,{children:"stow"}),", but I will wait for it to get updated in ",(0,o.jsx)(n.em,{children:"apt"}),", before migrating to that setting - just for availability reasons."]}),"\n",(0,o.jsxs)(n.p,{children:["But if you're going to install the latest version of ",(0,o.jsx)(n.em,{children:"stow"}),", do keep that option in your mind. It's pretty neat."]}),"\n",(0,o.jsxs)(n.p,{children:["And lastly, for my own convenience, I've written a bash script which can stow and unstow all the packages inside my repo with one command. I've opted into having a manually updated list of the packages, just because I keep some other junk in the ",(0,o.jsx)(n.em,{children:"dotfiles"})," repo, but this can be changed. I will paste the script here, if you'd like to use it yourself (or a modified version of it)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="stow_config.sh"',children:'#!/bin/bash\n\n# Define an array of package names\npackages=(\n  "bash"\n  "gtk-3.0"\n  "i3"\n  "i3blocks"\n  "terminator"\n  "nvim"\n  "fonts"\n)\n\n# Check if the first argument is "remove" to use the -D flag\nstow_flag="-t"\nif [ "$1" == "remove" ]; then\n  stow_flag="-D -t"\nfi\n\n# Loop through each package and run stow or unstow with -D\nfor package in "${packages[@]}"; do\n  if [ "$1" == "remove" ]; then\n    echo "Unstowing $package..."\n  else\n    echo "Stowing $package..."\n  fi\n\n  stow $stow_flag "$HOME" "$package"\n\n  if [ $? -eq 0 ]; then\n    if [ "$1" == "remove" ]; then\n      echo "$package unstowed successfully."\n    else\n      echo "$package stowed successfully."\n    fi\n  else\n    if [ "$1" == "remove" ]; then\n      echo "Error unstowing $package."\n    else\n      echo "Error stowing $package."\n    fi\n  fi\ndone\n\necho "All done!"\n\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Running ",(0,o.jsx)(n.code,{children:"./stow_config.sh"})," will stow, and running ",(0,o.jsx)(n.code,{children:"./stow_config.sh remove"})," will unstow the listed packages."]}),"\n",(0,o.jsx)(n.p,{children:"That's it! glhf"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);