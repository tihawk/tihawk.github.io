"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6999],{2019:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(4848),o=t(8453);const s={slug:"c-inline-functions",title:"c-inline-functions",description:"TODO Add description here",authors:"kiroki",tags:["c"]},r="c-inline-functions",c={permalink:"/snip/c-inline-functions",source:"@site/snip/c-inline-functions.md",title:"c-inline-functions",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"c",permalink:"/snip/tags/c"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"c-inline-functions",title:"c-inline-functions",description:"TODO Add description here",authors:"kiroki",tags:["c"]},unlisted:!1,prevItem:{title:"build-binary-for-arm",permalink:"/snip/build-binary-for-arm"},nextItem:{title:"c-static-functions",permalink:"/snip/c-static-functions"}},a={authorsImageUrls:[void 0]},l=[];function u(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Date created: 2024-10-06"}),"\n",(0,i.jsx)(n.h1,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Inline functions are a [[c-compiler-suggestion|suggestion for the compiler]] to place the function code\ninline to where it's been executed. This is done for optimisation reasons."}),"\n",(0,i.jsx)(n.h1,{id:"go-wild-here",children:"Go wild here"}),"\n",(0,i.jsx)(n.p,{children:"Consider a simple C function like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"inline uint8_t vga_entry_colour(enum vga_colour fg, enum vga_colour bg) {\n\treturn fg | bg << 4;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"All it does is a simple [[bitwise-operations|bitwise operation]]. If this function was declared as a\nsimple function (not inline), every time we call it, the CPU would have to do\nall the regular things, jump to an address, prepare the stack, execute, pop the\nstack, return."}),"\n",(0,i.jsx)(n.p,{children:"If the function is inline though, this gives the suggestion to the compiler to\nplace the function code inline wherever it's being called, meaning the CPU\ndoesn't have to do all the regular function-call things. This has the\npotential to improve performance if the function is being called many many times\nover."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);