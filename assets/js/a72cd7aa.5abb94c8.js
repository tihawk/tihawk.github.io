"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5351],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,y=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7604:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294);const r={"donate-card":"donate-card_mbts",bmac:"bmac_qmhE"};function o(){return a.createElement("div",{className:"alert alert--primary",role:"alert"},a.createElement("div",{className:"card__body"},a.createElement("p",null,"Thank you for reading!"),a.createElement("p",null,"The information in this blog, as well as all the tools, apps and libraries I develop are currently open source."),a.createElement("p",null,"I would love to keep it this way, and you can help!"),a.createElement("p",null,"You can buy me a coffee from here, which will go towards the next all-nighter I pull off!"),a.createElement("a",{href:"https://www.buymeacoffee.com/kblagoev",target:"_blank"},a.createElement("img",{src:"https://cdn.buymeacoffee.com/buttons/v2/default-violet.png",className:r.bmac,alt:"Buy Me A Coffee"})),a.createElement("p",null,"Or you can support me and my code monthly over at ",a.createElement("a",{href:"https://github.com/sponsors/tihawk",target:"_blank"},"Github Sponsors!")),a.createElement("p",null,"Thanks!")))}},5367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(7604);const i={slug:"phasestream-2-cyberapocalypse-2021-ctf",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},l=void 0,s={permalink:"/blog/phasestream-2-cyberapocalypse-2021-ctf",source:"@site/blog/2021-04-27-19:33:57phasestream-2-cyberapocalypse-2021-ctf.md",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",date:"2021-04-27T00:00:00.000Z",formattedDate:"April 27, 2021",tags:[{label:"Cyber Security",permalink:"/blog/tags/cyber-security"},{label:"CTF",permalink:"/blog/tags/ctf"}],readingTime:2.12,hasTruncateMarker:!0,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"phasestream-2-cyberapocalypse-2021-ctf",title:"Phasestream 2 - Cyberapocalypse 2021 CTF",description:"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},prevItem:{title:"Phasestream 1- Cyberapocalypse 2021 CTF",permalink:"/blog/phasestream-1-cyberapocalypse-2021-ctf"},nextItem:{title:"Quantum Programming - Abstraction level 2: State Machine and Algorithms",permalink:"/blog/quantum-programming-abstraction-level-2-algorithms"}},c={authorsImageUrls:[void 0]},p=[{value:"Prompt",id:"prompt",level:3},{value:"Recon",id:"recon",level:3},{value:"Solution",id:"solution",level:3}],u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is a writeup for the challenge Phasestream 2, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto."),(0,r.kt)("h3",{id:"prompt"},"Prompt"),(0,r.kt)("p",null,'The aliens have learned of a new concept called "security by obscurity". Fortunately for us they think it is a great idea and not a description of a common mistake. We\'ve intercepted some alien comms and think they are XORing flags with a single-byte key and hiding the result inside 9999 lines of random data, Can you find the flag?'),(0,r.kt)("h3",{id:"recon"},"Recon"),(0,r.kt)("p",null,"We have a file with 9999 lines of hex-encoded strings. We know so far, that one of these lines contain an encrypted flag, and that the flag is 1 byte long. We also know that the flag starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"CHTB"),"."),(0,r.kt)("p",null,"This information gives us the following idea. We can loop through all 256 possible keys (in ASCII), and XOR the first 4 values of each line (8 symbols of each line, since it's encoded in hex). If that encoded string is ",(0,r.kt)("inlineCode",{parentName:"p"},"CHTB"),", we've found both our key and our line which contains the flag."),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("p",null,"Let's create a logic flow:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Read a line from ",(0,r.kt)("inlineCode",{parentName:"li"},"output.txt")),(0,r.kt)("li",{parentName:"ol"},"Take the first 8 characters of it, and transform them from hex into their ASCII codes"),(0,r.kt)("li",{parentName:"ol"},"XOR those 4 characters with one of 256 possible ASCII codes"),(0,r.kt)("li",{parentName:"ol"},"If we find that this equals ",(0,r.kt)("inlineCode",{parentName:"li"},"CHTB"),", we've found our line and key"),(0,r.kt)("li",{parentName:"ol"},"We can now decrypt our line with the key we've found")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3\n\n# Flag starts with CHTB which is 67 72 84 66 in ASCII or 0x43 0x48 0x54 0x42 in hex\n# The key is 1 byte long\n\nCHTB = [67, 72, 84, 66]\n\nkeys = [i for i in range(256)]\n\ndef findKeyAndLine():\n  with open('output.txt') as f:\n    foundKey = ''\n    foundLine = ''\n    for line in f:\n      candidateC = int(line[0:2], 16)\n      candidateH = int(line[2:4], 16)\n      candidateT = int(line[4:6], 16)\n      candidateB = int(line[6:8], 16)\n\n      for key in keys:\n        condition = candidateC ^ key == CHTB[0] and candidateH ^ key == CHTB[1] and candidateT ^ key == CHTB[2] and candidateB ^ key == CHTB[3]\n        if condition:\n          foundKey = key\n          foundLine = line[:-1]\n          break\n    print('Key:', foundKey, 'Line:', foundLine)\n  return {'key': foundKey, 'line': foundLine}\n\ndef decrypt(keyAndLine):\n  flag = []\n  key = keyAndLine['key']\n  line = keyAndLine['line']\n\n  for ind in range(0, len(line), 2):\n    hexChar = line[ind:ind+2]\n    byte = int(hexChar, 16)\n    asciiNum = byte ^ key\n    flag.append(chr(asciiNum))\n\n  print('Flag:', ''.join(flag))\n\ndecrypt(findKeyAndLine())\n")),(0,r.kt)("p",null,"And so, we find our flag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Key:  69 Line:  060d11073e2b76762129761a742b1a711a2d713c363171262e38\nFlag:  CHTB{n33dl3_1n_4_h4yst4ck}\n")),(0,r.kt)(o.Z,{mdxType:"DonateCard"}))}h.isMDXComponent=!0}}]);