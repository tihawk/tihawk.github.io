"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5978],{2714:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);const r={"donate-card":"donate-card_mbts",bmac:"bmac_qmhE"};var o=n(4848);function s(){return(0,o.jsx)("div",{className:"alert alert--primary",role:"alert",children:(0,o.jsxs)("div",{className:"card__body",children:[(0,o.jsx)("p",{children:"Thank you for reading!"}),(0,o.jsx)("p",{children:"The information in this blog, as well as all the tools, apps and libraries I develop are currently open source."}),(0,o.jsx)("p",{children:"I would love to keep it this way, and you can help!"}),(0,o.jsx)("p",{children:"You can buy me a coffee from here, which will go towards the next all-nighter I pull off!"}),(0,o.jsx)("a",{href:"https://www.buymeacoffee.com/kblagoev",target:"_blank",children:(0,o.jsx)("img",{src:"https://cdn.buymeacoffee.com/buttons/v2/default-violet.png",className:r.bmac,alt:"Buy Me A Coffee"})}),(0,o.jsxs)("p",{children:["Or you can support me and my code monthly over at ",(0,o.jsx)("a",{href:"https://github.com/sponsors/tihawk",target:"_blank",children:"Github Sponsors!"})]}),(0,o.jsx)("p",{children:"Thanks!"})]})})}},2790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var r=n(4848),o=n(8453),s=n(2714);const l={slug:"soulcrabber-cyberapocalypse-2021-ctf",title:"Soulcrabber - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Soulcrabber challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},i=void 0,a={permalink:"/blog/soulcrabber-cyberapocalypse-2021-ctf",source:"@site/blog/2021-04-27-15:35:53soulcrabber-cyberapocalypse-2021-ctf.md",title:"Soulcrabber - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Soulcrabber challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",date:"2021-04-27T00:00:00.000Z",formattedDate:"April 27, 2021",tags:[{label:"Cyber Security",permalink:"/blog/tags/cyber-security"},{label:"CTF",permalink:"/blog/tags/ctf"}],readingTime:2.615,hasTruncateMarker:!0,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"soulcrabber-cyberapocalypse-2021-ctf",title:"Soulcrabber - Cyberapocalypse 2021 CTF",description:"This is a writeup for the Soulcrabber challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto.",authors:"kiroki",tags:["Cyber Security","CTF"]},unlisted:!1,prevItem:{title:"Emoji Voting - Cyberapocalypse 2021 CTF",permalink:"/blog/emoji-voting-cyberapocalypse-2021-ctf"},nextItem:{title:"Wild goose hunt - Cyberapocalypse 2021 CTF",permalink:"/blog/wild-goose-hunt-cyberapocalypse-2021-ctf"}},c={authorsImageUrls:[void 0]},d=[{value:"Propmpt",id:"propmpt",level:3},{value:"Recon",id:"recon",level:3},{value:"Solution",id:"solution",level:3}];function h(e){const t={code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This is a writeup for the Soulcrabber challenge, part of the Hack the box's Cyberapocalypse CTF 2021, category Crypto."}),"\n",(0,r.jsx)(t.h3,{id:"propmpt",children:"Propmpt"}),"\n",(0,r.jsx)(t.p,{children:"Aliens heard of this cool newer language called Rust, and hoped the safety it offers could be used to improve their stream cipher."}),"\n",(0,r.jsx)(t.h3,{id:"recon",children:"Recon"}),"\n",(0,r.jsxs)(t.p,{children:["We get a Rust script which applies a seemingly random XOR cypher to a ",(0,r.jsx)(t.code,{children:"flag.txt"})," file, and outputs it in ",(0,r.jsx)(t.em,{children:"hex"})," to ",(0,r.jsx)(t.code,{children:"out.txt"}),". We also get the output file, so all we have to do is reverse the procedure."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'use rand::{Rng,SeedableRng};\nuse rand::rngs::StdRng;\nuse std::fs;\nuse std::io::Write;\n\nfn get_rng() -> StdRng {\n    let seed = 13371337;\n    return StdRng::seed_from_u64(seed);\n}\n\nfn rand_xor(input : String) -> String {\n    let mut rng = get_rng();\n    return input\n        .chars()\n        .into_iter()\n        .map(|c| format!("{:02x}", (c as u8 ^ rng.gen::<u8>())))\n        .collect::<Vec<String>>()\n        .join("");\n}\n\nfn main() -> std::io::Result<()> {\n    let flag = fs::read_to_string("flag.txt")?;\n    let xored = rand_xor(flag);\n    println!("{}", xored);\n    let mut file = fs::File::create("out.txt")?;\n    file.write(xored.as_bytes())?;\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Sequence of events:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Open a file ",(0,r.jsx)(t.code,{children:"flag.txt"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Generate a random key for XOR by using the seed ",(0,r.jsx)(t.code,{children:"13371337"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["XOR the contents of ",(0,r.jsx)(t.code,{children:"flag.txt"})," with the key."]}),"\n",(0,r.jsxs)(t.li,{children:["Write out the result onto ",(0,r.jsx)(t.code,{children:"out.txt"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Although the code for XOR is generated by a random number generator, we immediately notice that the RNG is supplied with a known seed. This automatically means, that the numbers generated by it will follow the same sequence every time."}),"\n",(0,r.jsxs)(t.p,{children:["So all we have to do to reverse the process is to supply ",(0,r.jsx)(t.code,{children:"out.txt"})," as input (in hex) to the function, and we will get the original flag in hex as output."]}),"\n",(0,r.jsx)(t.h3,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(t.p,{children:"Sequence:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read the hex value contents of ",(0,r.jsx)(t.code,{children:"out.txt"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Generate the pseudo-random key by using the same seed."}),"\n",(0,r.jsxs)(t.li,{children:["XOR the contents of ",(0,r.jsx)(t.code,{children:"out.txt"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Write the XORed value onto ",(0,r.jsx)(t.code,{children:"flag.txt"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Represent the hex value of the key in ASCII using ",(0,r.jsx)(t.code,{children:"xxd"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'use rand::{Rng,SeedableRng};\nuse rand::rngs::StdRng;\nuse std::fs;\nuse std::io::Write;\nuse std::io::prelude::*;\n\nfn get_rng() -> StdRng {\n    let seed = 13371337;\n    return StdRng::seed_from_u64(seed);\n}\n\nfn rand_xor(input :&mut [u8]) -> String {\n    let mut rng = get_rng();\n    return input\n        // .chars()\n        .into_iter()\n        .map(|c| format!("{:02x}", (*c ^ rng.gen::<u8>())))\n        .collect::<Vec<String>>()\n        .join("");\n}\n\nfn main() -> std::io::Result<()> {\n    // we now read the file contents into a vector of u8 values\n    let mut file_content = Vec::new();\n    let mut file = fs::File::open("out.txt").expect("Unable to open file");\n    file.read_to_end(&mut file_content).expect("Unable to read");\n    let xored = rand_xor(&mut file_content);\n    println!("{}", xored);\n    let mut file = fs::File::create("flag.txt")?;\n    file.write(xored.as_bytes())?;\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Of course, since this is the first time I had to deal with Rust, I had to install a lot of stuff first. After that, to generate the needed files to build the project, we run:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"cargo init"})," in the project folder to generate a templated ",(0,r.jsx)(t.code,{children:"Cargo.toml"})," file."]}),"\n",(0,r.jsxs)(t.li,{children:["Add ",(0,r.jsx)(t.code,{children:"rand = '*'"})," under ",(0,r.jsx)(t.code,{children:"[dependencies]"})," inside ",(0,r.jsx)(t.code,{children:"Cargo.toml"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Run ",(0,r.jsx)(t.code,{children:"cargo build"})," to build the project."]}),"\n",(0,r.jsxs)(t.li,{children:["Run it with ",(0,r.jsx)(t.code,{children:"cargo run"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We now have the hex representation of the flag inside our ",(0,r.jsx)(t.code,{children:"flag.txt"})," file, so we can simply run"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"cat flag.txt | xxd -r -ps\n"})}),"\n",(0,r.jsx)(t.p,{children:"and we get our flag"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"CHTB{mem0ry_s4f3_crypt0_f41l}\n"})}),"\n","\n","\n",(0,r.jsx)(s.A,{})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);