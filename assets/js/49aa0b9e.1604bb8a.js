"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3132],{951:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=o(4848),s=o(8453);const i={slug:"boot-sector",title:"boot sector",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},r="boot sector",l={permalink:"/snip/boot-sector",source:"@site/snip/boot-sector.md",title:"boot sector",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"lowlevel",permalink:"/snip/tags/lowlevel"},{label:"assembly",permalink:"/snip/tags/assembly"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"boot-sector",title:"boot sector",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},unlisted:!1,prevItem:{title:"bios-read-from-disk",permalink:"/snip/bios-read-from-disk"},nextItem:{title:"build-binary-for-arm",permalink:"/snip/build-binary-for-arm"}},a={authorsImageUrls:[void 0]},c=[];function d(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"The first 512 bytes of a bootable drive, which the BIOS can read into memory and\nexecute immediately after a [[power-on self-test|POST]] check."}),"\n",(0,n.jsx)(t.p,{children:"Things to note about the boot sector:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["At this time, the CPU will operate in [[16-bit-real-mode]]. In NASM assembly,\nthis can be signified with ",(0,n.jsx)(t.code,{children:"[bits 16]"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The BIOS will load the boot sector onto RAM with offset ",(0,n.jsx)(t.code,{children:"0x7C00"}),". This can be\nsignified in NASM assembly as ",(0,n.jsx)(t.code,{children:"[ORG 0x7c00]"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The boot sector must end on the magic number ",(0,n.jsx)(t.code,{children:"0xaa55"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h1,{id:"example-boot-sector-in-nasm-assembly",children:"Example Boot Sector in NASM assembly"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-asm",children:"[bits 16]                   ; Work in 16-bit mode\n[ORG 0x7C00]                ; Set memory offset for where BIOS will load this\n\nloop:\n    jmp loop                ; Endless loop\n\ntimes 510-($-$$) db 0       ; Fill remainder of boot sector with zeroes\ndw 0xAA55                   ; End with magic number\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>l});var n=o(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);