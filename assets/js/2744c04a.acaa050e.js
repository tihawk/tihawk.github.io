"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[170],{7299:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(4848),n=s(8453);const r={slug:"custom-systemd-service",title:"How to create custom systemd services",description:"Shebangs, or interpreter directives have been around since the '80s. They help select interpreters for the little scripts we write. But I realised I've never really looked into why am I writing this magic line of nonsense in the beginning of scripts. And of course, what are its limitations and/or weird associated behaviours we can make use of?",authors:"kiroki",tags:["linux","devops"]},a=void 0,o={permalink:"/snip/custom-systemd-service",source:"@site/snip/custom-systemd-service.md",title:"How to create custom systemd services",description:"Shebangs, or interpreter directives have been around since the '80s. They help select interpreters for the little scripts we write. But I realised I've never really looked into why am I writing this magic line of nonsense in the beginning of scripts. And of course, what are its limitations and/or weird associated behaviours we can make use of?",date:"2025-07-23T18:22:12.000Z",formattedDate:"July 23, 2025",tags:[{label:"linux",permalink:"/snip/tags/linux"},{label:"devops",permalink:"/snip/tags/devops"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"custom-systemd-service",title:"How to create custom systemd services",description:"Shebangs, or interpreter directives have been around since the '80s. They help select interpreters for the little scripts we write. But I realised I've never really looked into why am I writing this magic line of nonsense in the beginning of scripts. And of course, what are its limitations and/or weird associated behaviours we can make use of?",authors:"kiroki",tags:["linux","devops"]},unlisted:!1,prevItem:{title:"vim-switch-open-buffer",permalink:"/snip/vim-switch-open-buffer"}},l={authorsImageUrls:[void 0]},c=[{value:"Description",id:"description",level:2},{value:"Go wild here",id:"go-wild-here",level:2},{value:"Restart limit",id:"restart-limit",level:3},{value:"Limited automatic restart with a valid StartLimitIntervalSec",id:"limited-automatic-restart-with-a-valid-startlimitintervalsec",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.p,{children:["Directly from ",(0,i.jsx)(t.a,{href:"https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html",children:"the systemd documentation"})]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:'A unit configuration file whose name ends in ".service" encodes information about a process controlled and supervised by systemd.'}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Below is an example of how I'd set one up"}),"\n",(0,i.jsx)(t.h2,{id:"go-wild-here",children:"Go wild here"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-systemd",metastring:'title="some.service"',children:'[Unit]\nDescription=Some service template\nAfter=network.target    # Means "start when network ready".\n                        # Can be replaced with the name of some other service\n                        # to wait for.\nStartLimitIntervalSec=0\n\n[Service]\nType=simple     # One of simple, exec, forking, oneshot, dbus, notify,\n                # notify-reload, or idle.\nRestart=always  # One of always, on-failure, on-success, on-abnormal,\n                # on-watchdog, on-abort.\nRestartSec=1    # Time to sleep before attempting a restart.\nUser=kblagoev   # User to run service under.\nExecStart=/usr/bin/env node /path/to/server.js # The actual command to run.\n\n[Install]\nWantedBy=multi-user.target\n'})}),"\n",(0,i.jsx)(t.p,{children:"To make use of it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell-session",children:"$ cp <some.service> /etc/systemd/system/<some.service>\n$ systemctl start <some.service>\n$ systemctl enable <some.service> # This will ensure automatic start on boot\n"})}),"\n",(0,i.jsx)(t.h1,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(t.h3,{id:"restart-limit",children:"Restart limit"}),"\n",(0,i.jsxs)(t.p,{children:["By default, ",(0,i.jsx)(t.code,{children:"systemd"})," gives up restarting the service if it fails to start more than 5 times within 10 seconds. This is defined in the following variables"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-systemd",children:"[Unit]\nStartLimitBurst=5\nStartLimitIntervalSec=10\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This is avoided by setting ",(0,i.jsx)(t.code,{children:"StartLimitIntervalSec=0"}),". This will assure systemd attempts restarting forever. The idea is that, as long as ",(0,i.jsx)(t.code,{children:"StartLimitIntervalSec"})," is less than ",(0,i.jsx)(t.code,{children:"RestartSec * StartLimitBurst"}),", the service will be restarted indefinitely."]}),"\n",(0,i.jsxs)(t.p,{children:["As an alternative, you can leave the default settings, and ask systemd to restart your service if the start limit is reached, using ",(0,i.jsx)(t.code,{children:"StartLimitAction=reboot"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"limited-automatic-restart-with-a-valid-startlimitintervalsec",children:"Limited automatic restart with a valid StartLimitIntervalSec"}),"\n",(0,i.jsx)(t.p,{children:"To have a service restart 3 times at 90 second intervals include the following lines in your systemd service file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-systemd",children:"[Unit]\nStartLimitIntervalSec=400\nStartLimitBurst=3\n[Service]\nRestart=always\nRestartSec=90\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var i=s(6540);const n={},r=i.createContext(n);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);