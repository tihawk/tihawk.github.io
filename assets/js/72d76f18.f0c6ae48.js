"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3540],{4983:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(4848),s=n(8453);const o={slug:"bios-read-from-disk",title:"bios-read-from-disk",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},i="bios-read-from-disk",a={permalink:"/snip/bios-read-from-disk",source:"@site/snip/bios-read-from-disk.md",title:"bios-read-from-disk",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"lowlevel",permalink:"/snip/tags/lowlevel"},{label:"assembly",permalink:"/snip/tags/assembly"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"bios-read-from-disk",title:"bios-read-from-disk",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},unlisted:!1,prevItem:{title:"bios-read-char-from-keyboard",permalink:"/snip/bios-read-char-from-keyboard"},nextItem:{title:"boot sector",permalink:"/snip/boot-sector"}},d={authorsImageUrls:[void 0]},l=[];function c(e){const r={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Date created: 2024-09-24"}),"\n",(0,t.jsx)(r.h1,{id:"resources-and-links",children:"Resources and links"}),"\n",(0,t.jsx)(r.p,{children:"[[os-development-lectures-pdf]]"}),"\n",(0,t.jsx)(r.h1,{id:"example-routine-for-reading-from-disk",children:"Example routine for reading from disk"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-asm",children:'; load DH sectors to ES:BX from drive DL\ndisk_load:\n    push dx         ; Store DX on stack so later we can recall\n                    ; how many sectors were request to be read ,\n                    ; even if it is altered in the meantime\n    mov ah, 0x02    ; BIOS read sector function\n    mov al, dh      ; Read DH sectors\n    mov ch, 0x00    ; Select cylinder 0\n    mov dh, 0x00    ; Select head 0\n    mov cl, 0x02    ; Start reading from second sector ( i.e.\n                    ; after the boot sector )\n    int 0x13        ; BIOS interrupt\n    jc disk_error   ; Jump if error ( i.e. carry flag set )\n    pop dx          ; Restore DX from the stack\n    cmp dh, al      ; if AL ( sectors read ) != DH ( sectors expected )\n    jne disk_error  ; display error message\n    ret\n\ndisk_error:\n    mov bx, DISK_ERROR_MSG\n    call print_string\n    jmp $\n\n; Variables\nDISK_ERROR_MSG db "Disk read error !", 0\n'})}),"\n",(0,t.jsx)(r.h1,{id:"example-usage",children:"Example usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-asm",children:'[ORG 0x7c00]\n\nmov [BOOT_DRIVE], dl    ; BIOS stores our boot drive in DL, so it\'s best to\n                        ; remember this for later\n\nmov bp, 0x8000         ; Set stack safely out of the way\nmov sp, bp\n\nmov bx, 0x9000          ; Load 5 sectors to 0 x0000 (ES ):0 x9000 (BX)\nmov dh, 5               ;   from the boot disk\nmov dl, [BOOT_DRIVE]\ncall disk_load\n\nmov ax, [0x9000]\ncall print_hex_word\n\nmov ax, [0x9000 + 512]\ncall print_hex_word\n\njmp $\n\n%include "src/disk_load.asm"\n%include "src/print_hex_word.asm"\n\nBOOT_DRIVE: db 0;\n\ntimes 510-($-$$) db 0\ndw 0xAA55\n\ntimes 256 dw 0xdada     ; We read this and the next sectors from this disk.\ntimes 256 dw 0xface\n'})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(6540);const s={},o=t.createContext(s);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);