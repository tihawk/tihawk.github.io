"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[582],{5570:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(4848),a=t(8453);const o={slug:"bios-read-char-from-keyboard",title:"bios-read-char-from-keyboard",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},i="bios-read-char-from-keyboard",s={permalink:"/snip/bios-read-char-from-keyboard",source:"@site/snip/bios-read-char-from-keyboard.md",title:"bios-read-char-from-keyboard",description:"TODO Add description here",date:"2025-08-15T11:52:41.000Z",formattedDate:"August 15, 2025",tags:[{label:"lowlevel",permalink:"/snip/tags/lowlevel"},{label:"assembly",permalink:"/snip/tags/assembly"}],hasTruncateMarker:!1,authors:[{name:"Kiril Panayotov Blagoev",title:"Admin",url:"https://github.com/tihawk",imageURL:"https://github.com/tihawk.png",key:"kiroki"}],frontMatter:{slug:"bios-read-char-from-keyboard",title:"bios-read-char-from-keyboard",description:"TODO Add description here",authors:"kiroki",tags:["lowlevel","assembly"]},unlisted:!1,prevItem:{title:"binary-tree-java",permalink:"/snip/binary-tree-java"},nextItem:{title:"bios-read-from-disk",permalink:"/snip/bios-read-from-disk"}},l={authorsImageUrls:[void 0]},c=[];function d(e){const r={code:"code",h1:"h1",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"a-simple-routine-to-read-char-from-keyboard-using-bios-interrupt",children:"A simple routine to read char from keyboard using BIOS interrupt"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-asm",children:"; Function to read a character from the keyboard using BIOS interrupt 0x16\n; Returns -> AL holds the read character\ngetch:\n    mov ah, 0x00\n    int 0x16\n    ret\n"})}),"\n",(0,n.jsx)(r.h1,{id:"example-usage",children:"Example usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-asm",children:"[BITS 16]\n[ORG 0x7C00] ; BIOS loads the boot sector here\n\n; Main loop\nmain:\n    mov si, buffer ; Initialize pointer to the buffer\ninput_loop:\n    ; Read a character from the keyboard\n    call getch  ; The read character will be stored as a byte in the al register\n    sub al, '0' ; Convert ASCII to numerical value\n    cmp al, 7\n    ja halt     ; If input is greater than '7', jump to halt CPU\n\n    mov byte [si], al   ; Store numerical value into the buffer\n    inc si              ; Move to the next byte in the program array\n    jmp input_loop\n\n%include \"src/getch.asm\"\n\nhalt:\n    jmp halt\n\n; Reserve the remaining space on the boot sector for the program we input\nbuffer: times 510-($-$$) db 0\n; Boot sector magic number\ndw 0xAA55\n"})})]})}function m(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>s});var n=t(6540);const a={},o=n.createContext(a);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);